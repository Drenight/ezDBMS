// Generated from /Users/liuboyao/Assignments23Spring/DataBase/A3/src/parser/MySqlParser.g4 by ANTLR 4.8
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		ATTRIBUTE=14, BEFORE=15, BETWEEN=16, BOTH=17, BUCKETS=18, BY=19, CALL=20, 
		CASCADE=21, CASE=22, CAST=23, CHANGE=24, CHARACTER=25, CHECK=26, COLLATE=27, 
		COLUMN=28, CONDITION=29, CONSTRAINT=30, CONTINUE=31, CONVERT=32, CREATE=33, 
		CROSS=34, CURRENT=35, CURRENT_ROLE=36, CURRENT_USER=37, CURSOR=38, DATABASE=39, 
		DATABASES=40, DECLARE=41, DEFAULT=42, DELAYED=43, DELETE=44, DESC=45, 
		DESCRIBE=46, DETERMINISTIC=47, DIAGNOSTICS=48, DISTINCT=49, DISTINCTROW=50, 
		DROP=51, EACH=52, ELSE=53, ELSEIF=54, EMPTY=55, ENCLOSED=56, ENFORCED=57, 
		ESCAPED=58, EXCEPT=59, EXISTS=60, EXIT=61, EXPLAIN=62, FALSE=63, FETCH=64, 
		FOR=65, FORCE=66, FOREIGN=67, FROM=68, FULLTEXT=69, GENERATED=70, GET=71, 
		GRANT=72, GROUP=73, HAVING=74, HIGH_PRIORITY=75, HISTOGRAM=76, IF=77, 
		IGNORE=78, IGNORED=79, IN=80, INDEX=81, INFILE=82, INNER=83, INOUT=84, 
		INSERT=85, INTERVAL=86, INTO=87, IS=88, ITERATE=89, JOIN=90, KEY=91, KEYS=92, 
		KILL=93, LATERAL=94, LEADING=95, LEAVE=96, LEFT=97, LIKE=98, LIMIT=99, 
		LINEAR=100, LINES=101, LOAD=102, LOCK=103, LOCKED=104, LOOP=105, LOW_PRIORITY=106, 
		MASTER_BIND=107, MASTER_SSL_VERIFY_SERVER_CERT=108, MATCH=109, MAXVALUE=110, 
		MINVALUE=111, MODIFIES=112, NATURAL=113, NOT=114, NO_WRITE_TO_BINLOG=115, 
		NULL_LITERAL=116, NUMBER=117, ON=118, OPTIMIZE=119, OPTION=120, OPTIONAL=121, 
		OPTIONALLY=122, OR=123, ORDER=124, OUT=125, OUTER=126, OUTFILE=127, OVER=128, 
		PARTITION=129, PRIMARY=130, PROCEDURE=131, PURGE=132, RANGE=133, READ=134, 
		READS=135, REFERENCES=136, REGEXP=137, RELEASE=138, RENAME=139, REPEAT=140, 
		REPLACE=141, REQUIRE=142, RESIGNAL=143, RESTRICT=144, RETAIN=145, RETURN=146, 
		REVOKE=147, RIGHT=148, RLIKE=149, SCHEMA=150, SCHEMAS=151, SELECT=152, 
		SET=153, SEPARATOR=154, SHOW=155, SIGNAL=156, SKIP_=157, SKIP_QUERY_REWRITE=158, 
		SPATIAL=159, SQL=160, SQLEXCEPTION=161, SQLSTATE=162, SQLWARNING=163, 
		SQL_BIG_RESULT=164, SQL_CALC_FOUND_ROWS=165, SQL_SMALL_RESULT=166, SSL=167, 
		STACKED=168, STARTING=169, STATEMENT=170, STRAIGHT_JOIN=171, TABLE=172, 
		TERMINATED=173, THEN=174, TO=175, TRAILING=176, TRIGGER=177, TRUE=178, 
		UNDO=179, UNION=180, UNIQUE=181, UNLOCK=182, UNSIGNED=183, UPDATE=184, 
		USAGE=185, USE=186, USING=187, VALUES=188, WHEN=189, WHERE=190, WHILE=191, 
		WITH=192, WRITE=193, XOR=194, ZEROFILL=195, TINYINT=196, SMALLINT=197, 
		MEDIUMINT=198, MIDDLEINT=199, INT=200, INT1=201, INT2=202, INT3=203, INT4=204, 
		INT8=205, INTEGER=206, BIGINT=207, REAL=208, DOUBLE=209, PRECISION=210, 
		FLOAT=211, FLOAT4=212, FLOAT8=213, DECIMAL=214, DEC=215, NUMERIC=216, 
		DATE=217, TIME=218, TIMESTAMP=219, DATETIME=220, YEAR=221, CHAR=222, VARCHAR=223, 
		NVARCHAR=224, NATIONAL=225, BINARY=226, VARBINARY=227, TINYBLOB=228, BLOB=229, 
		MEDIUMBLOB=230, LONG=231, LONGBLOB=232, TINYTEXT=233, TEXT=234, MEDIUMTEXT=235, 
		LONGTEXT=236, ENUM=237, VARYING=238, SERIAL=239, YEAR_MONTH=240, DAY_HOUR=241, 
		DAY_MINUTE=242, DAY_SECOND=243, HOUR_MINUTE=244, HOUR_SECOND=245, MINUTE_SECOND=246, 
		SECOND_MICROSECOND=247, MINUTE_MICROSECOND=248, HOUR_MICROSECOND=249, 
		DAY_MICROSECOND=250, JSON_ARRAY=251, JSON_ARRAYAGG=252, JSON_ARRAY_APPEND=253, 
		JSON_ARRAY_INSERT=254, JSON_CONTAINS=255, JSON_CONTAINS_PATH=256, JSON_DEPTH=257, 
		JSON_EXTRACT=258, JSON_INSERT=259, JSON_KEYS=260, JSON_LENGTH=261, JSON_MERGE=262, 
		JSON_MERGE_PATCH=263, JSON_MERGE_PRESERVE=264, JSON_OBJECT=265, JSON_OBJECTAGG=266, 
		JSON_OVERLAPS=267, JSON_PRETTY=268, JSON_QUOTE=269, JSON_REMOVE=270, JSON_REPLACE=271, 
		JSON_SCHEMA_VALID=272, JSON_SCHEMA_VALIDATION_REPORT=273, JSON_SEARCH=274, 
		JSON_SET=275, JSON_STORAGE_FREE=276, JSON_STORAGE_SIZE=277, JSON_TABLE=278, 
		JSON_TYPE=279, JSON_UNQUOTE=280, JSON_VALID=281, JSON_VALUE=282, NESTED=283, 
		ORDINALITY=284, PATH=285, AVG=286, BIT_AND=287, BIT_OR=288, BIT_XOR=289, 
		COUNT=290, CUME_DIST=291, DENSE_RANK=292, FIRST_VALUE=293, GROUP_CONCAT=294, 
		LAG=295, LAST_VALUE=296, LEAD=297, MAX=298, MIN=299, NTILE=300, NTH_VALUE=301, 
		PERCENT_RANK=302, RANK=303, ROW_NUMBER=304, STD=305, STDDEV=306, STDDEV_POP=307, 
		STDDEV_SAMP=308, SUM=309, VAR_POP=310, VAR_SAMP=311, VARIANCE=312, CURRENT_DATE=313, 
		CURRENT_TIME=314, CURRENT_TIMESTAMP=315, LOCALTIME=316, CURDATE=317, CURTIME=318, 
		DATE_ADD=319, DATE_SUB=320, EXTRACT=321, LOCALTIMESTAMP=322, NOW=323, 
		POSITION=324, SUBSTR=325, SUBSTRING=326, SYSDATE=327, TRIM=328, UTC_DATE=329, 
		UTC_TIME=330, UTC_TIMESTAMP=331, ACCOUNT=332, ACTION=333, AFTER=334, AGGREGATE=335, 
		ALGORITHM=336, ANY=337, AT=338, AUTHORS=339, AUTOCOMMIT=340, AUTOEXTEND_SIZE=341, 
		AUTO_INCREMENT=342, AVG_ROW_LENGTH=343, BEGIN=344, BINLOG=345, BIT=346, 
		BLOCK=347, BOOL=348, BOOLEAN=349, BTREE=350, CACHE=351, CASCADED=352, 
		CHAIN=353, CHANGED=354, CHANNEL=355, CHECKSUM=356, PAGE_CHECKSUM=357, 
		CIPHER=358, CLASS_ORIGIN=359, CLIENT=360, CLOSE=361, CLUSTERING=362, COALESCE=363, 
		CODE=364, COLUMNS=365, COLUMN_FORMAT=366, COLUMN_NAME=367, COMMENT=368, 
		COMMIT=369, COMPACT=370, COMPLETION=371, COMPRESSED=372, COMPRESSION=373, 
		CONCURRENT=374, CONNECT=375, CONNECTION=376, CONSISTENT=377, CONSTRAINT_CATALOG=378, 
		CONSTRAINT_SCHEMA=379, CONSTRAINT_NAME=380, CONTAINS=381, CONTEXT=382, 
		CONTRIBUTORS=383, COPY=384, CPU=385, CYCLE=386, CURSOR_NAME=387, DATA=388, 
		DATAFILE=389, DEALLOCATE=390, DEFAULT_AUTH=391, DEFINER=392, DELAY_KEY_WRITE=393, 
		DES_KEY_FILE=394, DIRECTORY=395, DISABLE=396, DISCARD=397, DISK=398, DO=399, 
		DUMPFILE=400, DUPLICATE=401, DYNAMIC=402, ENABLE=403, ENCRYPTED=404, ENCRYPTION=405, 
		ENCRYPTION_KEY_ID=406, END=407, ENDS=408, ENGINE=409, ENGINES=410, ERROR=411, 
		ERRORS=412, ESCAPE=413, EVEN=414, EVENT=415, EVENTS=416, EVERY=417, EXCHANGE=418, 
		EXCLUSIVE=419, EXPIRE=420, EXPORT=421, EXTENDED=422, EXTENT_SIZE=423, 
		FAILED_LOGIN_ATTEMPTS=424, FAST=425, FAULTS=426, FIELDS=427, FILE_BLOCK_SIZE=428, 
		FILTER=429, FIRST=430, FIXED=431, FLUSH=432, FOLLOWING=433, FOLLOWS=434, 
		FOUND=435, FULL=436, FUNCTION=437, GENERAL=438, GLOBAL=439, GRANTS=440, 
		GROUP_REPLICATION=441, HANDLER=442, HASH=443, HELP=444, HISTORY=445, HOST=446, 
		HOSTS=447, IDENTIFIED=448, IGNORE_SERVER_IDS=449, IMPORT=450, INCREMENT=451, 
		INDEXES=452, INITIAL_SIZE=453, INPLACE=454, INSERT_METHOD=455, INSTALL=456, 
		INSTANCE=457, INSTANT=458, INVISIBLE=459, INVOKER=460, IO=461, IO_THREAD=462, 
		IPC=463, ISOLATION=464, ISSUER=465, JSON=466, KEY_BLOCK_SIZE=467, LANGUAGE=468, 
		LAST=469, LEAVES=470, LESS=471, LEVEL=472, LIST=473, LOCAL=474, LOGFILE=475, 
		LOGS=476, MASTER=477, MASTER_AUTO_POSITION=478, MASTER_CONNECT_RETRY=479, 
		MASTER_DELAY=480, MASTER_HEARTBEAT_PERIOD=481, MASTER_HOST=482, MASTER_LOG_FILE=483, 
		MASTER_LOG_POS=484, MASTER_PASSWORD=485, MASTER_PORT=486, MASTER_RETRY_COUNT=487, 
		MASTER_SSL=488, MASTER_SSL_CA=489, MASTER_SSL_CAPATH=490, MASTER_SSL_CERT=491, 
		MASTER_SSL_CIPHER=492, MASTER_SSL_CRL=493, MASTER_SSL_CRLPATH=494, MASTER_SSL_KEY=495, 
		MASTER_TLS_VERSION=496, MASTER_USER=497, MAX_CONNECTIONS_PER_HOUR=498, 
		MAX_QUERIES_PER_HOUR=499, MAX_ROWS=500, MAX_SIZE=501, MAX_UPDATES_PER_HOUR=502, 
		MAX_USER_CONNECTIONS=503, MEDIUM=504, MEMBER=505, MERGE=506, MESSAGE_TEXT=507, 
		MID=508, MIGRATE=509, MIN_ROWS=510, MODE=511, MODIFY=512, MUTEX=513, MYSQL=514, 
		MYSQL_ERRNO=515, NAME=516, NAMES=517, NCHAR=518, NEVER=519, NEXT=520, 
		NO=521, NOCACHE=522, NOCOPY=523, NOCYCLE=524, NOMAXVALUE=525, NOMINVALUE=526, 
		NOWAIT=527, NODEGROUP=528, NONE=529, ODBC=530, OFFLINE=531, OFFSET=532, 
		OF=533, OJ=534, OLD_PASSWORD=535, ONE=536, ONLINE=537, ONLY=538, OPEN=539, 
		OPTIMIZER_COSTS=540, OPTIONS=541, OWNER=542, PACK_KEYS=543, PAGE=544, 
		PAGE_COMPRESSED=545, PAGE_COMPRESSION_LEVEL=546, PARSER=547, PARTIAL=548, 
		PARTITIONING=549, PARTITIONS=550, PASSWORD=551, PASSWORD_LOCK_TIME=552, 
		PHASE=553, PLUGIN=554, PLUGIN_DIR=555, PLUGINS=556, PORT=557, PRECEDES=558, 
		PRECEDING=559, PREPARE=560, PRESERVE=561, PREV=562, PROCESSLIST=563, PROFILE=564, 
		PROFILES=565, PROXY=566, QUERY=567, QUICK=568, REBUILD=569, RECOVER=570, 
		RECURSIVE=571, REDO_BUFFER_SIZE=572, REDUNDANT=573, RELAY=574, RELAY_LOG_FILE=575, 
		RELAY_LOG_POS=576, RELAYLOG=577, REMOVE=578, REORGANIZE=579, REPAIR=580, 
		REPLICATE_DO_DB=581, REPLICATE_DO_TABLE=582, REPLICATE_IGNORE_DB=583, 
		REPLICATE_IGNORE_TABLE=584, REPLICATE_REWRITE_DB=585, REPLICATE_WILD_DO_TABLE=586, 
		REPLICATE_WILD_IGNORE_TABLE=587, REPLICATION=588, RESET=589, RESTART=590, 
		RESUME=591, RETURNED_SQLSTATE=592, RETURNING=593, RETURNS=594, REUSE=595, 
		ROLE=596, ROLLBACK=597, ROLLUP=598, ROTATE=599, ROW=600, ROWS=601, ROW_FORMAT=602, 
		RTREE=603, SAVEPOINT=604, SCHEDULE=605, SECURITY=606, SEQUENCE=607, SERVER=608, 
		SESSION=609, SHARE=610, SHARED=611, SIGNED=612, SIMPLE=613, SLAVE=614, 
		SLOW=615, SNAPSHOT=616, SOCKET=617, SOME=618, SONAME=619, SOUNDS=620, 
		SOURCE=621, SQL_AFTER_GTIDS=622, SQL_AFTER_MTS_GAPS=623, SQL_BEFORE_GTIDS=624, 
		SQL_BUFFER_RESULT=625, SQL_CACHE=626, SQL_NO_CACHE=627, SQL_THREAD=628, 
		START=629, STARTS=630, STATS_AUTO_RECALC=631, STATS_PERSISTENT=632, STATS_SAMPLE_PAGES=633, 
		STATUS=634, STOP=635, STORAGE=636, STORED=637, STRING=638, SUBCLASS_ORIGIN=639, 
		SUBJECT=640, SUBPARTITION=641, SUBPARTITIONS=642, SUSPEND=643, SWAPS=644, 
		SWITCHES=645, TABLE_NAME=646, TABLESPACE=647, TABLE_TYPE=648, TEMPORARY=649, 
		TEMPTABLE=650, THAN=651, TRADITIONAL=652, TRANSACTION=653, TRANSACTIONAL=654, 
		TRIGGERS=655, TRUNCATE=656, UNBOUNDED=657, UNDEFINED=658, UNDOFILE=659, 
		UNDO_BUFFER_SIZE=660, UNINSTALL=661, UNKNOWN=662, UNTIL=663, UPGRADE=664, 
		USER=665, USE_FRM=666, USER_RESOURCES=667, VALIDATION=668, VALUE=669, 
		VARIABLES=670, VIEW=671, VIRTUAL=672, VISIBLE=673, WAIT=674, WARNINGS=675, 
		WINDOW=676, WITHOUT=677, WORK=678, WRAPPER=679, X509=680, XA=681, XML=682, 
		YES=683, EUR=684, USA=685, JIS=686, ISO=687, INTERNAL=688, QUARTER=689, 
		MONTH=690, DAY=691, HOUR=692, MINUTE=693, WEEK=694, SECOND=695, MICROSECOND=696, 
		ADMIN=697, APPLICATION_PASSWORD_ADMIN=698, AUDIT_ABORT_EXEMPT=699, AUDIT_ADMIN=700, 
		BACKUP_ADMIN=701, BINLOG_ADMIN=702, BINLOG_ENCRYPTION_ADMIN=703, CLONE_ADMIN=704, 
		CONNECTION_ADMIN=705, ENCRYPTION_KEY_ADMIN=706, EXECUTE=707, FILE=708, 
		FIREWALL_ADMIN=709, FIREWALL_EXEMPT=710, FIREWALL_USER=711, FLUSH_OPTIMIZER_COSTS=712, 
		FLUSH_STATUS=713, FLUSH_TABLES=714, FLUSH_USER_RESOURCES=715, GROUP_REPLICATION_ADMIN=716, 
		INNODB_REDO_LOG_ARCHIVE=717, INNODB_REDO_LOG_ENABLE=718, INVOKE=719, LAMBDA=720, 
		NDB_STORED_USER=721, PASSWORDLESS_USER_ADMIN=722, PERSIST_RO_VARIABLES_ADMIN=723, 
		PRIVILEGES=724, PROCESS=725, RELOAD=726, REPLICATION_APPLIER=727, REPLICATION_SLAVE_ADMIN=728, 
		RESOURCE_GROUP_ADMIN=729, RESOURCE_GROUP_USER=730, ROLE_ADMIN=731, ROUTINE=732, 
		S3=733, SERVICE_CONNECTION_ADMIN=734, SESSION_VARIABLES_ADMIN=735, SET_USER_ID=736, 
		SHOW_ROUTINE=737, SHUTDOWN=738, SUPER=739, SYSTEM_VARIABLES_ADMIN=740, 
		TABLES=741, TABLE_ENCRYPTION_ADMIN=742, VERSION_TOKEN_ADMIN=743, XA_RECOVER_ADMIN=744, 
		ARMSCII8=745, ASCII=746, BIG5=747, CP1250=748, CP1251=749, CP1256=750, 
		CP1257=751, CP850=752, CP852=753, CP866=754, CP932=755, DEC8=756, EUCJPMS=757, 
		EUCKR=758, GB18030=759, GB2312=760, GBK=761, GEOSTD8=762, GREEK=763, HEBREW=764, 
		HP8=765, KEYBCS2=766, KOI8R=767, KOI8U=768, LATIN1=769, LATIN2=770, LATIN5=771, 
		LATIN7=772, MACCE=773, MACROMAN=774, SJIS=775, SWE7=776, TIS620=777, UCS2=778, 
		UJIS=779, UTF16=780, UTF16LE=781, UTF32=782, UTF8=783, UTF8MB3=784, UTF8MB4=785, 
		ARCHIVE=786, BLACKHOLE=787, CSV=788, FEDERATED=789, INNODB=790, MEMORY=791, 
		MRG_MYISAM=792, MYISAM=793, NDB=794, NDBCLUSTER=795, PERFORMANCE_SCHEMA=796, 
		TOKUDB=797, REPEATABLE=798, COMMITTED=799, UNCOMMITTED=800, SERIALIZABLE=801, 
		GEOMETRYCOLLECTION=802, GEOMCOLLECTION=803, GEOMETRY=804, LINESTRING=805, 
		MULTILINESTRING=806, MULTIPOINT=807, MULTIPOLYGON=808, POINT=809, POLYGON=810, 
		ABS=811, ACOS=812, ADDDATE=813, ADDTIME=814, AES_DECRYPT=815, AES_ENCRYPT=816, 
		AREA=817, ASBINARY=818, ASIN=819, ASTEXT=820, ASWKB=821, ASWKT=822, ASYMMETRIC_DECRYPT=823, 
		ASYMMETRIC_DERIVE=824, ASYMMETRIC_ENCRYPT=825, ASYMMETRIC_SIGN=826, ASYMMETRIC_VERIFY=827, 
		ATAN=828, ATAN2=829, BENCHMARK=830, BIN=831, BIT_COUNT=832, BIT_LENGTH=833, 
		BUFFER=834, CATALOG_NAME=835, CEIL=836, CEILING=837, CENTROID=838, CHARACTER_LENGTH=839, 
		CHARSET=840, CHAR_LENGTH=841, COERCIBILITY=842, COLLATION=843, COMPRESS=844, 
		CONCAT=845, CONCAT_WS=846, CONNECTION_ID=847, CONV=848, CONVERT_TZ=849, 
		COS=850, COT=851, CRC32=852, CREATE_ASYMMETRIC_PRIV_KEY=853, CREATE_ASYMMETRIC_PUB_KEY=854, 
		CREATE_DH_PARAMETERS=855, CREATE_DIGEST=856, CROSSES=857, DATEDIFF=858, 
		DATE_FORMAT=859, DAYNAME=860, DAYOFMONTH=861, DAYOFWEEK=862, DAYOFYEAR=863, 
		DECODE=864, DEGREES=865, DES_DECRYPT=866, DES_ENCRYPT=867, DIMENSION=868, 
		DISJOINT=869, ELT=870, ENCODE=871, ENCRYPT=872, ENDPOINT=873, ENGINE_ATTRIBUTE=874, 
		ENVELOPE=875, EQUALS=876, EXP=877, EXPORT_SET=878, EXTERIORRING=879, EXTRACTVALUE=880, 
		FIELD=881, FIND_IN_SET=882, FLOOR=883, FORMAT=884, FOUND_ROWS=885, FROM_BASE64=886, 
		FROM_DAYS=887, FROM_UNIXTIME=888, GEOMCOLLFROMTEXT=889, GEOMCOLLFROMWKB=890, 
		GEOMETRYCOLLECTIONFROMTEXT=891, GEOMETRYCOLLECTIONFROMWKB=892, GEOMETRYFROMTEXT=893, 
		GEOMETRYFROMWKB=894, GEOMETRYN=895, GEOMETRYTYPE=896, GEOMFROMTEXT=897, 
		GEOMFROMWKB=898, GET_FORMAT=899, GET_LOCK=900, GLENGTH=901, GREATEST=902, 
		GTID_SUBSET=903, GTID_SUBTRACT=904, HEX=905, IFNULL=906, INET6_ATON=907, 
		INET6_NTOA=908, INET_ATON=909, INET_NTOA=910, INSTR=911, INTERIORRINGN=912, 
		INTERSECTS=913, ISCLOSED=914, ISEMPTY=915, ISNULL=916, ISSIMPLE=917, IS_FREE_LOCK=918, 
		IS_IPV4=919, IS_IPV4_COMPAT=920, IS_IPV4_MAPPED=921, IS_IPV6=922, IS_USED_LOCK=923, 
		LAST_INSERT_ID=924, LCASE=925, LEAST=926, LENGTH=927, LINEFROMTEXT=928, 
		LINEFROMWKB=929, LINESTRINGFROMTEXT=930, LINESTRINGFROMWKB=931, LN=932, 
		LOAD_FILE=933, LOCATE=934, LOG=935, LOG10=936, LOG2=937, LOWER=938, LPAD=939, 
		LTRIM=940, MAKEDATE=941, MAKETIME=942, MAKE_SET=943, MASTER_POS_WAIT=944, 
		MBRCONTAINS=945, MBRDISJOINT=946, MBREQUAL=947, MBRINTERSECTS=948, MBROVERLAPS=949, 
		MBRTOUCHES=950, MBRWITHIN=951, MD5=952, MLINEFROMTEXT=953, MLINEFROMWKB=954, 
		MONTHNAME=955, MPOINTFROMTEXT=956, MPOINTFROMWKB=957, MPOLYFROMTEXT=958, 
		MPOLYFROMWKB=959, MULTILINESTRINGFROMTEXT=960, MULTILINESTRINGFROMWKB=961, 
		MULTIPOINTFROMTEXT=962, MULTIPOINTFROMWKB=963, MULTIPOLYGONFROMTEXT=964, 
		MULTIPOLYGONFROMWKB=965, NAME_CONST=966, NULLIF=967, NUMGEOMETRIES=968, 
		NUMINTERIORRINGS=969, NUMPOINTS=970, OCT=971, OCTET_LENGTH=972, ORD=973, 
		OVERLAPS=974, PERIOD_ADD=975, PERIOD_DIFF=976, PI=977, POINTFROMTEXT=978, 
		POINTFROMWKB=979, POINTN=980, POLYFROMTEXT=981, POLYFROMWKB=982, POLYGONFROMTEXT=983, 
		POLYGONFROMWKB=984, POW=985, POWER=986, QUOTE=987, RADIANS=988, RAND=989, 
		RANDOM_BYTES=990, RELEASE_LOCK=991, REVERSE=992, ROUND=993, ROW_COUNT=994, 
		RPAD=995, RTRIM=996, SEC_TO_TIME=997, SECONDARY_ENGINE_ATTRIBUTE=998, 
		SESSION_USER=999, SHA=1000, SHA1=1001, SHA2=1002, SCHEMA_NAME=1003, SIGN=1004, 
		SIN=1005, SLEEP=1006, SOUNDEX=1007, SQL_THREAD_WAIT_AFTER_GTIDS=1008, 
		SQRT=1009, SRID=1010, STARTPOINT=1011, STRCMP=1012, STR_TO_DATE=1013, 
		ST_AREA=1014, ST_ASBINARY=1015, ST_ASTEXT=1016, ST_ASWKB=1017, ST_ASWKT=1018, 
		ST_BUFFER=1019, ST_CENTROID=1020, ST_CONTAINS=1021, ST_CROSSES=1022, ST_DIFFERENCE=1023, 
		ST_DIMENSION=1024, ST_DISJOINT=1025, ST_DISTANCE=1026, ST_ENDPOINT=1027, 
		ST_ENVELOPE=1028, ST_EQUALS=1029, ST_EXTERIORRING=1030, ST_GEOMCOLLFROMTEXT=1031, 
		ST_GEOMCOLLFROMTXT=1032, ST_GEOMCOLLFROMWKB=1033, ST_GEOMETRYCOLLECTIONFROMTEXT=1034, 
		ST_GEOMETRYCOLLECTIONFROMWKB=1035, ST_GEOMETRYFROMTEXT=1036, ST_GEOMETRYFROMWKB=1037, 
		ST_GEOMETRYN=1038, ST_GEOMETRYTYPE=1039, ST_GEOMFROMTEXT=1040, ST_GEOMFROMWKB=1041, 
		ST_INTERIORRINGN=1042, ST_INTERSECTION=1043, ST_INTERSECTS=1044, ST_ISCLOSED=1045, 
		ST_ISEMPTY=1046, ST_ISSIMPLE=1047, ST_LINEFROMTEXT=1048, ST_LINEFROMWKB=1049, 
		ST_LINESTRINGFROMTEXT=1050, ST_LINESTRINGFROMWKB=1051, ST_NUMGEOMETRIES=1052, 
		ST_NUMINTERIORRING=1053, ST_NUMINTERIORRINGS=1054, ST_NUMPOINTS=1055, 
		ST_OVERLAPS=1056, ST_POINTFROMTEXT=1057, ST_POINTFROMWKB=1058, ST_POINTN=1059, 
		ST_POLYFROMTEXT=1060, ST_POLYFROMWKB=1061, ST_POLYGONFROMTEXT=1062, ST_POLYGONFROMWKB=1063, 
		ST_SRID=1064, ST_STARTPOINT=1065, ST_SYMDIFFERENCE=1066, ST_TOUCHES=1067, 
		ST_UNION=1068, ST_WITHIN=1069, ST_X=1070, ST_Y=1071, SUBDATE=1072, SUBSTRING_INDEX=1073, 
		SUBTIME=1074, SYSTEM_USER=1075, TAN=1076, TIMEDIFF=1077, TIMESTAMPADD=1078, 
		TIMESTAMPDIFF=1079, TIME_FORMAT=1080, TIME_TO_SEC=1081, TOUCHES=1082, 
		TO_BASE64=1083, TO_DAYS=1084, TO_SECONDS=1085, TP_CONNECTION_ADMIN=1086, 
		UCASE=1087, UNCOMPRESS=1088, UNCOMPRESSED_LENGTH=1089, UNHEX=1090, UNIX_TIMESTAMP=1091, 
		UPDATEXML=1092, UPPER=1093, UUID=1094, UUID_SHORT=1095, VALIDATE_PASSWORD_STRENGTH=1096, 
		VERSION=1097, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1098, WEEKDAY=1099, WEEKOFYEAR=1100, 
		WEIGHT_STRING=1101, WITHIN=1102, YEARWEEK=1103, Y_FUNCTION=1104, X_FUNCTION=1105, 
		VAR_ASSIGN=1106, PLUS_ASSIGN=1107, MINUS_ASSIGN=1108, MULT_ASSIGN=1109, 
		DIV_ASSIGN=1110, MOD_ASSIGN=1111, AND_ASSIGN=1112, XOR_ASSIGN=1113, OR_ASSIGN=1114, 
		STAR=1115, DIVIDE=1116, MODULE=1117, PLUS=1118, MINUS=1119, DIV=1120, 
		MOD=1121, EQUAL_SYMBOL=1122, GREATER_SYMBOL=1123, LESS_SYMBOL=1124, EXCLAMATION_SYMBOL=1125, 
		BIT_NOT_OP=1126, BIT_OR_OP=1127, BIT_AND_OP=1128, BIT_XOR_OP=1129, DOT=1130, 
		LR_BRACKET=1131, RR_BRACKET=1132, COMMA=1133, SEMI=1134, AT_SIGN=1135, 
		ZERO_DECIMAL=1136, ONE_DECIMAL=1137, TWO_DECIMAL=1138, SINGLE_QUOTE_SYMB=1139, 
		DOUBLE_QUOTE_SYMB=1140, REVERSE_QUOTE_SYMB=1141, COLON_SYMB=1142, CHARSET_REVERSE_QOUTE_STRING=1143, 
		FILESIZE_LITERAL=1144, START_NATIONAL_STRING_LITERAL=1145, STRING_LITERAL=1146, 
		DECIMAL_LITERAL=1147, HEXADECIMAL_LITERAL=1148, REAL_LITERAL=1149, NULL_SPEC_LITERAL=1150, 
		BIT_STRING=1151, STRING_CHARSET_NAME=1152, DOT_ID=1153, ID=1154, REVERSE_QUOTE_ID=1155, 
		STRING_USER_NAME=1156, IP_ADDRESS=1157, LOCAL_ID=1158, GLOBAL_ID=1159, 
		ERROR_RECONGNIGION=1160;
	public static final int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement_ = 3, 
		RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6, 
		RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9, 
		RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12, 
		RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15, 
		RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createRole = 18, 
		RULE_createServer = 19, RULE_createTable = 20, RULE_createTablespaceInnodb = 21, 
		RULE_createTablespaceNdb = 22, RULE_createTrigger = 23, RULE_withClause = 24, 
		RULE_commonTableExpressions = 25, RULE_cteName = 26, RULE_cteColumnName = 27, 
		RULE_createView = 28, RULE_createDatabaseOption = 29, RULE_charSet = 30, 
		RULE_ownerStatement = 31, RULE_scheduleExpression = 32, RULE_timestampValue = 33, 
		RULE_intervalExpr = 34, RULE_intervalType = 35, RULE_enableType = 36, 
		RULE_indexType = 37, RULE_indexOption = 38, RULE_procedureParameter = 39, 
		RULE_functionParameter = 40, RULE_routineOption = 41, RULE_serverOption = 42, 
		RULE_createDefinitions = 43, RULE_createDefinition = 44, RULE_columnDefinition = 45, 
		RULE_columnConstraint = 46, RULE_tableConstraint = 47, RULE_referenceDefinition = 48, 
		RULE_referenceAction = 49, RULE_referenceControlType = 50, RULE_indexColumnDefinition = 51, 
		RULE_tableOption = 52, RULE_tableType = 53, RULE_tablespaceStorage = 54, 
		RULE_partitionDefinitions = 55, RULE_partitionFunctionDefinition = 56, 
		RULE_subpartitionFunctionDefinition = 57, RULE_partitionDefinition = 58, 
		RULE_partitionDefinerAtom = 59, RULE_partitionDefinerVector = 60, RULE_subpartitionDefinition = 61, 
		RULE_partitionOption = 62, RULE_alterDatabase = 63, RULE_alterEvent = 64, 
		RULE_alterFunction = 65, RULE_alterInstance = 66, RULE_alterLogfileGroup = 67, 
		RULE_alterProcedure = 68, RULE_alterServer = 69, RULE_alterTable = 70, 
		RULE_alterTablespace = 71, RULE_alterView = 72, RULE_alterSpecification = 73, 
		RULE_dropDatabase = 74, RULE_dropEvent = 75, RULE_dropIndex = 76, RULE_dropLogfileGroup = 77, 
		RULE_dropProcedure = 78, RULE_dropFunction = 79, RULE_dropServer = 80, 
		RULE_dropTable = 81, RULE_dropTablespace = 82, RULE_dropTrigger = 83, 
		RULE_dropView = 84, RULE_dropRole = 85, RULE_setRole = 86, RULE_renameTable = 87, 
		RULE_renameTableClause = 88, RULE_truncateTable = 89, RULE_callStatement = 90, 
		RULE_deleteStatement = 91, RULE_doStatement = 92, RULE_handlerStatement = 93, 
		RULE_insertStatement = 94, RULE_loadDataStatement = 95, RULE_loadXmlStatement = 96, 
		RULE_replaceStatement = 97, RULE_selectStatement = 98, RULE_updateStatement = 99, 
		RULE_valuesStatement = 100, RULE_insertStatementValue = 101, RULE_updatedElement = 102, 
		RULE_assignmentField = 103, RULE_lockClause = 104, RULE_singleDeleteStatement = 105, 
		RULE_multipleDeleteStatement = 106, RULE_handlerOpenStatement = 107, RULE_handlerReadIndexStatement = 108, 
		RULE_handlerReadStatement = 109, RULE_handlerCloseStatement = 110, RULE_singleUpdateStatement = 111, 
		RULE_multipleUpdateStatement = 112, RULE_orderByClause = 113, RULE_orderByExpression = 114, 
		RULE_tableSources = 115, RULE_tableSource = 116, RULE_tableSourceItem = 117, 
		RULE_indexHint = 118, RULE_indexHintType = 119, RULE_joinPart = 120, RULE_queryExpression = 121, 
		RULE_queryExpressionNointo = 122, RULE_querySpecification = 123, RULE_querySpecificationNointo = 124, 
		RULE_unionParenthesis = 125, RULE_unionStatement = 126, RULE_lateralStatement = 127, 
		RULE_jsonTable = 128, RULE_jsonColumnList = 129, RULE_jsonColumn = 130, 
		RULE_jsonOnEmpty = 131, RULE_jsonOnError = 132, RULE_selectSpec = 133, 
		RULE_selectElements = 134, RULE_selectElement = 135, RULE_selectIntoExpression = 136, 
		RULE_selectFieldsInto = 137, RULE_selectLinesInto = 138, RULE_fromClause = 139, 
		RULE_groupByClause = 140, RULE_havingClause = 141, RULE_windowClause = 142, 
		RULE_groupByItem = 143, RULE_limitClause = 144, RULE_limitClauseAtom = 145, 
		RULE_startTransaction = 146, RULE_beginWork = 147, RULE_commitWork = 148, 
		RULE_rollbackWork = 149, RULE_savepointStatement = 150, RULE_rollbackStatement = 151, 
		RULE_releaseStatement = 152, RULE_lockTables = 153, RULE_unlockTables = 154, 
		RULE_setAutocommitStatement = 155, RULE_setTransactionStatement = 156, 
		RULE_transactionMode = 157, RULE_lockTableElement = 158, RULE_lockAction = 159, 
		RULE_transactionOption = 160, RULE_transactionLevel = 161, RULE_changeMaster = 162, 
		RULE_changeReplicationFilter = 163, RULE_purgeBinaryLogs = 164, RULE_resetMaster = 165, 
		RULE_resetSlave = 166, RULE_startSlave = 167, RULE_stopSlave = 168, RULE_startGroupReplication = 169, 
		RULE_stopGroupReplication = 170, RULE_masterOption = 171, RULE_stringMasterOption = 172, 
		RULE_decimalMasterOption = 173, RULE_boolMasterOption = 174, RULE_channelOption = 175, 
		RULE_replicationFilter = 176, RULE_tablePair = 177, RULE_threadType = 178, 
		RULE_untilOption = 179, RULE_connectionOption = 180, RULE_gtuidSet = 181, 
		RULE_xaStartTransaction = 182, RULE_xaEndTransaction = 183, RULE_xaPrepareStatement = 184, 
		RULE_xaCommitWork = 185, RULE_xaRollbackWork = 186, RULE_xaRecoverWork = 187, 
		RULE_prepareStatement = 188, RULE_executeStatement = 189, RULE_deallocatePrepare = 190, 
		RULE_routineBody = 191, RULE_blockStatement = 192, RULE_caseStatement = 193, 
		RULE_ifStatement = 194, RULE_iterateStatement = 195, RULE_leaveStatement = 196, 
		RULE_loopStatement = 197, RULE_repeatStatement = 198, RULE_returnStatement = 199, 
		RULE_whileStatement = 200, RULE_cursorStatement = 201, RULE_declareVariable = 202, 
		RULE_declareCondition = 203, RULE_declareCursor = 204, RULE_declareHandler = 205, 
		RULE_handlerConditionValue = 206, RULE_procedureSqlStatement = 207, RULE_caseAlternative = 208, 
		RULE_elifAlternative = 209, RULE_alterUser = 210, RULE_createUser = 211, 
		RULE_dropUser = 212, RULE_grantStatement = 213, RULE_roleOption = 214, 
		RULE_grantProxy = 215, RULE_renameUser = 216, RULE_revokeStatement = 217, 
		RULE_revokeProxy = 218, RULE_setPasswordStatement = 219, RULE_userSpecification = 220, 
		RULE_userAuthOption = 221, RULE_authenticationRule = 222, RULE_tlsOption = 223, 
		RULE_userResourceOption = 224, RULE_userPasswordOption = 225, RULE_userLockOption = 226, 
		RULE_privelegeClause = 227, RULE_privilege = 228, RULE_privilegeLevel = 229, 
		RULE_renameUserClause = 230, RULE_analyzeTable = 231, RULE_checkTable = 232, 
		RULE_checksumTable = 233, RULE_optimizeTable = 234, RULE_repairTable = 235, 
		RULE_checkTableOption = 236, RULE_createUdfunction = 237, RULE_installPlugin = 238, 
		RULE_uninstallPlugin = 239, RULE_setStatement = 240, RULE_showStatement = 241, 
		RULE_variableClause = 242, RULE_showCommonEntity = 243, RULE_showFilter = 244, 
		RULE_showGlobalInfoClause = 245, RULE_showSchemaEntity = 246, RULE_showProfileType = 247, 
		RULE_binlogStatement = 248, RULE_cacheIndexStatement = 249, RULE_flushStatement = 250, 
		RULE_killStatement = 251, RULE_loadIndexIntoCache = 252, RULE_resetStatement = 253, 
		RULE_shutdownStatement = 254, RULE_tableIndexes = 255, RULE_flushOption = 256, 
		RULE_flushTableOption = 257, RULE_loadedTableIndexes = 258, RULE_simpleDescribeStatement = 259, 
		RULE_fullDescribeStatement = 260, RULE_helpStatement = 261, RULE_useStatement = 262, 
		RULE_signalStatement = 263, RULE_resignalStatement = 264, RULE_signalConditionInformation = 265, 
		RULE_withStatement = 266, RULE_diagnosticsStatement = 267, RULE_diagnosticsConditionInformationName = 268, 
		RULE_describeObjectClause = 269, RULE_fullId = 270, RULE_tableName = 271, 
		RULE_roleName = 272, RULE_fullColumnName = 273, RULE_indexColumnName = 274, 
		RULE_userName = 275, RULE_mysqlVariable = 276, RULE_charsetName = 277, 
		RULE_collationName = 278, RULE_engineName = 279, RULE_uuidSet = 280, RULE_xid = 281, 
		RULE_xuidStringId = 282, RULE_authPlugin = 283, RULE_uid = 284, RULE_simpleId = 285, 
		RULE_dottedId = 286, RULE_decimalLiteral = 287, RULE_fileSizeLiteral = 288, 
		RULE_stringLiteral = 289, RULE_booleanLiteral = 290, RULE_hexadecimalLiteral = 291, 
		RULE_nullNotnull = 292, RULE_constant = 293, RULE_dataType = 294, RULE_collectionOptions = 295, 
		RULE_convertedDataType = 296, RULE_lengthOneDimension = 297, RULE_lengthTwoDimension = 298, 
		RULE_lengthTwoOptionalDimension = 299, RULE_uidList = 300, RULE_fullColumnNameList = 301, 
		RULE_tables = 302, RULE_indexColumnNames = 303, RULE_expressions = 304, 
		RULE_expressionsWithDefaults = 305, RULE_constants = 306, RULE_simpleStrings = 307, 
		RULE_userVariables = 308, RULE_defaultValue = 309, RULE_currentTimestamp = 310, 
		RULE_expressionOrDefault = 311, RULE_ifExists = 312, RULE_ifNotExists = 313, 
		RULE_orReplace = 314, RULE_waitNowaitClause = 315, RULE_functionCall = 316, 
		RULE_specificFunction = 317, RULE_caseFuncAlternative = 318, RULE_levelsInWeightString = 319, 
		RULE_levelInWeightListElement = 320, RULE_aggregateWindowedFunction = 321, 
		RULE_nonAggregateWindowedFunction = 322, RULE_overClause = 323, RULE_windowSpec = 324, 
		RULE_windowName = 325, RULE_frameClause = 326, RULE_frameUnits = 327, 
		RULE_frameExtent = 328, RULE_frameBetween = 329, RULE_frameRange = 330, 
		RULE_partitionClause = 331, RULE_scalarFunctionName = 332, RULE_passwordFunctionClause = 333, 
		RULE_functionArgs = 334, RULE_functionArg = 335, RULE_expression = 336, 
		RULE_predicate = 337, RULE_expressionAtom = 338, RULE_unaryOperator = 339, 
		RULE_comparisonOperator = 340, RULE_logicalOperator = 341, RULE_bitOperator = 342, 
		RULE_mathOperator = 343, RULE_jsonOperator = 344, RULE_charsetNameBase = 345, 
		RULE_transactionLevelBase = 346, RULE_privilegesBase = 347, RULE_intervalTypeBase = 348, 
		RULE_dataTypeBase = 349, RULE_keywordsCanBeId = 350, RULE_functionNameBase = 351;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", 
			"dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement", 
			"compoundStatement", "administrationStatement", "utilityStatement", "createDatabase", 
			"createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
			"createFunction", "createRole", "createServer", "createTable", "createTablespaceInnodb", 
			"createTablespaceNdb", "createTrigger", "withClause", "commonTableExpressions", 
			"cteName", "cteColumnName", "createView", "createDatabaseOption", "charSet", 
			"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
			"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
			"functionParameter", "routineOption", "serverOption", "createDefinitions", 
			"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
			"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
			"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
			"partitionFunctionDefinition", "subpartitionFunctionDefinition", "partitionDefinition", 
			"partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
			"partitionOption", "alterDatabase", "alterEvent", "alterFunction", "alterInstance", 
			"alterLogfileGroup", "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
			"alterView", "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
			"dropLogfileGroup", "dropProcedure", "dropFunction", "dropServer", "dropTable", 
			"dropTablespace", "dropTrigger", "dropView", "dropRole", "setRole", "renameTable", 
			"renameTableClause", "truncateTable", "callStatement", "deleteStatement", 
			"doStatement", "handlerStatement", "insertStatement", "loadDataStatement", 
			"loadXmlStatement", "replaceStatement", "selectStatement", "updateStatement", 
			"valuesStatement", "insertStatementValue", "updatedElement", "assignmentField", 
			"lockClause", "singleDeleteStatement", "multipleDeleteStatement", "handlerOpenStatement", 
			"handlerReadIndexStatement", "handlerReadStatement", "handlerCloseStatement", 
			"singleUpdateStatement", "multipleUpdateStatement", "orderByClause", 
			"orderByExpression", "tableSources", "tableSource", "tableSourceItem", 
			"indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
			"querySpecification", "querySpecificationNointo", "unionParenthesis", 
			"unionStatement", "lateralStatement", "jsonTable", "jsonColumnList", 
			"jsonColumn", "jsonOnEmpty", "jsonOnError", "selectSpec", "selectElements", 
			"selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
			"fromClause", "groupByClause", "havingClause", "windowClause", "groupByItem", 
			"limitClause", "limitClauseAtom", "startTransaction", "beginWork", "commitWork", 
			"rollbackWork", "savepointStatement", "rollbackStatement", "releaseStatement", 
			"lockTables", "unlockTables", "setAutocommitStatement", "setTransactionStatement", 
			"transactionMode", "lockTableElement", "lockAction", "transactionOption", 
			"transactionLevel", "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", 
			"resetMaster", "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
			"stopGroupReplication", "masterOption", "stringMasterOption", "decimalMasterOption", 
			"boolMasterOption", "channelOption", "replicationFilter", "tablePair", 
			"threadType", "untilOption", "connectionOption", "gtuidSet", "xaStartTransaction", 
			"xaEndTransaction", "xaPrepareStatement", "xaCommitWork", "xaRollbackWork", 
			"xaRecoverWork", "prepareStatement", "executeStatement", "deallocatePrepare", 
			"routineBody", "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
			"leaveStatement", "loopStatement", "repeatStatement", "returnStatement", 
			"whileStatement", "cursorStatement", "declareVariable", "declareCondition", 
			"declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
			"caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser", 
			"grantStatement", "roleOption", "grantProxy", "renameUser", "revokeStatement", 
			"revokeProxy", "setPasswordStatement", "userSpecification", "userAuthOption", 
			"authenticationRule", "tlsOption", "userResourceOption", "userPasswordOption", 
			"userLockOption", "privelegeClause", "privilege", "privilegeLevel", "renameUserClause", 
			"analyzeTable", "checkTable", "checksumTable", "optimizeTable", "repairTable", 
			"checkTableOption", "createUdfunction", "installPlugin", "uninstallPlugin", 
			"setStatement", "showStatement", "variableClause", "showCommonEntity", 
			"showFilter", "showGlobalInfoClause", "showSchemaEntity", "showProfileType", 
			"binlogStatement", "cacheIndexStatement", "flushStatement", "killStatement", 
			"loadIndexIntoCache", "resetStatement", "shutdownStatement", "tableIndexes", 
			"flushOption", "flushTableOption", "loadedTableIndexes", "simpleDescribeStatement", 
			"fullDescribeStatement", "helpStatement", "useStatement", "signalStatement", 
			"resignalStatement", "signalConditionInformation", "withStatement", "diagnosticsStatement", 
			"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
			"tableName", "roleName", "fullColumnName", "indexColumnName", "userName", 
			"mysqlVariable", "charsetName", "collationName", "engineName", "uuidSet", 
			"xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
			"fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
			"nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType", 
			"lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
			"uidList", "fullColumnNameList", "tables", "indexColumnNames", "expressions", 
			"expressionsWithDefaults", "constants", "simpleStrings", "userVariables", 
			"defaultValue", "currentTimestamp", "expressionOrDefault", "ifExists", 
			"ifNotExists", "orReplace", "waitNowaitClause", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
			"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
			"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
			"passwordFunctionClause", "functionArgs", "functionArg", "expression", 
			"predicate", "expressionAtom", "unaryOperator", "comparisonOperator", 
			"logicalOperator", "bitOperator", "mathOperator", "jsonOperator", "charsetNameBase", 
			"transactionLevelBase", "privilegesBase", "intervalTypeBase", "dataTypeBase", 
			"keywordsCanBeId", "functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", "'BEFORE'", 
			"'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", 
			"'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
			"'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", 
			"'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", "'CURRENT_USER'", "'CURSOR'", 
			"'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
			"'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
			"'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", 
			"'ENCLOSED'", "'ENFORCED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", 
			"'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", 
			"'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", 
			"'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", 
			"'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
			"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
			"'LATERAL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
			"'LINES'", "'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", 
			"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
			"'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
			"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", 
			"'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'OVER'", 
			"'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", 
			"'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", 
			"'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", 
			"'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
			"'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SKIP'", "'SKIP_QUERY_REWRITE'", 
			"'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", 
			"'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", 
			"'STACKED'", "'STARTING'", "'STATEMENT'", "'STRAIGHT_JOIN'", "'TABLE'", 
			"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
			"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
			"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", "'WHILE'", 
			"'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
			"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
			"'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
			"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
			"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", 
			"'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", 
			"'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
			"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
			"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
			"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_DEPTH'", 
			"'JSON_EXTRACT'", "'JSON_INSERT'", "'JSON_KEYS'", "'JSON_LENGTH'", "'JSON_MERGE'", 
			"'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", 
			"'JSON_OVERLAPS'", "'JSON_PRETTY'", "'JSON_QUOTE'", "'JSON_REMOVE'", 
			"'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_SEARCH'", "'JSON_SET'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", 
			"'JSON_TABLE'", "'JSON_TYPE'", "'JSON_UNQUOTE'", "'JSON_VALID'", "'JSON_VALUE'", 
			"'NESTED'", "'ORDINALITY'", "'PATH'", "'AVG'", "'BIT_AND'", "'BIT_OR'", 
			"'BIT_XOR'", "'COUNT'", "'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", 
			"'GROUP_CONCAT'", "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", 
			"'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", 
			"'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", 
			"'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
			"'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", 
			"'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", 
			"'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
			"'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", 
			"'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", 
			"'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
			"'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", 
			"'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", 
			"'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", 
			"'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
			"'COMPLETION'", "'COMPRESSED'", null, "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", 
			"'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
			"'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CYCLE'", 
			"'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
			"'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
			"'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
			"'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", "'ENCRYPTION_KEY_ID'", "'END'", 
			"'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", 
			"'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", 
			"'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAILED_LOGIN_ATTEMPTS'", 
			"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
			"'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", 
			"'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
			"'HANDLER'", "'HASH'", "'HELP'", "'HISTORY'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
			"'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", 
			"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", 
			"'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", 
			"'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", 
			"'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
			"'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
			"'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
			"'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", 
			"'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", 
			"'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
			"'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
			"'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", 
			"'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", 
			"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
			"'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NOCACHE'", 
			"'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NOWAIT'", 
			"'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", 
			"'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
			"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PAGE_COMPRESSED'", 
			"'PAGE_COMPRESSION_LEVEL'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
			"'PARTITIONS'", "'PASSWORD'", "'PASSWORD_LOCK_TIME'", "'PHASE'", "'PLUGIN'", 
			"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", 
			"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
			"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", 
			"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
			"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
			"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
			"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
			"'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
			"'RETURNS'", "'REUSE'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
			"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", 
			"'SECURITY'", "'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
			"'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
			"'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
			"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", 
			"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
			"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
			"'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
			"'MICROSECOND'", "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ABORT_EXEMPT'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", 
			"'FILE'", "'FIREWALL_ADMIN'", "'FIREWALL_EXEMPT'", "'FIREWALL_USER'", 
			"'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", 
			"'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", 
			"'INVOKE'", "'LAMBDA'", "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", 
			"'PERSIST_RO_VARIABLES_ADMIN'", "'PRIVILEGES'", "'PROCESS'", "'RELOAD'", 
			"'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
			"'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'ROUTINE'", "'S3'", "'SERVICE_CONNECTION_ADMIN'", 
			null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SHUTDOWN'", "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", 
			"'TABLES'", "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", 
			"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
			"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
			"'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", 
			"'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
			"'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", 
			"'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", 
			"'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", 
			"'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
			"'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
			"'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", 
			"'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", 
			"'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", 
			"'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", 
			"'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", 
			"'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", 
			"'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
			"'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
			"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
			"'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
			"'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
			"'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
			"'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
			"'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", 
			"'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
			"'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
			"'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
			"'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
			"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
			"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
			"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
			"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
			"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
			"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
			"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
			"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'TP_CONNECTION_ADMIN'", 
			"'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", 
			"'UPDATEXML'", "'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", 
			"'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", 
			"'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", 
			"'1'", "'2'", "'''", "'\"'", "'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
			"ATTRIBUTE", "BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", 
			"CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", 
			"CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", 
			"CURRENT", "CURRENT_ROLE", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
			"DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
			"DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", "ELSEIF", 
			"EMPTY", "ENCLOSED", "ENFORCED", "ESCAPED", "EXCEPT", "EXISTS", "EXIT", 
			"EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", 
			"GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "HISTOGRAM", 
			"IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", "INOUT", 
			"INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", 
			"KILL", "LATERAL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
			"LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
			"MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", 
			"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
			"OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", "OR", "ORDER", "OUT", 
			"OUTER", "OUTFILE", "OVER", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
			"RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
			"REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", "RETURN", 
			"REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
			"SHOW", "SIGNAL", "SKIP_", "SKIP_QUERY_REWRITE", "SPATIAL", "SQL", "SQLEXCEPTION", 
			"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STACKED", "STARTING", "STATEMENT", "STRAIGHT_JOIN", "TABLE", 
			"TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", 
			"UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", 
			"WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", 
			"SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", 
			"INT4", "INT8", "INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", 
			"FLOAT4", "FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", 
			"DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", 
			"VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", 
			"TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "JSON_ARRAY", "JSON_ARRAYAGG", "JSON_ARRAY_APPEND", 
			"JSON_ARRAY_INSERT", "JSON_CONTAINS", "JSON_CONTAINS_PATH", "JSON_DEPTH", 
			"JSON_EXTRACT", "JSON_INSERT", "JSON_KEYS", "JSON_LENGTH", "JSON_MERGE", 
			"JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_OBJECT", "JSON_OBJECTAGG", 
			"JSON_OVERLAPS", "JSON_PRETTY", "JSON_QUOTE", "JSON_REMOVE", "JSON_REPLACE", 
			"JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", "JSON_SEARCH", 
			"JSON_SET", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_TABLE", "JSON_TYPE", 
			"JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", "NESTED", "ORDINALITY", "PATH", 
			"AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", 
			"FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", "MAX", "MIN", 
			"NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", "STD", "STDDEV", 
			"STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
			"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
			"CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", 
			"POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
			"UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
			"ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", 
			"AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
			"BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
			"PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", 
			"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", 
			"COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", 
			"CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
			"CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", 
			"CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
			"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
			"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
			"ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", "ENDS", "ENGINE", 
			"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
			"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
			"FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
			"FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", 
			"FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
			"HANDLER", "HASH", "HELP", "HISTORY", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", 
			"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", 
			"INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", 
			"NOMINVALUE", "NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
			"OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", 
			"PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", 
			"PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", 
			"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", 
			"PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", 
			"REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", 
			"REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
			"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
			"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
			"RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
			"REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
			"RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", 
			"SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", 
			"SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
			"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
			"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
			"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
			"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
			"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
			"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
			"TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
			"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
			"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
			"YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
			"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "ADMIN", "APPLICATION_PASSWORD_ADMIN", 
			"AUDIT_ABORT_EXEMPT", "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", 
			"BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
			"EXECUTE", "FILE", "FIREWALL_ADMIN", "FIREWALL_EXEMPT", "FIREWALL_USER", 
			"FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", "FLUSH_USER_RESOURCES", 
			"GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", 
			"INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", "PERSIST_RO_VARIABLES_ADMIN", 
			"PRIVILEGES", "PROCESS", "RELOAD", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
			"RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", "ROUTINE", 
			"S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", "SET_USER_ID", 
			"SHOW_ROUTINE", "SHUTDOWN", "SUPER", "SYSTEM_VARIABLES_ADMIN", "TABLES", 
			"TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", 
			"GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
			"KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
			"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
			"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
			"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
			"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
			"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
			"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
			"GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
			"GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", 
			"GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", 
			"INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
			"INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
			"IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
			"LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
			"LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
			"LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
			"MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
			"MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
			"MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
			"MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", 
			"MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
			"NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
			"OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
			"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
			"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
			"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
			"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
			"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
			"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
			"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
			"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
			"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
			"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
			"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
			"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
			"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
			"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
			"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
			"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
			"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
			"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
			"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
			"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
			"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
			"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "TP_CONNECTION_ADMIN", 
			"UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
			"UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", 
			"VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
			"WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
			"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
			"AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
			"PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", 
			"EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", 
			"DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
			"ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
			"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
			"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
			"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
			"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
			"IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class RootContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySqlParser.EOF, 0); }
		public SqlStatementsContext sqlStatements() {
			return getRuleContext(SqlStatementsContext.class,0);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (GET - 71)) | (1L << (GRANT - 71)) | (1L << (INSERT - 71)) | (1L << (KILL - 71)) | (1L << (LOAD - 71)) | (1L << (LOCK - 71)) | (1L << (OPTIMIZE - 71)) | (1L << (PURGE - 71)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (RELEASE - 138)) | (1L << (RENAME - 138)) | (1L << (REPLACE - 138)) | (1L << (RESIGNAL - 138)) | (1L << (REVOKE - 138)) | (1L << (SELECT - 138)) | (1L << (SET - 138)) | (1L << (SHOW - 138)) | (1L << (SIGNAL - 138)) | (1L << (UNLOCK - 138)) | (1L << (UPDATE - 138)) | (1L << (USE - 138)) | (1L << (VALUES - 138)) | (1L << (WITH - 138)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (BEGIN - 344)) | (1L << (BINLOG - 344)) | (1L << (CACHE - 344)) | (1L << (CHECKSUM - 344)) | (1L << (COMMIT - 344)) | (1L << (DEALLOCATE - 344)) | (1L << (DO - 344)))) != 0) || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (FLUSH - 432)) | (1L << (HANDLER - 432)) | (1L << (HELP - 432)) | (1L << (INSTALL - 432)))) != 0) || ((((_la - 560)) & ~0x3f) == 0 && ((1L << (_la - 560)) & ((1L << (PREPARE - 560)) | (1L << (REPAIR - 560)) | (1L << (RESET - 560)) | (1L << (ROLLBACK - 560)) | (1L << (SAVEPOINT - 560)))) != 0) || ((((_la - 629)) & ~0x3f) == 0 && ((1L << (_la - 629)) & ((1L << (START - 629)) | (1L << (STOP - 629)) | (1L << (TRUNCATE - 629)) | (1L << (UNINSTALL - 629)) | (1L << (XA - 629)))) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				setState(704);
				sqlStatements();
				}
			}

			setState(709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS) {
				{
				setState(707);
				match(MINUS);
				setState(708);
				match(MINUS);
				}
			}

			setState(711);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatement_Context> emptyStatement_() {
			return getRuleContexts(EmptyStatement_Context.class);
		}
		public EmptyStatement_Context emptyStatement_(int i) {
			return getRuleContext(EmptyStatement_Context.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(724);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(722);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case VALUES:
					case WITH:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						setState(713);
						sqlStatement();
						setState(716);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(714);
							match(MINUS);
							setState(715);
							match(MINUS);
							}
						}

						setState(719);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
						case 1:
							{
							setState(718);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(721);
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(726);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case WITH:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				setState(727);
				sqlStatement();
				setState(733);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
				case 1:
					{
					setState(730);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(728);
						match(MINUS);
						setState(729);
						match(MINUS);
						}
					}

					setState(732);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				setState(735);
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sqlStatement);
		try {
			setState(745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(738);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(739);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(740);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(741);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(742);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(743);
				administrationStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(744);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatement_Context extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement_; }
	}

	public final EmptyStatement_Context emptyStatement_() throws RecognitionException {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(_ctx, getState());
		enterRule(_localctx, 6, RULE_emptyStatement_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(747);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterFunctionContext alterFunction() {
			return getRuleContext(AlterFunctionContext.class,0);
		}
		public AlterInstanceContext alterInstance() {
			return getRuleContext(AlterInstanceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterProcedureContext alterProcedure() {
			return getRuleContext(AlterProcedureContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTablespaceContext dropTablespace() {
			return getRuleContext(DropTablespaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_ddlStatement);
		try {
			setState(787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(749);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(750);
				createEvent();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(751);
				createIndex();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(752);
				createLogfileGroup();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(753);
				createProcedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(754);
				createFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(755);
				createServer();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(756);
				createTable();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(757);
				createTablespaceInnodb();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(758);
				createTablespaceNdb();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(759);
				createTrigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(760);
				createView();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(761);
				createRole();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(762);
				alterDatabase();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(763);
				alterEvent();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(764);
				alterFunction();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(765);
				alterInstance();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(766);
				alterLogfileGroup();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(767);
				alterProcedure();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(768);
				alterServer();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(769);
				alterTable();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(770);
				alterTablespace();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(771);
				alterView();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(772);
				dropDatabase();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(773);
				dropEvent();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(774);
				dropIndex();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(775);
				dropLogfileGroup();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(776);
				dropProcedure();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(777);
				dropFunction();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(778);
				dropServer();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(779);
				dropTable();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(780);
				dropTablespace();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(781);
				dropTrigger();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(782);
				dropView();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(783);
				dropRole();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(784);
				setRole();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(785);
				renameTable();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(786);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public ValuesStatementContext valuesStatement() {
			return getRuleContext(ValuesStatementContext.class,0);
		}
		public WithStatementContext withStatement() {
			return getRuleContext(WithStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_dmlStatement);
		try {
			setState(801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(789);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(790);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(791);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(792);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(793);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(794);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(795);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(796);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(797);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(798);
				handlerStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(799);
				valuesStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(800);
				withStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesContext lockTables() {
			return getRuleContext(LockTablesContext.class,0);
		}
		public UnlockTablesContext unlockTables() {
			return getRuleContext(UnlockTablesContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_transactionStatement);
		try {
			setState(812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(803);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(804);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(805);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(806);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(807);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(808);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(809);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(810);
				lockTables();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(811);
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_replicationStatement);
		try {
			setState(829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(814);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(815);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(816);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(817);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(818);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(819);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(820);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(821);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(822);
				stopGroupReplication();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(823);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(824);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(825);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(826);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(827);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(828);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_preparedStatement);
		try {
			setState(834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(831);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(832);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(833);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_compoundStatement);
		try {
			setState(846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(836);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(837);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(838);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(839);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(840);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(841);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(842);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(843);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(844);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(845);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_administrationStatement);
		try {
			setState(873);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(848);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(849);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(850);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(851);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(852);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(853);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(854);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(855);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(856);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(857);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(858);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(859);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(860);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(861);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(862);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(863);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(864);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(865);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(866);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(867);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(868);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(869);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(870);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(871);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(872);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public DiagnosticsStatementContext diagnosticsStatement() {
			return getRuleContext(DiagnosticsStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_utilityStatement);
		try {
			setState(882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(875);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(876);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(877);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(878);
				useStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(879);
				signalStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(880);
				resignalStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(881);
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(884);
			match(CREATE);
			setState(885);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(886);
				ifNotExists();
				}
				break;
			}
			setState(889);
			uid();
			setState(893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET) {
				{
				{
				setState(890);
				createDatabaseOption();
				}
				}
				setState(895);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(896);
			match(CREATE);
			setState(898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(897);
				ownerStatement();
				}
			}

			setState(900);
			match(EVENT);
			setState(902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(901);
				ifNotExists();
				}
				break;
			}
			setState(904);
			fullId();
			setState(905);
			match(ON);
			setState(906);
			match(SCHEDULE);
			setState(907);
			scheduleExpression();
			setState(914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(908);
				match(ON);
				setState(909);
				match(COMPLETION);
				setState(911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(910);
					match(NOT);
					}
				}

				setState(913);
				match(PRESERVE);
				}
			}

			setState(917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(916);
				enableType();
				}
			}

			setState(921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(919);
				match(COMMENT);
				setState(920);
				match(STRING_LITERAL);
				}
			}

			setState(923);
			match(DO);
			setState(924);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token indexCategory;
		public Token algType;
		public Token lockType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(926);
			match(CREATE);
			setState(928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(927);
				((CreateIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((CreateIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(930);
				((CreateIndexContext)_localctx).indexCategory = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					((CreateIndexContext)_localctx).indexCategory = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(933);
			match(INDEX);
			setState(934);
			uid();
			setState(936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(935);
				indexType();
				}
			}

			setState(938);
			match(ON);
			setState(939);
			tableName();
			setState(940);
			indexColumnNames();
			setState(944);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(941);
					indexOption();
					}
					} 
				}
				setState(946);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			}
			setState(959);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(957);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(947);
						match(ALGORITHM);
						setState(949);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(948);
							match(EQUAL_SYMBOL);
							}
						}

						setState(951);
						((CreateIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((CreateIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(952);
						match(LOCK);
						setState(954);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(953);
							match(EQUAL_SYMBOL);
							}
						}

						setState(956);
						((CreateIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((CreateIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(961);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public Token undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(962);
			match(CREATE);
			setState(963);
			match(LOGFILE);
			setState(964);
			match(GROUP);
			setState(965);
			uid();
			setState(966);
			match(ADD);
			setState(967);
			match(UNDOFILE);
			setState(968);
			((CreateLogfileGroupContext)_localctx).undoFile = match(STRING_LITERAL);
			setState(974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(969);
				match(INITIAL_SIZE);
				setState(971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(970);
					match(EQUAL_SYMBOL);
					}
				}

				setState(973);
				((CreateLogfileGroupContext)_localctx).initSize = fileSizeLiteral();
				}
			}

			setState(981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(976);
				match(UNDO_BUFFER_SIZE);
				setState(978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(977);
					match(EQUAL_SYMBOL);
					}
				}

				setState(980);
				((CreateLogfileGroupContext)_localctx).undoSize = fileSizeLiteral();
				}
			}

			setState(988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(983);
				match(REDO_BUFFER_SIZE);
				setState(985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(984);
					match(EQUAL_SYMBOL);
					}
				}

				setState(987);
				((CreateLogfileGroupContext)_localctx).redoSize = fileSizeLiteral();
				}
			}

			setState(995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(990);
				match(NODEGROUP);
				setState(992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(991);
					match(EQUAL_SYMBOL);
					}
				}

				setState(994);
				uid();
				}
			}

			setState(998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(997);
				match(WAIT);
				}
			}

			setState(1005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1000);
				match(COMMENT);
				setState(1002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1001);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1004);
				((CreateLogfileGroupContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1007);
			match(ENGINE);
			setState(1009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1008);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1011);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1013);
			match(CREATE);
			setState(1015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1014);
				ownerStatement();
				}
			}

			setState(1017);
			match(PROCEDURE);
			setState(1018);
			fullId();
			setState(1019);
			match(LR_BRACKET);
			setState(1021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (IN - 73)) | (1L << (INOUT - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (OUT - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(1020);
				procedureParameter();
				}
			}

			setState(1027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1023);
				match(COMMA);
				setState(1024);
				procedureParameter();
				}
				}
				setState(1029);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1030);
			match(RR_BRACKET);
			setState(1034);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1031);
					routineOption();
					}
					} 
				}
				setState(1036);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,49,_ctx);
			}
			setState(1037);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1039);
			match(CREATE);
			setState(1041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1040);
				ownerStatement();
				}
			}

			setState(1044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(1043);
				match(AGGREGATE);
				}
			}

			setState(1046);
			match(FUNCTION);
			setState(1048);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(1047);
				ifNotExists();
				}
				break;
			}
			setState(1050);
			fullId();
			setState(1051);
			match(LR_BRACKET);
			setState(1053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(1052);
				functionParameter();
				}
			}

			setState(1059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1055);
				match(COMMA);
				setState(1056);
				functionParameter();
				}
				}
				setState(1061);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1062);
			match(RR_BRACKET);
			setState(1063);
			match(RETURNS);
			setState(1064);
			dataType();
			setState(1068);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1065);
					routineOption();
					}
					} 
				}
				setState(1070);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,55,_ctx);
			}
			setState(1073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case ANALYZE:
			case ATTRIBUTE:
			case BUCKETS:
			case CALL:
			case CHANGE:
			case CHECK:
			case CONDITION:
			case CREATE:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EMPTY:
			case ENFORCED:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case KILL:
			case LATERAL:
			case LEFT:
			case LOAD:
			case LOCK:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case SKIP_QUERY_REWRITE:
			case STACKED:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case WITH:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ABORT_EXEMPT:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_EXEMPT:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TP_CONNECTION_ADMIN:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(1071);
				routineBody();
				}
				break;
			case RETURN:
				{
				setState(1072);
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1075);
			match(CREATE);
			setState(1076);
			match(ROLE);
			setState(1078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				setState(1077);
				ifNotExists();
				}
				break;
			}
			setState(1080);
			roleName();
			setState(1085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1081);
				match(COMMA);
				setState(1082);
				roleName();
				}
				}
				setState(1087);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public Token wrapperName;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1088);
			match(CREATE);
			setState(1089);
			match(SERVER);
			setState(1090);
			uid();
			setState(1091);
			match(FOREIGN);
			setState(1092);
			match(DATA);
			setState(1093);
			match(WRAPPER);
			setState(1094);
			((CreateServerContext)_localctx).wrapperName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				((CreateServerContext)_localctx).wrapperName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1095);
			match(OPTIONS);
			setState(1096);
			match(LR_BRACKET);
			setState(1097);
			serverOption();
			setState(1102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1098);
				match(COMMA);
				setState(1099);
				serverOption();
				}
				}
				setState(1104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1105);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
	 
		public CreateTableContext() { }
		public void copyFrom(CreateTableContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CopyCreateTableContext extends CreateTableContext {
		public TableNameContext parenthesisTable;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CopyCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
	}
	public static class ColumnCreateTableContext extends CreateTableContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
	}
	public static class QueryCreateTableContext extends CreateTableContext {
		public Token keyViolate;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDefinitionsContext createDefinitions() {
			return getRuleContext(CreateDefinitionsContext.class,0);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext ctx) { copyFrom(ctx); }
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createTable);
		int _la;
		try {
			int _alt;
			setState(1185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1107);
				match(CREATE);
				setState(1109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1108);
					match(TEMPORARY);
					}
				}

				setState(1111);
				match(TABLE);
				setState(1113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					setState(1112);
					ifNotExists();
					}
					break;
				}
				setState(1115);
				tableName();
				setState(1123);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIKE:
					{
					setState(1116);
					match(LIKE);
					setState(1117);
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					setState(1118);
					match(LR_BRACKET);
					setState(1119);
					match(LIKE);
					setState(1120);
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					setState(1121);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1125);
				match(CREATE);
				setState(1127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1126);
					match(TEMPORARY);
					}
				}

				setState(1129);
				match(TABLE);
				setState(1131);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1130);
					ifNotExists();
					}
					break;
				}
				setState(1133);
				tableName();
				setState(1135);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					setState(1134);
					createDefinitions();
					}
					break;
				}
				setState(1147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (CHARACTER - 25)) | (1L << (COLLATE - 25)) | (1L << (DEFAULT - 25)) | (1L << (INDEX - 25)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 341)) & ~0x3f) == 0 && ((1L << (_la - 341)) & ((1L << (AUTOEXTEND_SIZE - 341)) | (1L << (AUTO_INCREMENT - 341)) | (1L << (AVG_ROW_LENGTH - 341)) | (1L << (CHECKSUM - 341)) | (1L << (PAGE_CHECKSUM - 341)) | (1L << (COMMENT - 341)) | (1L << (COMPRESSION - 341)) | (1L << (CONNECTION - 341)) | (1L << (DATA - 341)) | (1L << (DELAY_KEY_WRITE - 341)))) != 0) || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (ENCRYPTION - 405)) | (1L << (ENCRYPTION_KEY_ID - 405)) | (1L << (ENGINE - 405)) | (1L << (INSERT_METHOD - 405)) | (1L << (KEY_BLOCK_SIZE - 405)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (MAX_ROWS - 500)) | (1L << (MIN_ROWS - 500)) | (1L << (PACK_KEYS - 500)) | (1L << (PAGE_COMPRESSED - 500)) | (1L << (PAGE_COMPRESSION_LEVEL - 500)) | (1L << (PASSWORD - 500)))) != 0) || ((((_la - 602)) & ~0x3f) == 0 && ((1L << (_la - 602)) & ((1L << (ROW_FORMAT - 602)) | (1L << (START - 602)) | (1L << (STATS_AUTO_RECALC - 602)) | (1L << (STATS_PERSISTENT - 602)) | (1L << (STATS_SAMPLE_PAGES - 602)) | (1L << (STORAGE - 602)) | (1L << (TABLESPACE - 602)) | (1L << (TABLE_TYPE - 602)) | (1L << (TRANSACTIONAL - 602)))) != 0) || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==STRING_LITERAL) {
					{
					setState(1137);
					tableOption();
					setState(1144);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (((((_la - 25)) & ~0x3f) == 0 && ((1L << (_la - 25)) & ((1L << (CHARACTER - 25)) | (1L << (COLLATE - 25)) | (1L << (DEFAULT - 25)) | (1L << (INDEX - 25)))) != 0) || _la==UNION || _la==CHAR || ((((_la - 341)) & ~0x3f) == 0 && ((1L << (_la - 341)) & ((1L << (AUTOEXTEND_SIZE - 341)) | (1L << (AUTO_INCREMENT - 341)) | (1L << (AVG_ROW_LENGTH - 341)) | (1L << (CHECKSUM - 341)) | (1L << (PAGE_CHECKSUM - 341)) | (1L << (COMMENT - 341)) | (1L << (COMPRESSION - 341)) | (1L << (CONNECTION - 341)) | (1L << (DATA - 341)) | (1L << (DELAY_KEY_WRITE - 341)))) != 0) || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (ENCRYPTION - 405)) | (1L << (ENCRYPTION_KEY_ID - 405)) | (1L << (ENGINE - 405)) | (1L << (INSERT_METHOD - 405)) | (1L << (KEY_BLOCK_SIZE - 405)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (MAX_ROWS - 500)) | (1L << (MIN_ROWS - 500)) | (1L << (PACK_KEYS - 500)) | (1L << (PAGE_COMPRESSED - 500)) | (1L << (PAGE_COMPRESSION_LEVEL - 500)) | (1L << (PASSWORD - 500)))) != 0) || ((((_la - 602)) & ~0x3f) == 0 && ((1L << (_la - 602)) & ((1L << (ROW_FORMAT - 602)) | (1L << (START - 602)) | (1L << (STATS_AUTO_RECALC - 602)) | (1L << (STATS_PERSISTENT - 602)) | (1L << (STATS_SAMPLE_PAGES - 602)) | (1L << (STORAGE - 602)) | (1L << (TABLESPACE - 602)) | (1L << (TABLE_TYPE - 602)) | (1L << (TRANSACTIONAL - 602)))) != 0) || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==COMMA || _la==STRING_LITERAL) {
						{
						{
						setState(1139);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1138);
							match(COMMA);
							}
						}

						setState(1141);
						tableOption();
						}
						}
						setState(1146);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1149);
					partitionDefinitions();
					}
				}

				setState(1153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					setState(1152);
					((QueryCreateTableContext)_localctx).keyViolate = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1155);
					match(AS);
					}
				}

				setState(1158);
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1160);
				match(CREATE);
				setState(1162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1161);
					match(TEMPORARY);
					}
				}

				setState(1164);
				match(TABLE);
				setState(1166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(1165);
					ifNotExists();
					}
					break;
				}
				setState(1168);
				tableName();
				setState(1169);
				createDefinitions();
				setState(1180);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(1170);
					tableOption();
					setState(1177);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1172);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1171);
								match(COMMA);
								}
							}

							setState(1174);
							tableOption();
							}
							} 
						}
						setState(1179);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
					}
					}
					break;
				}
				setState(1183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1182);
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1187);
			match(CREATE);
			setState(1188);
			match(TABLESPACE);
			setState(1189);
			uid();
			setState(1190);
			match(ADD);
			setState(1191);
			match(DATAFILE);
			setState(1192);
			((CreateTablespaceInnodbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				setState(1193);
				match(FILE_BLOCK_SIZE);
				setState(1194);
				match(EQUAL_SYMBOL);
				setState(1195);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = fileSizeLiteral();
				}
			}

			setState(1203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(1198);
				match(ENGINE);
				setState(1200);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1199);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1202);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public Token datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public Token comment;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<FileSizeLiteralContext> fileSizeLiteral() {
			return getRuleContexts(FileSizeLiteralContext.class);
		}
		public FileSizeLiteralContext fileSizeLiteral(int i) {
			return getRuleContext(FileSizeLiteralContext.class,i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1205);
			match(CREATE);
			setState(1206);
			match(TABLESPACE);
			setState(1207);
			uid();
			setState(1208);
			match(ADD);
			setState(1209);
			match(DATAFILE);
			setState(1210);
			((CreateTablespaceNdbContext)_localctx).datafile = match(STRING_LITERAL);
			setState(1211);
			match(USE);
			setState(1212);
			match(LOGFILE);
			setState(1213);
			match(GROUP);
			setState(1214);
			uid();
			setState(1220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1215);
				match(EXTENT_SIZE);
				setState(1217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1216);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1219);
				((CreateTablespaceNdbContext)_localctx).extentSize = fileSizeLiteral();
				}
			}

			setState(1227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1222);
				match(INITIAL_SIZE);
				setState(1224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1223);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1226);
				((CreateTablespaceNdbContext)_localctx).initialSize = fileSizeLiteral();
				}
			}

			setState(1234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1229);
				match(AUTOEXTEND_SIZE);
				setState(1231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1230);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1233);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = fileSizeLiteral();
				}
			}

			setState(1241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1236);
				match(MAX_SIZE);
				setState(1238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1237);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1240);
				((CreateTablespaceNdbContext)_localctx).maxSize = fileSizeLiteral();
				}
			}

			setState(1248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1243);
				match(NODEGROUP);
				setState(1245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1244);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1247);
				uid();
				}
			}

			setState(1251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1250);
				match(WAIT);
				}
			}

			setState(1258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1253);
				match(COMMENT);
				setState(1255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1254);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1257);
				((CreateTablespaceNdbContext)_localctx).comment = match(STRING_LITERAL);
				}
			}

			setState(1260);
			match(ENGINE);
			setState(1262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(1261);
				match(EQUAL_SYMBOL);
				}
			}

			setState(1264);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public FullIdContext thisTrigger;
		public Token triggerTime;
		public Token triggerEvent;
		public Token triggerPlace;
		public FullIdContext otherTrigger;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1266);
			match(CREATE);
			setState(1268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1267);
				ownerStatement();
				}
			}

			setState(1270);
			match(TRIGGER);
			setState(1271);
			((CreateTriggerContext)_localctx).thisTrigger = fullId();
			setState(1272);
			((CreateTriggerContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1273);
			((CreateTriggerContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1274);
			match(ON);
			setState(1275);
			tableName();
			setState(1276);
			match(FOR);
			setState(1277);
			match(EACH);
			setState(1278);
			match(ROW);
			setState(1281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				{
				setState(1279);
				((CreateTriggerContext)_localctx).triggerPlace = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					((CreateTriggerContext)_localctx).triggerPlace = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1280);
				((CreateTriggerContext)_localctx).otherTrigger = fullId();
				}
				break;
			}
			setState(1283);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_withClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1285);
			match(WITH);
			setState(1287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1286);
				match(RECURSIVE);
				}
				break;
			}
			setState(1289);
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionsContext extends ParserRuleContext {
		public CteNameContext cteName() {
			return getRuleContext(CteNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<CteColumnNameContext> cteColumnName() {
			return getRuleContexts(CteColumnNameContext.class);
		}
		public CteColumnNameContext cteColumnName(int i) {
			return getRuleContext(CteColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpressions; }
	}

	public final CommonTableExpressionsContext commonTableExpressions() throws RecognitionException {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_commonTableExpressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1291);
			cteName();
			setState(1303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1292);
				match(LR_BRACKET);
				setState(1293);
				cteColumnName();
				setState(1298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1294);
					match(COMMA);
					setState(1295);
					cteColumnName();
					}
					}
					setState(1300);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1301);
				match(RR_BRACKET);
				}
			}

			setState(1305);
			match(AS);
			setState(1306);
			match(LR_BRACKET);
			setState(1307);
			dmlStatement();
			setState(1308);
			match(RR_BRACKET);
			setState(1311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(1309);
				match(COMMA);
				setState(1310);
				commonTableExpressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteName; }
	}

	public final CteNameContext cteName() throws RecognitionException {
		CteNameContext _localctx = new CteNameContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_cteName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1313);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteColumnName; }
	}

	public final CteColumnNameContext cteColumnName() throws RecognitionException {
		CteColumnNameContext _localctx = new CteColumnNameContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_cteColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1315);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOption;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public OrReplaceContext orReplace() {
			return getRuleContext(OrReplaceContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1317);
			match(CREATE);
			setState(1319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1318);
				orReplace();
				}
			}

			setState(1324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1321);
				match(ALGORITHM);
				setState(1322);
				match(EQUAL_SYMBOL);
				setState(1323);
				((CreateViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((CreateViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1326);
				ownerStatement();
				}
			}

			setState(1332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1329);
				match(SQL);
				setState(1330);
				match(SECURITY);
				setState(1331);
				((CreateViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1334);
			match(VIEW);
			setState(1335);
			fullId();
			setState(1340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1336);
				match(LR_BRACKET);
				setState(1337);
				uidList();
				setState(1338);
				match(RR_BRACKET);
				}
			}

			setState(1342);
			match(AS);
			setState(1362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				{
				setState(1343);
				match(LR_BRACKET);
				setState(1345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1344);
					withClause();
					}
				}

				setState(1347);
				selectStatement();
				setState(1348);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(1351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1350);
					withClause();
					}
				}

				setState(1353);
				selectStatement();
				setState(1360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					setState(1354);
					match(WITH);
					setState(1356);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CASCADED || _la==LOCAL) {
						{
						setState(1355);
						((CreateViewContext)_localctx).checkOption = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==CASCADED || _la==LOCAL) ) {
							((CreateViewContext)_localctx).checkOption = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1358);
					match(CHECK);
					setState(1359);
					match(OPTION);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_createDatabaseOption);
		int _la;
		try {
			setState(1397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1365);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1364);
					match(DEFAULT);
					}
				}

				setState(1367);
				charSet();
				setState(1369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1368);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1373);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1371);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1372);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1375);
					match(DEFAULT);
					}
				}

				setState(1378);
				match(COLLATE);
				setState(1380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1379);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1382);
				collationName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1383);
					match(DEFAULT);
					}
				}

				setState(1386);
				match(ENCRYPTION);
				setState(1388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1387);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1390);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1391);
				match(READ);
				setState(1392);
				match(ONLY);
				setState(1394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1393);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1396);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharSetContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charSet; }
	}

	public final CharSetContext charSet() throws RecognitionException {
		CharSetContext _localctx = new CharSetContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_charSet);
		try {
			setState(1404);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1399);
				match(CHARACTER);
				setState(1400);
				match(SET);
				}
				break;
			case CHARSET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1401);
				match(CHARSET);
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1402);
				match(CHAR);
				setState(1403);
				match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerStatementContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerStatement; }
	}

	public final OwnerStatementContext ownerStatement() throws RecognitionException {
		OwnerStatementContext _localctx = new OwnerStatementContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_ownerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1406);
			match(DEFINER);
			setState(1407);
			match(EQUAL_SYMBOL);
			setState(1414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				setState(1408);
				userName();
				}
				break;
			case 2:
				{
				setState(1409);
				match(CURRENT_USER);
				setState(1412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1410);
					match(LR_BRACKET);
					setState(1411);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleExpressionContext extends ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleExpression; }
	 
		public ScheduleExpressionContext() { }
		public void copyFrom(ScheduleExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleExpressionContext {
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
	}
	public static class IntervalScheduleContext extends ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext intervalExpr;
		public List<IntervalExprContext> startIntervals = new ArrayList<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public List<IntervalExprContext> endIntervals = new ArrayList<IntervalExprContext>();
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public List<IntervalExprContext> intervalExpr() {
			return getRuleContexts(IntervalExprContext.class);
		}
		public IntervalExprContext intervalExpr(int i) {
			return getRuleContext(IntervalExprContext.class,i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext ctx) { copyFrom(ctx); }
	}

	public final ScheduleExpressionContext scheduleExpression() throws RecognitionException {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_scheduleExpression);
		int _la;
		try {
			setState(1450);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1416);
				match(AT);
				setState(1417);
				timestampValue();
				setState(1421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(1418);
					intervalExpr();
					}
					}
					setState(1423);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1424);
				match(EVERY);
				setState(1427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1425);
					decimalLiteral();
					}
					break;
				case 2:
					{
					setState(1426);
					expression(0);
					}
					break;
				}
				setState(1429);
				intervalType();
				setState(1438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS) {
					{
					setState(1430);
					match(STARTS);
					setState(1431);
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					setState(1435);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1432);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1437);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS) {
					{
					setState(1440);
					match(ENDS);
					setState(1441);
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					setState(1445);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==PLUS) {
						{
						{
						setState(1442);
						((IntervalScheduleContext)_localctx).intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).intervalExpr);
						}
						}
						setState(1447);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_timestampValue);
		try {
			setState(1456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1452);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1453);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1454);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1455);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1458);
			match(PLUS);
			setState(1459);
			match(INTERVAL);
			setState(1462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(1460);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(1461);
				expression(0);
				}
				break;
			}
			setState(1464);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_intervalType);
		try {
			setState(1479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1466);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1467);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1468);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(1469);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1470);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(1471);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1472);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(1473);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(1474);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(1475);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(1476);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(1477);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(1478);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_enableType);
		try {
			setState(1486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1481);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1482);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1483);
				match(DISABLE);
				setState(1484);
				match(ON);
				setState(1485);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1488);
			match(USING);
			setState(1489);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_indexOption);
		int _la;
		try {
			setState(1513);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1491);
				match(KEY_BLOCK_SIZE);
				setState(1493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1492);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1495);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1496);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1497);
				match(WITH);
				setState(1498);
				match(PARSER);
				setState(1499);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1500);
				match(COMMENT);
				setState(1501);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1502);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1503);
				match(ENGINE_ATTRIBUTE);
				setState(1505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1504);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1507);
				match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1508);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(1510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1509);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1512);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (IN - 80)) | (1L << (INOUT - 80)) | (1L << (OUT - 80)))) != 0)) {
				{
				setState(1515);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (IN - 80)) | (1L << (INOUT - 80)) | (1L << (OUT - 80)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1518);
			uid();
			setState(1519);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1521);
			uid();
			setState(1522);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_routineOption);
		int _la;
		try {
			setState(1547);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1524);
				match(COMMENT);
				setState(1525);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1526);
				match(LANGUAGE);
				setState(1527);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1529);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1528);
					match(NOT);
					}
				}

				setState(1531);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1542);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1532);
					match(CONTAINS);
					setState(1533);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1534);
					match(NO);
					setState(1535);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1536);
					match(READS);
					setState(1537);
					match(SQL);
					setState(1538);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1539);
					match(MODIFIES);
					setState(1540);
					match(SQL);
					setState(1541);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1544);
				match(SQL);
				setState(1545);
				match(SECURITY);
				setState(1546);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_serverOption);
		try {
			setState(1563);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(1549);
				match(HOST);
				setState(1550);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1551);
				match(DATABASE);
				setState(1552);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1553);
				match(USER);
				setState(1554);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(1555);
				match(PASSWORD);
				setState(1556);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(1557);
				match(SOCKET);
				setState(1558);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(1559);
				match(OWNER);
				setState(1560);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1561);
				match(PORT);
				setState(1562);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1565);
			match(LR_BRACKET);
			setState(1566);
			createDefinition();
			setState(1571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1567);
				match(COMMA);
				setState(1568);
				createDefinition();
				}
				}
				setState(1573);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1574);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ENFORCED() { return getToken(MySqlParser.ENFORCED, 0); }
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createDefinition);
		int _la;
		try {
			setState(1587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1576);
				fullColumnName();
				setState(1577);
				columnDefinition();
				}
				break;
			case 2:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1579);
				tableConstraint();
				setState(1581);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1580);
					match(NOT);
					}
				}

				setState(1584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENFORCED) {
					{
					setState(1583);
					match(ENFORCED);
					}
				}

				}
				break;
			case 3:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1586);
				indexColumnDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ENFORCED() { return getToken(MySqlParser.ENFORCED, 0); }
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_columnDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1589);
			dataType();
			setState(1593);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1590);
					columnConstraint();
					}
					} 
				}
				setState(1595);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,148,_ctx);
			}
			setState(1597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1596);
				match(NOT);
				}
			}

			setState(1600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENFORCED) {
				{
				setState(1599);
				match(ENFORCED);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(MySqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class InvisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public InvisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_columnConstraint);
		int _la;
		try {
			setState(1655);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1602);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1603);
				match(DEFAULT);
				setState(1604);
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1605);
				match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new InvisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1606);
				match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1611);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(1607);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(1608);
					match(ON);
					setState(1609);
					match(UPDATE);
					setState(1610);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1613);
					match(PRIMARY);
					}
				}

				setState(1616);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1617);
				match(UNIQUE);
				setState(1619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					setState(1618);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1621);
				match(COMMENT);
				setState(1622);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1623);
				match(COLUMN_FORMAT);
				setState(1624);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1625);
				match(STORAGE);
				setState(1626);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1627);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1628);
				match(COLLATE);
				setState(1629);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(1630);
					match(GENERATED);
					setState(1631);
					match(ALWAYS);
					}
				}

				setState(1634);
				match(AS);
				setState(1635);
				match(LR_BRACKET);
				setState(1636);
				expression(0);
				setState(1637);
				match(RR_BRACKET);
				setState(1639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(1638);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1641);
				match(SERIAL);
				setState(1642);
				match(DEFAULT);
				setState(1643);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1644);
					match(CONSTRAINT);
					setState(1646);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(1645);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1650);
				match(CHECK);
				setState(1651);
				match(LR_BRACKET);
				setState(1652);
				expression(0);
				setState(1653);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_tableConstraint);
		int _la;
		try {
			setState(1726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1657);
					match(CONSTRAINT);
					setState(1659);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
					case 1:
						{
						setState(1658);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				setState(1663);
				match(PRIMARY);
				setState(1664);
				match(KEY);
				setState(1666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(1665);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1668);
					indexType();
					}
				}

				setState(1671);
				indexColumnNames();
				setState(1675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1672);
					indexOption();
					}
					}
					setState(1677);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1682);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1678);
					match(CONSTRAINT);
					setState(1680);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(1679);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1684);
				match(UNIQUE);
				setState(1686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1685);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(1688);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1691);
					indexType();
					}
				}

				setState(1694);
				indexColumnNames();
				setState(1698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1695);
					indexOption();
					}
					}
					setState(1700);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1705);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1701);
					match(CONSTRAINT);
					setState(1703);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(1702);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1707);
				match(FOREIGN);
				setState(1708);
				match(KEY);
				setState(1710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(1709);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(1712);
				indexColumnNames();
				setState(1713);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1715);
					match(CONSTRAINT);
					setState(1717);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(1716);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(1721);
				match(CHECK);
				setState(1722);
				match(LR_BRACKET);
				setState(1723);
				expression(0);
				setState(1724);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1728);
			match(REFERENCES);
			setState(1729);
			tableName();
			setState(1731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(1730);
				indexColumnNames();
				}
				break;
			}
			setState(1735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(1733);
				match(MATCH);
				setState(1734);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(1737);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_referenceAction);
		try {
			setState(1756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1740);
				match(ON);
				setState(1741);
				match(DELETE);
				setState(1742);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(1746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					setState(1743);
					match(ON);
					setState(1744);
					match(UPDATE);
					setState(1745);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1748);
				match(ON);
				setState(1749);
				match(UPDATE);
				setState(1750);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(1754);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
				case 1:
					{
					setState(1751);
					match(ON);
					setState(1752);
					match(DELETE);
					setState(1753);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_referenceControlType);
		try {
			setState(1766);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1758);
				match(RESTRICT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1759);
				match(CASCADE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1760);
				match(SET);
				setState(1761);
				match(NULL_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1762);
				match(NO);
				setState(1763);
				match(ACTION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1764);
				match(SET);
				setState(1765);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(1796);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1768);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(1769);
					uid();
					}
				}

				setState(1773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1772);
					indexType();
					}
				}

				setState(1775);
				indexColumnNames();
				setState(1779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1776);
					indexOption();
					}
					}
					setState(1781);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1782);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(1783);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(1786);
					uid();
					}
				}

				setState(1789);
				indexColumnNames();
				setState(1793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==USING || _la==WITH || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(1790);
					indexOption();
					}
					}
					setState(1795);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
	 
		public TableOptionContext() { }
		public void copyFrom(TableOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableOptionEngineContext extends TableOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TableOptionEngineContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionMaxRowsContext extends TableOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionCollateContext extends TableOptionContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionPersistentContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionTablespaceContext extends TableOptionContext {
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TablespaceStorageContext tablespaceStorage() {
			return getRuleContext(TablespaceStorageContext.class,0);
		}
		public TableOptionTablespaceContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionAutoextendSizeContext extends TableOptionContext {
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoextendSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionPageCompressedContext extends TableOptionContext {
		public TerminalNode PAGE_COMPRESSED() { return getToken(MySqlParser.PAGE_COMPRESSED, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPageCompressedContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionStartTransactionContext extends TableOptionContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TableOptionStartTransactionContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionPackKeysContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionPasswordContext extends TableOptionContext {
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionUnionContext extends TableOptionContext {
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionSamplePageContext extends TableOptionContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionCharsetContext extends TableOptionContext {
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionIndexDirectoryContext extends TableOptionContext {
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionTableTypeContext extends TableOptionContext {
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableTypeContext tableType() {
			return getRuleContext(TableTypeContext.class,0);
		}
		public TableOptionTableTypeContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionKeyBlockSizeContext extends TableOptionContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionEncryptionContext extends TableOptionContext {
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionDataDirectoryContext extends TableOptionContext {
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionRecalculationContext extends TableOptionContext {
		public Token extBoolValue;
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionAutoIncrementContext extends TableOptionContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionEncryptionKeyIdContext extends TableOptionContext {
		public TerminalNode ENCRYPTION_KEY_ID() { return getToken(MySqlParser.ENCRYPTION_KEY_ID, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionKeyIdContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionChecksumContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionDelayContext extends TableOptionContext {
		public Token boolValue;
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionConnectionContext extends TableOptionContext {
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionTransactionalContext extends TableOptionContext {
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionTransactionalContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionPageCompressionLevelContext extends TableOptionContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode PAGE_COMPRESSION_LEVEL() { return getToken(MySqlParser.PAGE_COMPRESSION_LEVEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionPageCompressionLevelContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionSecondaryEngineAttributeContext extends TableOptionContext {
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionSecondaryEngineAttributeContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionCommentContext extends TableOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionAverageContext extends TableOptionContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionRowFormatContext extends TableOptionContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionCompressionContext extends TableOptionContext {
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionInsertMethodContext extends TableOptionContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionEngineAttributeContext extends TableOptionContext {
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineAttributeContext(TableOptionContext ctx) { copyFrom(ctx); }
	}
	public static class TableOptionMinRowsContext extends TableOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext ctx) { copyFrom(ctx); }
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_tableOption);
		int _la;
		try {
			setState(1983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1798);
				match(ENGINE);
				setState(1800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1799);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
				case 1:
					{
					setState(1802);
					engineName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new TableOptionEngineAttributeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1805);
				match(ENGINE_ATTRIBUTE);
				setState(1807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1806);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1809);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new TableOptionAutoextendSizeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1810);
				match(AUTOEXTEND_SIZE);
				setState(1812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1811);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1814);
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1815);
				match(AUTO_INCREMENT);
				setState(1817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1816);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1819);
				decimalLiteral();
				}
				break;
			case 5:
				_localctx = new TableOptionAverageContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1820);
				match(AVG_ROW_LENGTH);
				setState(1822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1821);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1824);
				decimalLiteral();
				}
				break;
			case 6:
				_localctx = new TableOptionCharsetContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1825);
					match(DEFAULT);
					}
				}

				setState(1828);
				charSet();
				setState(1830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1829);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1834);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(1832);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(1833);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				_localctx = new TableOptionChecksumContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1836);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1837);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1840);
				((TableOptionChecksumContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 8:
				_localctx = new TableOptionCollateContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(1841);
					match(DEFAULT);
					}
				}

				setState(1844);
				match(COLLATE);
				setState(1846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1845);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1848);
				collationName();
				}
				break;
			case 9:
				_localctx = new TableOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1849);
				match(COMMENT);
				setState(1851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1850);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1853);
				match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionCompressionContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1854);
				match(COMPRESSION);
				setState(1856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1855);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1858);
				_la = _input.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				_localctx = new TableOptionConnectionContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1859);
				match(CONNECTION);
				setState(1861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1860);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1863);
				match(STRING_LITERAL);
				}
				break;
			case 12:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1864);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==DATA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1865);
				match(DIRECTORY);
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1866);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1869);
				match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionDelayContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1870);
				match(DELAY_KEY_WRITE);
				setState(1872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1871);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1874);
				((TableOptionDelayContext)_localctx).boolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 14:
				_localctx = new TableOptionEncryptionContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1875);
				match(ENCRYPTION);
				setState(1877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1876);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1879);
				match(STRING_LITERAL);
				}
				break;
			case 15:
				_localctx = new TableOptionPageCompressedContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1880);
				_la = _input.LA(1);
				if ( !(_la==PAGE_COMPRESSED || _la==STRING_LITERAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1881);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1884);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 16:
				_localctx = new TableOptionPageCompressionLevelContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1885);
				_la = _input.LA(1);
				if ( !(_la==PAGE_COMPRESSION_LEVEL || _la==STRING_LITERAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1886);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1889);
				decimalLiteral();
				}
				break;
			case 17:
				_localctx = new TableOptionEncryptionKeyIdContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1890);
				match(ENCRYPTION_KEY_ID);
				setState(1892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1891);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1894);
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1895);
				match(INDEX);
				setState(1896);
				match(DIRECTORY);
				setState(1898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1897);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1900);
				match(STRING_LITERAL);
				}
				break;
			case 19:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(1901);
				match(INSERT_METHOD);
				setState(1903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1902);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1905);
				((TableOptionInsertMethodContext)_localctx).insertMethod = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(1906);
				match(KEY_BLOCK_SIZE);
				setState(1908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1907);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1910);
				fileSizeLiteral();
				}
				break;
			case 21:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(1911);
				match(MAX_ROWS);
				setState(1913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1912);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1915);
				decimalLiteral();
				}
				break;
			case 22:
				_localctx = new TableOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(1916);
				match(MIN_ROWS);
				setState(1918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1917);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1920);
				decimalLiteral();
				}
				break;
			case 23:
				_localctx = new TableOptionPackKeysContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(1921);
				match(PACK_KEYS);
				setState(1923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1922);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1925);
				((TableOptionPackKeysContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				_localctx = new TableOptionPasswordContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(1926);
				match(PASSWORD);
				setState(1928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1927);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1930);
				match(STRING_LITERAL);
				}
				break;
			case 25:
				_localctx = new TableOptionRowFormatContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(1931);
				match(ROW_FORMAT);
				setState(1933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1932);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1935);
				((TableOptionRowFormatContext)_localctx).rowFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & ((1L << (COMPACT - 370)) | (1L << (COMPRESSED - 370)) | (1L << (DYNAMIC - 370)) | (1L << (FIXED - 370)))) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 26:
				_localctx = new TableOptionStartTransactionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(1936);
				match(START);
				setState(1937);
				match(TRANSACTION);
				}
				break;
			case 27:
				_localctx = new TableOptionSecondaryEngineAttributeContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(1938);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(1940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1939);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1942);
				match(STRING_LITERAL);
				}
				break;
			case 28:
				_localctx = new TableOptionRecalculationContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(1943);
				match(STATS_AUTO_RECALC);
				setState(1945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1944);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1947);
				((TableOptionRecalculationContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 29:
				_localctx = new TableOptionPersistentContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(1948);
				match(STATS_PERSISTENT);
				setState(1950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1949);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1952);
				((TableOptionPersistentContext)_localctx).extBoolValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 30:
				_localctx = new TableOptionSamplePageContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(1953);
				match(STATS_SAMPLE_PAGES);
				setState(1955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1954);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1959);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(1957);
					match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(1958);
					decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 31:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(1961);
				match(TABLESPACE);
				setState(1962);
				uid();
				setState(1964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					setState(1963);
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 32:
				_localctx = new TableOptionTableTypeContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(1966);
				match(TABLE_TYPE);
				setState(1967);
				match(EQUAL_SYMBOL);
				setState(1968);
				tableType();
				}
				break;
			case 33:
				_localctx = new TableOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(1969);
				tablespaceStorage();
				}
				break;
			case 34:
				_localctx = new TableOptionTransactionalContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(1970);
				match(TRANSACTIONAL);
				setState(1972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1971);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1974);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 35:
				_localctx = new TableOptionUnionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(1975);
				match(UNION);
				setState(1977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(1976);
					match(EQUAL_SYMBOL);
					}
				}

				setState(1979);
				match(LR_BRACKET);
				setState(1980);
				tables();
				setState(1981);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableTypeContext extends ParserRuleContext {
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableType; }
	}

	public final TableTypeContext tableType() throws RecognitionException {
		TableTypeContext _localctx = new TableTypeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_tableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1985);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1987);
			match(STORAGE);
			setState(1988);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(MySqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(MySqlParser.BY, i);
		}
		public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return getRuleContext(PartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return getRuleContext(SubpartitionFunctionDefinitionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1990);
			match(PARTITION);
			setState(1991);
			match(BY);
			setState(1992);
			partitionFunctionDefinition();
			setState(1995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITIONS) {
				{
				setState(1993);
				match(PARTITIONS);
				setState(1994);
				((PartitionDefinitionsContext)_localctx).count = decimalLiteral();
				}
			}

			setState(2004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUBPARTITION) {
				{
				setState(1997);
				match(SUBPARTITION);
				setState(1998);
				match(BY);
				setState(1999);
				subpartitionFunctionDefinition();
				setState(2002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					setState(2000);
					match(SUBPARTITIONS);
					setState(2001);
					((PartitionDefinitionsContext)_localctx).subCount = decimalLiteral();
					}
				}

				}
			}

			setState(2017);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(2006);
				match(LR_BRACKET);
				setState(2007);
				partitionDefinition();
				setState(2012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2008);
					match(COMMA);
					setState(2009);
					partitionDefinition();
					}
					}
					setState(2014);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2015);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionFunctionDefinitionContext extends ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFunctionDefinition; }
	 
		public PartitionFunctionDefinitionContext() { }
		public void copyFrom(PartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
	}

	public final PartitionFunctionDefinitionContext partitionFunctionDefinition() throws RecognitionException {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_partitionFunctionDefinition);
		int _la;
		try {
			setState(2065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2019);
					match(LINEAR);
					}
				}

				setState(2022);
				match(HASH);
				setState(2023);
				match(LR_BRACKET);
				setState(2024);
				expression(0);
				setState(2025);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2027);
					match(LINEAR);
					}
				}

				setState(2030);
				match(KEY);
				setState(2034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(2031);
					match(ALGORITHM);
					setState(2032);
					match(EQUAL_SYMBOL);
					setState(2033);
					((PartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2036);
				match(LR_BRACKET);
				setState(2038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(2037);
					uidList();
					}
				}

				setState(2040);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2041);
				match(RANGE);
				setState(2051);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(2042);
					match(LR_BRACKET);
					setState(2043);
					expression(0);
					setState(2044);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(2046);
					match(COLUMNS);
					setState(2047);
					match(LR_BRACKET);
					setState(2048);
					uidList();
					setState(2049);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2053);
				match(LIST);
				setState(2063);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(2054);
					match(LR_BRACKET);
					setState(2055);
					expression(0);
					setState(2056);
					match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					setState(2058);
					match(COLUMNS);
					setState(2059);
					match(LR_BRACKET);
					setState(2060);
					uidList();
					setState(2061);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionFunctionDefinitionContext extends ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionFunctionDefinition; }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public void copyFrom(SubpartitionFunctionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {
		public Token algType;
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode LINEAR() { return getToken(MySqlParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext ctx) { copyFrom(ctx); }
	}

	public final SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() throws RecognitionException {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			setState(2088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2067);
					match(LINEAR);
					}
				}

				setState(2070);
				match(HASH);
				setState(2071);
				match(LR_BRACKET);
				setState(2072);
				expression(0);
				setState(2073);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(2075);
					match(LINEAR);
					}
				}

				setState(2078);
				match(KEY);
				setState(2082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(2079);
					match(ALGORITHM);
					setState(2080);
					match(EQUAL_SYMBOL);
					setState(2081);
					((SubPartitionFunctionKeyContext)_localctx).algType = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2084);
				match(LR_BRACKET);
				setState(2085);
				uidList();
				setState(2086);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
	 
		public PartitionDefinitionContext() { }
		public void copyFrom(PartitionDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionComparisonContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionListAtomContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionListVectorContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<PartitionDefinerVectorContext> partitionDefinerVector() {
			return getRuleContexts(PartitionDefinerVectorContext.class);
		}
		public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return getRuleContext(PartitionDefinerVectorContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionSimpleContext extends PartitionDefinitionContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext ctx) { copyFrom(ctx); }
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_partitionDefinition);
		int _la;
		try {
			setState(2236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2090);
				match(PARTITION);
				setState(2091);
				uid();
				setState(2092);
				match(VALUES);
				setState(2093);
				match(LESS);
				setState(2094);
				match(THAN);
				setState(2095);
				match(LR_BRACKET);
				setState(2096);
				partitionDefinerAtom();
				setState(2101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2097);
					match(COMMA);
					setState(2098);
					partitionDefinerAtom();
					}
					}
					setState(2103);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2104);
				match(RR_BRACKET);
				setState(2108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 368)) & ~0x3f) == 0 && ((1L << (_la - 368)) & ((1L << (COMMENT - 368)) | (1L << (DATA - 368)) | (1L << (ENGINE - 368)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (MAX_ROWS - 500)) | (1L << (MIN_ROWS - 500)) | (1L << (NODEGROUP - 500)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2105);
					partitionOption();
					}
					}
					setState(2110);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2111);
					match(LR_BRACKET);
					setState(2112);
					subpartitionDefinition();
					setState(2117);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2113);
						match(COMMA);
						setState(2114);
						subpartitionDefinition();
						}
						}
						setState(2119);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2120);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2124);
				match(PARTITION);
				setState(2125);
				uid();
				setState(2126);
				match(VALUES);
				setState(2127);
				match(LESS);
				setState(2128);
				match(THAN);
				setState(2129);
				partitionDefinerAtom();
				setState(2133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 368)) & ~0x3f) == 0 && ((1L << (_la - 368)) & ((1L << (COMMENT - 368)) | (1L << (DATA - 368)) | (1L << (ENGINE - 368)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (MAX_ROWS - 500)) | (1L << (MIN_ROWS - 500)) | (1L << (NODEGROUP - 500)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2130);
					partitionOption();
					}
					}
					setState(2135);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2136);
					match(LR_BRACKET);
					setState(2137);
					subpartitionDefinition();
					setState(2142);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2138);
						match(COMMA);
						setState(2139);
						subpartitionDefinition();
						}
						}
						setState(2144);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2145);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2149);
				match(PARTITION);
				setState(2150);
				uid();
				setState(2151);
				match(VALUES);
				setState(2152);
				match(IN);
				setState(2153);
				match(LR_BRACKET);
				setState(2154);
				partitionDefinerAtom();
				setState(2159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2155);
					match(COMMA);
					setState(2156);
					partitionDefinerAtom();
					}
					}
					setState(2161);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2162);
				match(RR_BRACKET);
				setState(2166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 368)) & ~0x3f) == 0 && ((1L << (_la - 368)) & ((1L << (COMMENT - 368)) | (1L << (DATA - 368)) | (1L << (ENGINE - 368)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (MAX_ROWS - 500)) | (1L << (MIN_ROWS - 500)) | (1L << (NODEGROUP - 500)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2163);
					partitionOption();
					}
					}
					setState(2168);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2169);
					match(LR_BRACKET);
					setState(2170);
					subpartitionDefinition();
					setState(2175);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2171);
						match(COMMA);
						setState(2172);
						subpartitionDefinition();
						}
						}
						setState(2177);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2178);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2182);
				match(PARTITION);
				setState(2183);
				uid();
				setState(2184);
				match(VALUES);
				setState(2185);
				match(IN);
				setState(2186);
				match(LR_BRACKET);
				setState(2187);
				partitionDefinerVector();
				setState(2192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2188);
					match(COMMA);
					setState(2189);
					partitionDefinerVector();
					}
					}
					setState(2194);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2195);
				match(RR_BRACKET);
				setState(2199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 368)) & ~0x3f) == 0 && ((1L << (_la - 368)) & ((1L << (COMMENT - 368)) | (1L << (DATA - 368)) | (1L << (ENGINE - 368)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (MAX_ROWS - 500)) | (1L << (MIN_ROWS - 500)) | (1L << (NODEGROUP - 500)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2196);
					partitionOption();
					}
					}
					setState(2201);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2202);
					match(LR_BRACKET);
					setState(2203);
					subpartitionDefinition();
					setState(2208);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2204);
						match(COMMA);
						setState(2205);
						subpartitionDefinition();
						}
						}
						setState(2210);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2211);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2215);
				match(PARTITION);
				setState(2216);
				uid();
				setState(2220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 368)) & ~0x3f) == 0 && ((1L << (_la - 368)) & ((1L << (COMMENT - 368)) | (1L << (DATA - 368)) | (1L << (ENGINE - 368)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (MAX_ROWS - 500)) | (1L << (MIN_ROWS - 500)) | (1L << (NODEGROUP - 500)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					setState(2217);
					partitionOption();
					}
					}
					setState(2222);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2223);
					match(LR_BRACKET);
					setState(2224);
					subpartitionDefinition();
					setState(2229);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2225);
						match(COMMA);
						setState(2226);
						subpartitionDefinition();
						}
						}
						setState(2231);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2232);
					match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerAtomContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerAtom; }
	}

	public final PartitionDefinerAtomContext partitionDefinerAtom() throws RecognitionException {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_partitionDefinerAtom);
		try {
			setState(2241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2238);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2239);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2240);
				match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinerVectorContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinerAtomContext> partitionDefinerAtom() {
			return getRuleContexts(PartitionDefinerAtomContext.class);
		}
		public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return getRuleContext(PartitionDefinerAtomContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinerVector; }
	}

	public final PartitionDefinerVectorContext partitionDefinerVector() throws RecognitionException {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_partitionDefinerVector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2243);
			match(LR_BRACKET);
			setState(2244);
			partitionDefinerAtom();
			setState(2247); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2245);
				match(COMMA);
				setState(2246);
				partitionDefinerAtom();
				}
				}
				setState(2249); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(2251);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2253);
			match(SUBPARTITION);
			setState(2254);
			uid();
			setState(2258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 368)) & ~0x3f) == 0 && ((1L << (_la - 368)) & ((1L << (COMMENT - 368)) | (1L << (DATA - 368)) | (1L << (ENGINE - 368)))) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & ((1L << (MAX_ROWS - 500)) | (1L << (MIN_ROWS - 500)) | (1L << (NODEGROUP - 500)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(2255);
				partitionOption();
				}
				}
				setState(2260);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public Token comment;
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public UidContext nodegroup;
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public Token indexDirectory;
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public UidContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public DecimalLiteralContext minRows;
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public Token dataDirectory;
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_partitionOption);
		int _la;
		try {
			setState(2309);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2261);
					match(DEFAULT);
					}
				}

				setState(2265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2264);
					match(STORAGE);
					}
				}

				setState(2267);
				match(ENGINE);
				setState(2269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2268);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2271);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2272);
				match(COMMENT);
				setState(2274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2273);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2276);
				((PartitionOptionCommentContext)_localctx).comment = match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2277);
				match(DATA);
				setState(2278);
				match(DIRECTORY);
				setState(2280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2279);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2282);
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2283);
				match(INDEX);
				setState(2284);
				match(DIRECTORY);
				setState(2286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2285);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2288);
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2289);
				match(MAX_ROWS);
				setState(2291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2290);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2293);
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2294);
				match(MIN_ROWS);
				setState(2296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2295);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2298);
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2299);
				match(TABLESPACE);
				setState(2301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2300);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2303);
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2304);
				match(NODEGROUP);
				setState(2306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2305);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2308);
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
	 
		public AlterDatabaseContext() { }
		public void copyFrom(AlterDatabaseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseContext {
		public Token dbFormat;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext ctx) { copyFrom(ctx); }
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterDatabase);
		int _la;
		try {
			setState(2329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2311);
				match(ALTER);
				setState(2312);
				((AlterSimpleDatabaseContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2314);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(2313);
					uid();
					}
					break;
				}
				setState(2317); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2316);
					createDatabaseOption();
					}
					}
					setState(2319); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2321);
				match(ALTER);
				setState(2322);
				((AlterUpgradeNameContext)_localctx).dbFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2323);
				uid();
				setState(2324);
				match(UPGRADE);
				setState(2325);
				match(DATA);
				setState(2326);
				match(DIRECTORY);
				setState(2327);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public ScheduleExpressionContext scheduleExpression() {
			return getRuleContext(ScheduleExpressionContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2331);
			match(ALTER);
			setState(2333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2332);
				ownerStatement();
				}
			}

			setState(2335);
			match(EVENT);
			setState(2336);
			fullId();
			setState(2340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(2337);
				match(ON);
				setState(2338);
				match(SCHEDULE);
				setState(2339);
				scheduleExpression();
				}
				break;
			}
			setState(2348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2342);
				match(ON);
				setState(2343);
				match(COMPLETION);
				setState(2345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2344);
					match(NOT);
					}
				}

				setState(2347);
				match(PRESERVE);
				}
			}

			setState(2353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				setState(2350);
				match(RENAME);
				setState(2351);
				match(TO);
				setState(2352);
				fullId();
				}
				break;
			}
			setState(2356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(2355);
				enableType();
				}
			}

			setState(2360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2358);
				match(COMMENT);
				setState(2359);
				match(STRING_LITERAL);
				}
			}

			setState(2364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(2362);
				match(DO);
				setState(2363);
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2366);
			match(ALTER);
			setState(2367);
			match(FUNCTION);
			setState(2368);
			fullId();
			setState(2372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (MODIFIES - 112)) | (1L << (NOT - 112)) | (1L << (READS - 112)) | (1L << (SQL - 112)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2369);
				routineOption();
				}
				}
				setState(2374);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstance; }
	}

	public final AlterInstanceContext alterInstance() throws RecognitionException {
		AlterInstanceContext _localctx = new AlterInstanceContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			match(ALTER);
			setState(2376);
			match(INSTANCE);
			setState(2377);
			match(ROTATE);
			setState(2378);
			match(INNODB);
			setState(2379);
			match(MASTER);
			setState(2380);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2382);
			match(ALTER);
			setState(2383);
			match(LOGFILE);
			setState(2384);
			match(GROUP);
			setState(2385);
			uid();
			setState(2386);
			match(ADD);
			setState(2387);
			match(UNDOFILE);
			setState(2388);
			match(STRING_LITERAL);
			setState(2394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2389);
				match(INITIAL_SIZE);
				setState(2391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2390);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2393);
				fileSizeLiteral();
				}
			}

			setState(2397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2396);
				match(WAIT);
				}
			}

			setState(2399);
			match(ENGINE);
			setState(2401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2400);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2403);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alterProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2405);
			match(ALTER);
			setState(2406);
			match(PROCEDURE);
			setState(2407);
			fullId();
			setState(2411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (MODIFIES - 112)) | (1L << (NOT - 112)) | (1L << (READS - 112)) | (1L << (SQL - 112)))) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				setState(2408);
				routineOption();
				}
				}
				setState(2413);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alterServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2414);
			match(ALTER);
			setState(2415);
			match(SERVER);
			setState(2416);
			uid();
			setState(2417);
			match(OPTIONS);
			setState(2418);
			match(LR_BRACKET);
			setState(2419);
			serverOption();
			setState(2424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2420);
				match(COMMA);
				setState(2421);
				serverOption();
				}
				}
				setState(2426);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2427);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public Token intimeAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public List<AlterSpecificationContext> alterSpecification() {
			return getRuleContexts(AlterSpecificationContext.class);
		}
		public AlterSpecificationContext alterSpecification(int i) {
			return getRuleContext(AlterSpecificationContext.class,i);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2429);
			match(ALTER);
			setState(2431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2430);
				((AlterTableContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((AlterTableContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2433);
				match(IGNORE);
				}
			}

			setState(2436);
			match(TABLE);
			setState(2437);
			tableName();
			setState(2439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2438);
				waitNowaitClause();
				}
			}

			setState(2449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(2441);
				alterSpecification();
				setState(2446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2442);
					match(COMMA);
					setState(2443);
					alterSpecification();
					}
					}
					setState(2448);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2451);
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2454);
			match(ALTER);
			setState(2455);
			match(TABLESPACE);
			setState(2456);
			uid();
			setState(2457);
			((AlterTablespaceContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2458);
			match(DATAFILE);
			setState(2459);
			match(STRING_LITERAL);
			setState(2463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2460);
				match(INITIAL_SIZE);
				setState(2461);
				match(EQUAL_SYMBOL);
				setState(2462);
				fileSizeLiteral();
				}
			}

			setState(2466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2465);
				match(WAIT);
				}
			}

			setState(2468);
			match(ENGINE);
			setState(2470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				setState(2469);
				match(EQUAL_SYMBOL);
				}
			}

			setState(2472);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public OwnerStatementContext ownerStatement() {
			return getRuleContext(OwnerStatementContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2474);
			match(ALTER);
			setState(2478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2475);
				match(ALGORITHM);
				setState(2476);
				match(EQUAL_SYMBOL);
				setState(2477);
				((AlterViewContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2480);
				ownerStatement();
				}
			}

			setState(2486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2483);
				match(SQL);
				setState(2484);
				match(SECURITY);
				setState(2485);
				((AlterViewContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2488);
			match(VIEW);
			setState(2489);
			fullId();
			setState(2494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2490);
				match(LR_BRACKET);
				setState(2491);
				uidList();
				setState(2492);
				match(RR_BRACKET);
				}
			}

			setState(2496);
			match(AS);
			setState(2497);
			selectStatement();
			setState(2504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(2498);
				match(WITH);
				setState(2500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2499);
					((AlterViewContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2502);
				match(CHECK);
				setState(2503);
				match(OPTION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSpecificationContext extends ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSpecification; }
	 
		public AlterSpecificationContext() { }
		public void copyFrom(AlterSpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterByDisableKeysContext extends AlterSpecificationContext {
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDefaultCharsetContext extends AlterSpecificationContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByRenameColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByRenameContext extends AlterSpecificationContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByCoalescePartitionContext extends AlterSpecificationContext {
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public AlterByCoalescePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAlterCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ENFORCED() { return getToken(MySqlParser.ENFORCED, 0); }
		public AlterByAlterCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDropForeignKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {
		public UidContext name;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ENFORCED() { return getToken(MySqlParser.ENFORCED, 0); }
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByUpgradePartitioningContext extends AlterSpecificationContext {
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByRepairPartitionContext extends AlterSpecificationContext {
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDropColumnContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDropPartitionContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByDropPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddSpecialIndexContext extends AlterSpecificationContext {
		public Token keyType;
		public Token indexFormat;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByModifyColumnContext extends AlterSpecificationContext {
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByTableOptionContext extends AlterSpecificationContext {
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByLockContext extends AlterSpecificationContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDiscardPartitionContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDiscardTablespaceContext extends AlterSpecificationContext {
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByValidateContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByCheckPartitionContext extends AlterSpecificationContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByEnableKeysContext extends AlterSpecificationContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByReorganizePartitionContext extends AlterSpecificationContext {
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterBySetAlgorithmContext extends AlterSpecificationContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddUniqueKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAlterColumnDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public AlterByAlterColumnDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByConvertCharsetContext extends AlterSpecificationContext {
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddPartitionContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddForeignKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByRenameIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByRemovePartitioningContext extends AlterSpecificationContext {
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByOptimizePartitionContext extends AlterSpecificationContext {
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByImportTablespaceContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddDefinitionsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddDefinitionsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDropConstraintCheckContext extends AlterSpecificationContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public AlterByDropConstraintCheckContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddColumnsContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByRebuildPartitionContext extends AlterSpecificationContext {
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByExchangePartitionContext extends AlterSpecificationContext {
		public Token validationFormat;
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByImportPartitionContext extends AlterSpecificationContext {
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByChangeDefaultContext extends AlterSpecificationContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByForceContext extends AlterSpecificationContext {
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAnalyzePartitionContext extends AlterSpecificationContext {
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByChangeColumnContext extends AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByTruncatePartitionContext extends AlterSpecificationContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByDropIndexContext extends AlterSpecificationContext {
		public Token indexFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public AlterByDropIndexContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByAddColumnContext extends AlterSpecificationContext {
		public TerminalNode ADD() { return getToken(MySqlParser.ADD, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySqlParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}
	public static class AlterByOrderContext extends AlterSpecificationContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public AlterByOrderContext(AlterSpecificationContext ctx) { copyFrom(ctx); }
	}

	public final AlterSpecificationContext alterSpecification() throws RecognitionException {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			setState(2954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2506);
				tableOption();
				setState(2513);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2508);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2507);
							match(COMMA);
							}
						}

						setState(2510);
						tableOption();
						}
						} 
					}
					setState(2515);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2516);
				match(ADD);
				setState(2518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2517);
					match(COLUMN);
					}
				}

				setState(2520);
				uid();
				setState(2521);
				columnDefinition();
				setState(2525);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2522);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2523);
					match(AFTER);
					setState(2524);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case WITH:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2527);
				match(ADD);
				setState(2529);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2528);
					match(COLUMN);
					}
				}

				setState(2531);
				match(LR_BRACKET);
				setState(2532);
				uid();
				setState(2533);
				columnDefinition();
				setState(2540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2534);
					match(COMMA);
					setState(2535);
					uid();
					setState(2536);
					columnDefinition();
					}
					}
					setState(2542);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2543);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2545);
				match(ADD);
				setState(2546);
				((AlterByAddIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(2547);
					uid();
					}
				}

				setState(2551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2550);
					indexType();
					}
				}

				setState(2553);
				indexColumnNames();
				setState(2557);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,318,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2554);
						indexOption();
						}
						} 
					}
					setState(2559);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,318,_ctx);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2560);
				match(ADD);
				setState(2565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2561);
					match(CONSTRAINT);
					setState(2563);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
					case 1:
						{
						setState(2562);
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				setState(2567);
				match(PRIMARY);
				setState(2568);
				match(KEY);
				setState(2570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(2569);
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				setState(2573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2572);
					indexType();
					}
				}

				setState(2575);
				indexColumnNames();
				setState(2579);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2576);
						indexOption();
						}
						} 
					}
					setState(2581);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2582);
				match(ADD);
				setState(2587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2583);
					match(CONSTRAINT);
					setState(2585);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(2584);
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2589);
				match(UNIQUE);
				setState(2591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2590);
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(2593);
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2596);
					indexType();
					}
				}

				setState(2599);
				indexColumnNames();
				setState(2603);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2600);
						indexOption();
						}
						} 
					}
					setState(2605);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2606);
				match(ADD);
				setState(2607);
				((AlterByAddSpecialIndexContext)_localctx).keyType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(2608);
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(2611);
					uid();
					}
				}

				setState(2614);
				indexColumnNames();
				setState(2618);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2615);
						indexOption();
						}
						} 
					}
					setState(2620);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2621);
				match(ADD);
				setState(2626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2622);
					match(CONSTRAINT);
					setState(2624);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(2623);
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2628);
				match(FOREIGN);
				setState(2629);
				match(KEY);
				setState(2631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(2630);
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				setState(2633);
				indexColumnNames();
				setState(2634);
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2636);
				match(ADD);
				setState(2641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2637);
					match(CONSTRAINT);
					setState(2639);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(2638);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2643);
				match(CHECK);
				setState(2650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(2644);
					uid();
					}
					break;
				case 2:
					{
					setState(2645);
					stringLiteral();
					}
					break;
				case 3:
					{
					setState(2646);
					match(LR_BRACKET);
					setState(2647);
					expression(0);
					setState(2648);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2652);
					match(NOT);
					}
				}

				setState(2656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENFORCED) {
					{
					setState(2655);
					match(ENFORCED);
					}
				}

				}
				break;
			case 10:
				_localctx = new AlterByAlterCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2658);
				match(ALTER);
				setState(2663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2659);
					match(CONSTRAINT);
					setState(2661);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(2660);
						((AlterByAlterCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2665);
				match(CHECK);
				setState(2672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(2666);
					uid();
					}
					break;
				case 2:
					{
					setState(2667);
					stringLiteral();
					}
					break;
				case 3:
					{
					setState(2668);
					match(LR_BRACKET);
					setState(2669);
					expression(0);
					setState(2670);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2674);
					match(NOT);
					}
				}

				setState(2678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENFORCED) {
					{
					setState(2677);
					match(ENFORCED);
					}
				}

				}
				break;
			case 11:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2680);
				match(ADD);
				setState(2685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(2681);
					match(CONSTRAINT);
					setState(2683);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
						{
						setState(2682);
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(2687);
				match(CHECK);
				setState(2688);
				match(LR_BRACKET);
				setState(2689);
				expression(0);
				setState(2690);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2692);
				match(ALGORITHM);
				setState(2694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2693);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2696);
				((AlterBySetAlgorithmContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2697);
				match(ALTER);
				setState(2699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2698);
					match(COLUMN);
					}
				}

				setState(2701);
				uid();
				setState(2707);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2702);
					match(SET);
					setState(2703);
					match(DEFAULT);
					setState(2704);
					defaultValue();
					}
					break;
				case DROP:
					{
					setState(2705);
					match(DROP);
					setState(2706);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				_localctx = new AlterByChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2709);
				match(CHANGE);
				setState(2711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2710);
					match(COLUMN);
					}
				}

				setState(2713);
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				setState(2714);
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				setState(2715);
				columnDefinition();
				setState(2719);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2716);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2717);
					match(AFTER);
					setState(2718);
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case WITH:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 15:
				_localctx = new AlterByRenameColumnContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2721);
				match(RENAME);
				setState(2722);
				match(COLUMN);
				setState(2723);
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				setState(2724);
				match(TO);
				setState(2725);
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 16:
				_localctx = new AlterByLockContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2727);
				match(LOCK);
				setState(2729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(2728);
					match(EQUAL_SYMBOL);
					}
				}

				setState(2731);
				((AlterByLockContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 17:
				_localctx = new AlterByModifyColumnContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2732);
				match(MODIFY);
				setState(2734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2733);
					match(COLUMN);
					}
				}

				setState(2736);
				uid();
				setState(2737);
				columnDefinition();
				setState(2741);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST:
					{
					setState(2738);
					match(FIRST);
					}
					break;
				case AFTER:
					{
					setState(2739);
					match(AFTER);
					setState(2740);
					uid();
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case WITH:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 18:
				_localctx = new AlterByDropColumnContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2743);
				match(DROP);
				setState(2745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2744);
					match(COLUMN);
					}
				}

				setState(2747);
				uid();
				setState(2749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(2748);
					match(RESTRICT);
					}
				}

				}
				break;
			case 19:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2751);
				match(DROP);
				setState(2752);
				_la = _input.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2753);
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2754);
				match(DROP);
				setState(2755);
				match(PRIMARY);
				setState(2756);
				match(KEY);
				}
				break;
			case 21:
				_localctx = new AlterByDropIndexContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2757);
				match(DROP);
				setState(2758);
				((AlterByDropIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2759);
				uid();
				}
				break;
			case 22:
				_localctx = new AlterByRenameIndexContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2760);
				match(RENAME);
				setState(2761);
				((AlterByRenameIndexContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2762);
				uid();
				setState(2763);
				match(TO);
				setState(2764);
				uid();
				}
				break;
			case 23:
				_localctx = new AlterByAlterColumnDefaultContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2766);
				match(ALTER);
				setState(2768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2767);
					match(COLUMN);
					}
				}

				setState(2770);
				uid();
				setState(2784);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(2771);
					match(SET);
					setState(2772);
					match(DEFAULT);
					setState(2778);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case START_NATIONAL_STRING_LITERAL:
					case STRING_LITERAL:
					case STRING_CHARSET_NAME:
						{
						setState(2773);
						stringLiteral();
						}
						break;
					case LR_BRACKET:
						{
						setState(2774);
						match(LR_BRACKET);
						setState(2775);
						expression(0);
						setState(2776);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					setState(2780);
					match(SET);
					setState(2781);
					_la = _input.LA(1);
					if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 3:
					{
					setState(2782);
					match(DROP);
					setState(2783);
					match(DEFAULT);
					}
					break;
				}
				}
				break;
			case 24:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2786);
				match(ALTER);
				setState(2787);
				match(INDEX);
				setState(2788);
				uid();
				setState(2789);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 25:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2791);
				match(DROP);
				setState(2792);
				match(FOREIGN);
				setState(2793);
				match(KEY);
				setState(2794);
				uid();
				}
				break;
			case 26:
				_localctx = new AlterByDisableKeysContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2795);
				match(DISABLE);
				setState(2796);
				match(KEYS);
				}
				break;
			case 27:
				_localctx = new AlterByEnableKeysContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2797);
				match(ENABLE);
				setState(2798);
				match(KEYS);
				}
				break;
			case 28:
				_localctx = new AlterByRenameContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2799);
				match(RENAME);
				setState(2801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2800);
					((AlterByRenameContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2805);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(2803);
					uid();
					}
					break;
				case 2:
					{
					setState(2804);
					fullId();
					}
					break;
				}
				}
				break;
			case 29:
				_localctx = new AlterByOrderContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2807);
				match(ORDER);
				setState(2808);
				match(BY);
				setState(2809);
				uidList();
				}
				break;
			case 30:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2810);
				match(CONVERT);
				setState(2811);
				match(TO);
				setState(2815);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHARSET:
					{
					setState(2812);
					match(CHARSET);
					}
					break;
				case CHARACTER:
					{
					setState(2813);
					match(CHARACTER);
					setState(2814);
					match(SET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2817);
				charsetName();
				setState(2820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2818);
					match(COLLATE);
					setState(2819);
					collationName();
					}
				}

				}
				break;
			case 31:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2822);
					match(DEFAULT);
					}
				}

				setState(2825);
				match(CHARACTER);
				setState(2826);
				match(SET);
				setState(2827);
				match(EQUAL_SYMBOL);
				setState(2828);
				charsetName();
				setState(2832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2829);
					match(COLLATE);
					setState(2830);
					match(EQUAL_SYMBOL);
					setState(2831);
					collationName();
					}
				}

				}
				break;
			case 32:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2834);
				match(DISCARD);
				setState(2835);
				match(TABLESPACE);
				}
				break;
			case 33:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2836);
				match(IMPORT);
				setState(2837);
				match(TABLESPACE);
				}
				break;
			case 34:
				_localctx = new AlterByForceContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2838);
				match(FORCE);
				}
				break;
			case 35:
				_localctx = new AlterByValidateContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2839);
				((AlterByValidateContext)_localctx).validationFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2840);
				match(VALIDATION);
				}
				break;
			case 36:
				_localctx = new AlterByAddPartitionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2841);
				match(ADD);
				setState(2842);
				match(PARTITION);
				setState(2843);
				match(LR_BRACKET);
				setState(2844);
				partitionDefinition();
				setState(2849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2845);
					match(COMMA);
					setState(2846);
					partitionDefinition();
					}
					}
					setState(2851);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2852);
				match(RR_BRACKET);
				}
				break;
			case 37:
				_localctx = new AlterByDropPartitionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2854);
				match(DROP);
				setState(2855);
				match(PARTITION);
				setState(2856);
				uidList();
				}
				break;
			case 38:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2857);
				match(DISCARD);
				setState(2858);
				match(PARTITION);
				setState(2861);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2859);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2860);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2863);
				match(TABLESPACE);
				}
				break;
			case 39:
				_localctx = new AlterByImportPartitionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2864);
				match(IMPORT);
				setState(2865);
				match(PARTITION);
				setState(2868);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2866);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2867);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2870);
				match(TABLESPACE);
				}
				break;
			case 40:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2871);
				match(TRUNCATE);
				setState(2872);
				match(PARTITION);
				setState(2875);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2873);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2874);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 41:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2877);
				match(COALESCE);
				setState(2878);
				match(PARTITION);
				setState(2879);
				decimalLiteral();
				}
				break;
			case 42:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2880);
				match(REORGANIZE);
				setState(2881);
				match(PARTITION);
				setState(2882);
				uidList();
				setState(2883);
				match(INTO);
				setState(2884);
				match(LR_BRACKET);
				setState(2885);
				partitionDefinition();
				setState(2890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2886);
					match(COMMA);
					setState(2887);
					partitionDefinition();
					}
					}
					setState(2892);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2893);
				match(RR_BRACKET);
				}
				break;
			case 43:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2895);
				match(EXCHANGE);
				setState(2896);
				match(PARTITION);
				setState(2897);
				uid();
				setState(2898);
				match(WITH);
				setState(2899);
				match(TABLE);
				setState(2900);
				tableName();
				setState(2903);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(2901);
					((AlterByExchangePartitionContext)_localctx).validationFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2902);
					match(VALIDATION);
					}
					break;
				}
				}
				break;
			case 44:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2905);
				match(ANALYZE);
				setState(2906);
				match(PARTITION);
				setState(2909);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2907);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2908);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 45:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(2911);
				match(CHECK);
				setState(2912);
				match(PARTITION);
				setState(2915);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2913);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2914);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 46:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(2917);
				match(OPTIMIZE);
				setState(2918);
				match(PARTITION);
				setState(2921);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2919);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2920);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 47:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(2923);
				match(REBUILD);
				setState(2924);
				match(PARTITION);
				setState(2927);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2925);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2926);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 48:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(2929);
				match(REPAIR);
				setState(2930);
				match(PARTITION);
				setState(2933);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(2931);
					uidList();
					}
					break;
				case ALL:
					{
					setState(2932);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 49:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 49);
				{
				setState(2935);
				match(REMOVE);
				setState(2936);
				match(PARTITIONING);
				}
				break;
			case 50:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				enterOuterAlt(_localctx, 50);
				{
				setState(2937);
				match(UPGRADE);
				setState(2938);
				match(PARTITIONING);
				}
				break;
			case 51:
				_localctx = new AlterByAddDefinitionsContext(_localctx);
				enterOuterAlt(_localctx, 51);
				{
				setState(2939);
				match(ADD);
				setState(2941);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2940);
					match(COLUMN);
					}
				}

				setState(2943);
				match(LR_BRACKET);
				setState(2944);
				createDefinition();
				setState(2949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2945);
					match(COMMA);
					setState(2946);
					createDefinition();
					}
					}
					setState(2951);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2952);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2956);
			match(DROP);
			setState(2957);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(2958);
				ifExists();
				}
				break;
			}
			setState(2961);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2963);
			match(DROP);
			setState(2964);
			match(EVENT);
			setState(2966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(2965);
				ifExists();
				}
				break;
			}
			setState(2968);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token intimeAction;
		public Token algType;
		public Token lockType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(MySqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(MySqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> LOCK() { return getTokens(MySqlParser.LOCK); }
		public TerminalNode LOCK(int i) {
			return getToken(MySqlParser.LOCK, i);
		}
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<TerminalNode> INPLACE() { return getTokens(MySqlParser.INPLACE); }
		public TerminalNode INPLACE(int i) {
			return getToken(MySqlParser.INPLACE, i);
		}
		public List<TerminalNode> COPY() { return getTokens(MySqlParser.COPY); }
		public TerminalNode COPY(int i) {
			return getToken(MySqlParser.COPY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(MySqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(MySqlParser.NONE, i);
		}
		public List<TerminalNode> SHARED() { return getTokens(MySqlParser.SHARED); }
		public TerminalNode SHARED(int i) {
			return getToken(MySqlParser.SHARED, i);
		}
		public List<TerminalNode> EXCLUSIVE() { return getTokens(MySqlParser.EXCLUSIVE); }
		public TerminalNode EXCLUSIVE(int i) {
			return getToken(MySqlParser.EXCLUSIVE, i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2970);
			match(DROP);
			setState(2971);
			match(INDEX);
			setState(2973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				setState(2972);
				((DropIndexContext)_localctx).intimeAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					((DropIndexContext)_localctx).intimeAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2975);
			uid();
			setState(2976);
			match(ON);
			setState(2977);
			tableName();
			setState(2990);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2988);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
						{
						setState(2978);
						match(ALGORITHM);
						setState(2980);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2979);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2982);
						((DropIndexContext)_localctx).algType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							((DropIndexContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LOCK:
						{
						setState(2983);
						match(LOCK);
						setState(2985);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							setState(2984);
							match(EQUAL_SYMBOL);
							}
						}

						setState(2987);
						((DropIndexContext)_localctx).lockType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							((DropIndexContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2992);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropLogfileGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2993);
			match(DROP);
			setState(2994);
			match(LOGFILE);
			setState(2995);
			match(GROUP);
			setState(2996);
			uid();
			setState(2997);
			match(ENGINE);
			setState(2998);
			match(EQUAL_SYMBOL);
			setState(2999);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3001);
			match(DROP);
			setState(3002);
			match(PROCEDURE);
			setState(3004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(3003);
				ifExists();
				}
				break;
			}
			setState(3006);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3008);
			match(DROP);
			setState(3009);
			match(FUNCTION);
			setState(3011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(3010);
				ifExists();
				}
				break;
			}
			setState(3013);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dropServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3015);
			match(DROP);
			setState(3016);
			match(SERVER);
			setState(3018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3017);
				ifExists();
				}
				break;
			}
			setState(3020);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3022);
			match(DROP);
			setState(3024);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(3023);
				match(TEMPORARY);
				}
			}

			setState(3026);
			match(TABLE);
			setState(3028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3027);
				ifExists();
				}
				break;
			}
			setState(3030);
			tables();
			setState(3032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3031);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_dropTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3034);
			match(DROP);
			setState(3035);
			match(TABLESPACE);
			setState(3036);
			uid();
			setState(3042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE) {
				{
				setState(3037);
				match(ENGINE);
				setState(3039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(3038);
					match(EQUAL_SYMBOL);
					}
				}

				setState(3041);
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_dropTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			match(DROP);
			setState(3045);
			match(TRIGGER);
			setState(3047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3046);
				ifExists();
				}
				break;
			}
			setState(3049);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3051);
			match(DROP);
			setState(3052);
			match(VIEW);
			setState(3054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3053);
				ifExists();
				}
				break;
			}
			setState(3056);
			fullId();
			setState(3061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3057);
				match(COMMA);
				setState(3058);
				fullId();
				}
				}
				setState(3063);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3064);
				((DropViewContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_dropRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3067);
			match(DROP);
			setState(3068);
			match(ROLE);
			setState(3070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3069);
				ifExists();
				}
				break;
			}
			setState(3072);
			roleName();
			setState(3077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3073);
				match(COMMA);
				setState(3074);
				roleName();
				}
				}
				setState(3079);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_setRole);
		int _la;
		try {
			setState(3113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3080);
				match(SET);
				setState(3081);
				match(DEFAULT);
				setState(3082);
				match(ROLE);
				setState(3093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					setState(3083);
					match(NONE);
					}
					break;
				case 2:
					{
					setState(3084);
					match(ALL);
					}
					break;
				case 3:
					{
					setState(3085);
					roleName();
					setState(3090);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3086);
						match(COMMA);
						setState(3087);
						roleName();
						}
						}
						setState(3092);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3095);
				match(TO);
				setState(3098);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					setState(3096);
					userName();
					}
					break;
				case 2:
					{
					setState(3097);
					uid();
					}
					break;
				}
				setState(3107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3100);
					match(COMMA);
					setState(3103);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
					case 1:
						{
						setState(3101);
						userName();
						}
						break;
					case 2:
						{
						setState(3102);
						uid();
						}
						break;
					}
					}
					}
					setState(3109);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3110);
				match(SET);
				setState(3111);
				match(ROLE);
				setState(3112);
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3115);
			match(RENAME);
			setState(3116);
			match(TABLE);
			setState(3117);
			renameTableClause();
			setState(3122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3118);
				match(COMMA);
				setState(3119);
				renameTableClause();
				}
				}
				setState(3124);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3125);
			tableName();
			setState(3126);
			match(TO);
			setState(3127);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3129);
			match(TRUNCATE);
			setState(3131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(3130);
				match(TABLE);
				}
			}

			setState(3133);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3135);
			match(CALL);
			setState(3136);
			fullId();
			setState(3143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(3137);
				match(LR_BRACKET);
				setState(3140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(3138);
					constants();
					}
					break;
				case 2:
					{
					setState(3139);
					expressions();
					}
					break;
				}
				setState(3142);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_deleteStatement);
		try {
			setState(3147);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3145);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3146);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3149);
			match(DO);
			setState(3150);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_handlerStatement);
		try {
			setState(3156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3152);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3153);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3154);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3155);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public FullColumnNameListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FullColumnNameListContext fullColumnNameList() {
			return getRuleContext(FullColumnNameListContext.class,0);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3158);
			match(INSERT);
			setState(3160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (DELAYED - 43)) | (1L << (HIGH_PRIORITY - 43)) | (1L << (LOW_PRIORITY - 43)))) != 0)) {
				{
				setState(3159);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 43)) & ~0x3f) == 0 && ((1L << (_la - 43)) & ((1L << (DELAYED - 43)) | (1L << (HIGH_PRIORITY - 43)) | (1L << (LOW_PRIORITY - 43)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3162);
				match(IGNORE);
				}
			}

			setState(3166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3165);
				match(INTO);
				}
			}

			setState(3168);
			tableName();
			setState(3175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3169);
				match(PARTITION);
				setState(3170);
				match(LR_BRACKET);
				setState(3172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(3171);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(3174);
				match(RR_BRACKET);
				}
			}

			setState(3193);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(3177);
					match(LR_BRACKET);
					setState(3178);
					((InsertStatementContext)_localctx).columns = fullColumnNameList();
					setState(3179);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3183);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3184);
				match(SET);
				setState(3185);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(3190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3186);
					match(COMMA);
					setState(3187);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(3192);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3195);
				match(ON);
				setState(3196);
				match(DUPLICATE);
				setState(3197);
				match(KEY);
				setState(3198);
				match(UPDATE);
				setState(3199);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(3204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3200);
					match(COMMA);
					setState(3201);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(3206);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(MySqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3209);
			match(LOAD);
			setState(3210);
			match(DATA);
			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(3211);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3214);
				match(LOCAL);
				}
			}

			setState(3217);
			match(INFILE);
			setState(3218);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(3220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3219);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3222);
			match(INTO);
			setState(3223);
			match(TABLE);
			setState(3224);
			tableName();
			setState(3230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3225);
				match(PARTITION);
				setState(3226);
				match(LR_BRACKET);
				setState(3227);
				uidList();
				setState(3228);
				match(RR_BRACKET);
				}
			}

			setState(3235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3232);
				match(CHARACTER);
				setState(3233);
				match(SET);
				setState(3234);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(3237);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3239); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3238);
					selectFieldsInto();
					}
					}
					setState(3241); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(3251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(3245);
				match(LINES);
				setState(3247); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3246);
					selectLinesInto();
					}
					}
					setState(3249); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(3257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3253);
				match(IGNORE);
				setState(3254);
				decimalLiteral();
				setState(3255);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3259);
				match(LR_BRACKET);
				setState(3260);
				assignmentField();
				setState(3265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3261);
					match(COMMA);
					setState(3262);
					assignmentField();
					}
					}
					setState(3267);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3268);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(3272);
				match(SET);
				setState(3273);
				updatedElement();
				setState(3278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3274);
					match(COMMA);
					setState(3275);
					updatedElement();
					}
					}
					setState(3280);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3283);
			match(LOAD);
			setState(3284);
			match(XML);
			setState(3286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(3285);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3288);
				match(LOCAL);
				}
			}

			setState(3291);
			match(INFILE);
			setState(3292);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(3294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3293);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3296);
			match(INTO);
			setState(3297);
			match(TABLE);
			setState(3298);
			tableName();
			setState(3302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3299);
				match(CHARACTER);
				setState(3300);
				match(SET);
				setState(3301);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(3310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(3304);
				match(ROWS);
				setState(3305);
				match(IDENTIFIED);
				setState(3306);
				match(BY);
				setState(3307);
				match(LESS_SYMBOL);
				setState(3308);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(3309);
				match(GREATER_SYMBOL);
				}
			}

			setState(3316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3312);
				match(IGNORE);
				setState(3313);
				decimalLiteral();
				setState(3314);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3318);
				match(LR_BRACKET);
				setState(3319);
				assignmentField();
				setState(3324);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3320);
					match(COMMA);
					setState(3321);
					assignmentField();
					}
					}
					setState(3326);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3327);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				setState(3331);
				match(SET);
				setState(3332);
				updatedElement();
				setState(3337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3333);
					match(COMMA);
					setState(3334);
					updatedElement();
					}
					}
					setState(3339);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3342);
			match(REPLACE);
			setState(3344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(3343);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3346);
				match(INTO);
				}
			}

			setState(3349);
			tableName();
			setState(3355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3350);
				match(PARTITION);
				setState(3351);
				match(LR_BRACKET);
				setState(3352);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(3353);
				match(RR_BRACKET);
				}
			}

			setState(3373);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(3361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(3357);
					match(LR_BRACKET);
					setState(3358);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(3359);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3363);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(3364);
				match(SET);
				setState(3365);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(3370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3366);
					match(COMMA);
					setState(3367);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(3372);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
	}
	public static class WithLateralStatementContext extends SelectStatementContext {
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<LateralStatementContext> lateralStatement() {
			return getRuleContexts(LateralStatementContext.class);
		}
		public LateralStatementContext lateralStatement(int i) {
			return getRuleContext(LateralStatementContext.class,i);
		}
		public WithLateralStatementContext(SelectStatementContext ctx) { copyFrom(ctx); }
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(3437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3375);
				querySpecification();
				setState(3377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(3376);
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3379);
				queryExpression();
				setState(3381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
				case 1:
					{
					setState(3380);
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3383);
				querySpecificationNointo();
				setState(3385); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3384);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3387); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3389);
					match(UNION);
					setState(3391);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3390);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3395);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(3393);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(3394);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3400);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
				case 1:
					{
					setState(3399);
					orderByClause();
					}
					break;
				}
				setState(3403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3402);
					limitClause();
					}
				}

				setState(3406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(3405);
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3408);
				queryExpressionNointo();
				setState(3410); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3409);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3412); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(3419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(3414);
					match(UNION);
					setState(3416);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3415);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3418);
					queryExpression();
					}
				}

				setState(3422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(3421);
					orderByClause();
					}
					break;
				}
				setState(3425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(3424);
					limitClause();
					}
				}

				setState(3428);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
				case 1:
					{
					setState(3427);
					lockClause();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new WithLateralStatementContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3430);
				querySpecificationNointo();
				setState(3433); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3431);
					match(COMMA);
					setState(3432);
					lateralStatement();
					}
					}
					setState(3435); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_updateStatement);
		try {
			setState(3441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3439);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3440);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesStatementContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ValuesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesStatement; }
	}

	public final ValuesStatementContext valuesStatement() throws RecognitionException {
		ValuesStatementContext _localctx = new ValuesStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_valuesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443);
			match(VALUES);
			setState(3444);
			match(LR_BRACKET);
			setState(3446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(3445);
				expressionsWithDefaults();
				}
				break;
			}
			setState(3448);
			match(RR_BRACKET);
			setState(3457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3449);
				match(COMMA);
				setState(3450);
				match(LR_BRACKET);
				setState(3452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(3451);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3454);
				match(RR_BRACKET);
				}
				}
				setState(3459);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_insertStatementValue);
		int _la;
		try {
			setState(3478);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(3460);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3461);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3462);
				match(LR_BRACKET);
				setState(3464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
				case 1:
					{
					setState(3463);
					expressionsWithDefaults();
					}
					break;
				}
				setState(3466);
				match(RR_BRACKET);
				setState(3475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3467);
					match(COMMA);
					setState(3468);
					match(LR_BRACKET);
					setState(3470);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
					case 1:
						{
						setState(3469);
						expressionsWithDefaults();
						}
						break;
					}
					setState(3472);
					match(RR_BRACKET);
					}
					}
					setState(3477);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3480);
			fullColumnName();
			setState(3481);
			match(EQUAL_SYMBOL);
			setState(3484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				{
				setState(3482);
				expression(0);
				}
				break;
			case 2:
				{
				setState(3483);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_assignmentField);
		try {
			setState(3488);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case ENFORCED:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_QUERY_REWRITE:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ABORT_EXEMPT:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_EXEMPT:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TP_CONNECTION_ADMIN:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3486);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3487);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_lockClause);
		try {
			setState(3496);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3490);
				match(FOR);
				setState(3491);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3492);
				match(LOCK);
				setState(3493);
				match(IN);
				setState(3494);
				match(SHARE);
				setState(3495);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3498);
			match(DELETE);
			setState(3500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3499);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3502);
				match(QUICK);
				}
			}

			setState(3506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3505);
				match(IGNORE);
				}
			}

			setState(3508);
			match(FROM);
			setState(3509);
			tableName();
			setState(3514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(3511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3510);
					match(AS);
					}
				}

				setState(3513);
				uid();
				}
				break;
			}
			setState(3521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3516);
				match(PARTITION);
				setState(3517);
				match(LR_BRACKET);
				setState(3518);
				uidList();
				setState(3519);
				match(RR_BRACKET);
				}
			}

			setState(3525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3523);
				match(WHERE);
				setState(3524);
				expression(0);
				}
			}

			setState(3528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3527);
				orderByClause();
				}
			}

			setState(3532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3530);
				match(LIMIT);
				setState(3531);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(MySqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MySqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3534);
			match(DELETE);
			setState(3536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3535);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(3538);
				match(QUICK);
				}
				break;
			}
			setState(3542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3541);
				match(IGNORE);
				}
			}

			setState(3583);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case ENFORCED:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_QUERY_REWRITE:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ABORT_EXEMPT:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_EXEMPT:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TP_CONNECTION_ADMIN:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(3544);
				tableName();
				setState(3547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3545);
					match(DOT);
					setState(3546);
					match(STAR);
					}
				}

				setState(3557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3549);
					match(COMMA);
					setState(3550);
					tableName();
					setState(3553);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3551);
						match(DOT);
						setState(3552);
						match(STAR);
						}
					}

					}
					}
					setState(3559);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3560);
				match(FROM);
				setState(3561);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(3563);
				match(FROM);
				setState(3564);
				tableName();
				setState(3567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(3565);
					match(DOT);
					setState(3566);
					match(STAR);
					}
				}

				setState(3577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3569);
					match(COMMA);
					setState(3570);
					tableName();
					setState(3573);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(3571);
						match(DOT);
						setState(3572);
						match(STAR);
						}
					}

					}
					}
					setState(3579);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3580);
				match(USING);
				setState(3581);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3585);
				match(WHERE);
				setState(3586);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3589);
			match(HANDLER);
			setState(3590);
			tableName();
			setState(3591);
			match(OPEN);
			setState(3596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				{
				setState(3593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3592);
					match(AS);
					}
				}

				setState(3595);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3598);
			match(HANDLER);
			setState(3599);
			tableName();
			setState(3600);
			match(READ);
			setState(3601);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(3608);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(3602);
				comparisonOperator();
				setState(3603);
				match(LR_BRACKET);
				setState(3604);
				constants();
				setState(3605);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(3607);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3610);
				match(WHERE);
				setState(3611);
				expression(0);
				}
			}

			setState(3616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3614);
				match(LIMIT);
				setState(3615);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618);
			match(HANDLER);
			setState(3619);
			tableName();
			setState(3620);
			match(READ);
			setState(3621);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3622);
				match(WHERE);
				setState(3623);
				expression(0);
				}
			}

			setState(3628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3626);
				match(LIMIT);
				setState(3627);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3630);
			match(HANDLER);
			setState(3631);
			tableName();
			setState(3632);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3634);
			match(UPDATE);
			setState(3636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3635);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3638);
				match(IGNORE);
				}
			}

			setState(3641);
			tableName();
			setState(3646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(3643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3642);
					match(AS);
					}
				}

				setState(3645);
				uid();
				}
			}

			setState(3648);
			match(SET);
			setState(3649);
			updatedElement();
			setState(3654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3650);
				match(COMMA);
				setState(3651);
				updatedElement();
				}
				}
				setState(3656);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3657);
				match(WHERE);
				setState(3658);
				expression(0);
				}
			}

			setState(3662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3661);
				orderByClause();
				}
			}

			setState(3665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3664);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667);
			match(UPDATE);
			setState(3669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3668);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(3672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3671);
				match(IGNORE);
				}
			}

			setState(3674);
			tableSources();
			setState(3675);
			match(SET);
			setState(3676);
			updatedElement();
			setState(3681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3677);
				match(COMMA);
				setState(3678);
				updatedElement();
				}
				}
				setState(3683);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3684);
				match(WHERE);
				setState(3685);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_orderByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3688);
			match(ORDER);
			setState(3689);
			match(BY);
			setState(3690);
			orderByExpression();
			setState(3695);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3691);
					match(COMMA);
					setState(3692);
					orderByExpression();
					}
					} 
				}
				setState(3697);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3698);
			expression(0);
			setState(3700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				{
				setState(3699);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_tableSources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3702);
			tableSource();
			setState(3707);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,523,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3703);
					match(COMMA);
					setState(3704);
					tableSource();
					}
					} 
				}
				setState(3709);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,523,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableJsonContext extends TableSourceContext {
		public JsonTableContext jsonTable() {
			return getRuleContext(JsonTableContext.class,0);
		}
		public TableJsonContext(TableSourceContext ctx) { copyFrom(ctx); }
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(3728);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3710);
				tableSourceItem();
				setState(3714);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3711);
						joinPart();
						}
						} 
					}
					setState(3716);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3717);
				match(LR_BRACKET);
				setState(3718);
				tableSourceItem();
				setState(3722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (CROSS - 34)) | (1L << (INNER - 34)) | (1L << (JOIN - 34)) | (1L << (LEFT - 34)))) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (NATURAL - 113)) | (1L << (RIGHT - 113)) | (1L << (STRAIGHT_JOIN - 113)))) != 0)) {
					{
					{
					setState(3719);
					joinPart();
					}
					}
					setState(3724);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3725);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new TableJsonContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3727);
				jsonTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(3770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3730);
				tableName();
				setState(3736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3731);
					match(PARTITION);
					setState(3732);
					match(LR_BRACKET);
					setState(3733);
					uidList();
					setState(3734);
					match(RR_BRACKET);
					}
				}

				setState(3742);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
				case 1:
					{
					setState(3739);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3738);
						match(AS);
						}
					}

					setState(3741);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(3752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
				case 1:
					{
					setState(3744);
					indexHint();
					setState(3749);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,530,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3745);
							match(COMMA);
							setState(3746);
							indexHint();
							}
							} 
						}
						setState(3751);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,530,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
				case 1:
					{
					setState(3754);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(3755);
					match(LR_BRACKET);
					setState(3756);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(3757);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3761);
					match(AS);
					}
				}

				setState(3764);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3766);
				match(LR_BRACKET);
				setState(3767);
				tableSources();
				setState(3768);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3772);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3773);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3774);
				match(FOR);
				setState(3775);
				indexHintType();
				}
			}

			setState(3778);
			match(LR_BRACKET);
			setState(3779);
			uidList();
			setState(3780);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_indexHintType);
		try {
			setState(3787);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3782);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3783);
				match(ORDER);
				setState(3784);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3785);
				match(GROUP);
				setState(3786);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(MySqlParser.LATERAL, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public TerminalNode LATERAL() { return getToken(MySqlParser.LATERAL, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_joinPart);
		int _la;
		try {
			setState(3839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(3789);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3792);
				match(JOIN);
				setState(3794);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(3793);
					match(LATERAL);
					}
					break;
				}
				setState(3796);
				tableSourceItem();
				setState(3804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(3797);
					match(ON);
					setState(3798);
					expression(0);
					}
					break;
				case 2:
					{
					setState(3799);
					match(USING);
					setState(3800);
					match(LR_BRACKET);
					setState(3801);
					uidList();
					setState(3802);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3806);
				match(STRAIGHT_JOIN);
				setState(3807);
				tableSourceItem();
				setState(3810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
				case 1:
					{
					setState(3808);
					match(ON);
					setState(3809);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3812);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3813);
					match(OUTER);
					}
				}

				setState(3816);
				match(JOIN);
				setState(3818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(3817);
					match(LATERAL);
					}
					break;
				}
				setState(3820);
				tableSourceItem();
				setState(3828);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(3821);
					match(ON);
					setState(3822);
					expression(0);
					}
					break;
				case USING:
					{
					setState(3823);
					match(USING);
					setState(3824);
					match(LR_BRACKET);
					setState(3825);
					uidList();
					setState(3826);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3830);
				match(NATURAL);
				setState(3835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(3831);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3833);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(3832);
						match(OUTER);
						}
					}

					}
				}

				setState(3837);
				match(JOIN);
				setState(3838);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_queryExpression);
		try {
			setState(3849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3841);
				match(LR_BRACKET);
				setState(3842);
				querySpecification();
				setState(3843);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3845);
				match(LR_BRACKET);
				setState(3846);
				queryExpression();
				setState(3847);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_queryExpressionNointo);
		try {
			setState(3859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3851);
				match(LR_BRACKET);
				setState(3852);
				querySpecificationNointo();
				setState(3853);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3855);
				match(LR_BRACKET);
				setState(3856);
				queryExpressionNointo();
				setState(3857);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(3915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3861);
				match(SELECT);
				setState(3865);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3862);
						selectSpec();
						}
						} 
					}
					setState(3867);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
				}
				setState(3868);
				selectElements();
				setState(3870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3869);
					selectIntoExpression();
					}
				}

				setState(3872);
				fromClause();
				setState(3874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
				case 1:
					{
					setState(3873);
					groupByClause();
					}
					break;
				}
				setState(3877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3876);
					havingClause();
					}
				}

				setState(3880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3879);
					windowClause();
					}
				}

				setState(3883);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
				case 1:
					{
					setState(3882);
					orderByClause();
					}
					break;
				}
				setState(3886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					setState(3885);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3888);
				match(SELECT);
				setState(3892);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,556,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3889);
						selectSpec();
						}
						} 
					}
					setState(3894);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,556,_ctx);
				}
				setState(3895);
				selectElements();
				setState(3896);
				fromClause();
				setState(3898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(3897);
					groupByClause();
					}
					break;
				}
				setState(3901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(3900);
					havingClause();
					}
				}

				setState(3904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(3903);
					windowClause();
					}
				}

				setState(3907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(3906);
					orderByClause();
					}
					break;
				}
				setState(3910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
				case 1:
					{
					setState(3909);
					limitClause();
					}
					break;
				}
				setState(3913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(3912);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3917);
			match(SELECT);
			setState(3921);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3918);
					selectSpec();
					}
					} 
				}
				setState(3923);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,564,_ctx);
			}
			setState(3924);
			selectElements();
			setState(3925);
			fromClause();
			setState(3927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				{
				setState(3926);
				groupByClause();
				}
				break;
			}
			setState(3930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3929);
				havingClause();
				}
			}

			setState(3933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(3932);
				windowClause();
				}
			}

			setState(3936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				{
				setState(3935);
				orderByClause();
				}
				break;
			}
			setState(3939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				{
				setState(3938);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3941);
			match(UNION);
			setState(3943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3942);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3945);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3947);
			match(UNION);
			setState(3949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3948);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(3951);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(3952);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LateralStatementContext extends ParserRuleContext {
		public TerminalNode LATERAL() { return getToken(MySqlParser.LATERAL, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public LateralStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateralStatement; }
	}

	public final LateralStatementContext lateralStatement() throws RecognitionException {
		LateralStatementContext _localctx = new LateralStatementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_lateralStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3955);
			match(LATERAL);
			setState(3970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				{
				setState(3956);
				querySpecificationNointo();
				}
				break;
			case 2:
				{
				setState(3957);
				queryExpressionNointo();
				}
				break;
			case 3:
				{
				{
				setState(3958);
				match(LR_BRACKET);
				setState(3961);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(3959);
					querySpecificationNointo();
					}
					break;
				case LR_BRACKET:
					{
					setState(3960);
					queryExpressionNointo();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3963);
				match(RR_BRACKET);
				setState(3968);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
				case 1:
					{
					setState(3965);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3964);
						match(AS);
						}
					}

					setState(3967);
					uid();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonTableContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public JsonColumnListContext jsonColumnList() {
			return getRuleContext(JsonColumnListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public JsonTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonTable; }
	}

	public final JsonTableContext jsonTable() throws RecognitionException {
		JsonTableContext _localctx = new JsonTableContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_jsonTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3972);
			match(JSON_TABLE);
			setState(3973);
			match(LR_BRACKET);
			setState(3974);
			match(STRING_LITERAL);
			setState(3975);
			match(COMMA);
			setState(3976);
			match(STRING_LITERAL);
			setState(3977);
			match(COLUMNS);
			setState(3978);
			match(LR_BRACKET);
			setState(3979);
			jsonColumnList();
			setState(3980);
			match(RR_BRACKET);
			setState(3981);
			match(RR_BRACKET);
			setState(3986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(3983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3982);
					match(AS);
					}
				}

				setState(3985);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonColumnListContext extends ParserRuleContext {
		public List<JsonColumnContext> jsonColumn() {
			return getRuleContexts(JsonColumnContext.class);
		}
		public JsonColumnContext jsonColumn(int i) {
			return getRuleContext(JsonColumnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public JsonColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumnList; }
	}

	public final JsonColumnListContext jsonColumnList() throws RecognitionException {
		JsonColumnListContext _localctx = new JsonColumnListContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_jsonColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3988);
			jsonColumn();
			setState(3993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3989);
				match(COMMA);
				setState(3990);
				jsonColumn();
				}
				}
				setState(3995);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonColumnContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(MySqlParser.ORDINALITY, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PATH() { return getToken(MySqlParser.PATH, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public JsonOnEmptyContext jsonOnEmpty() {
			return getRuleContext(JsonOnEmptyContext.class,0);
		}
		public JsonOnErrorContext jsonOnError() {
			return getRuleContext(JsonOnErrorContext.class,0);
		}
		public TerminalNode NESTED() { return getToken(MySqlParser.NESTED, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public JsonColumnListContext jsonColumnList() {
			return getRuleContext(JsonColumnListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumn; }
	}

	public final JsonColumnContext jsonColumn() throws RecognitionException {
		JsonColumnContext _localctx = new JsonColumnContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_jsonColumn);
		int _la;
		try {
			setState(4025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3996);
				fullColumnName();
				setState(4013);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(3997);
					match(FOR);
					setState(3998);
					match(ORDINALITY);
					}
					break;
				case CHARACTER:
				case SET:
				case TINYINT:
				case SMALLINT:
				case MEDIUMINT:
				case MIDDLEINT:
				case INT:
				case INT1:
				case INT2:
				case INT3:
				case INT4:
				case INT8:
				case INTEGER:
				case BIGINT:
				case REAL:
				case DOUBLE:
				case FLOAT:
				case FLOAT4:
				case FLOAT8:
				case DECIMAL:
				case DEC:
				case NUMERIC:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case VARCHAR:
				case NVARCHAR:
				case NATIONAL:
				case BINARY:
				case VARBINARY:
				case TINYBLOB:
				case BLOB:
				case MEDIUMBLOB:
				case LONG:
				case LONGBLOB:
				case TINYTEXT:
				case TEXT:
				case MEDIUMTEXT:
				case LONGTEXT:
				case ENUM:
				case SERIAL:
				case BIT:
				case BOOL:
				case BOOLEAN:
				case FIXED:
				case JSON:
				case NCHAR:
				case GEOMETRYCOLLECTION:
				case GEOMCOLLECTION:
				case GEOMETRY:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
					{
					setState(3999);
					dataType();
					setState(4011);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PATH:
						{
						setState(4000);
						match(PATH);
						setState(4001);
						match(STRING_LITERAL);
						setState(4003);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
						case 1:
							{
							setState(4002);
							jsonOnEmpty();
							}
							break;
						}
						setState(4006);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
							{
							setState(4005);
							jsonOnError();
							}
						}

						}
						break;
					case EXISTS:
						{
						setState(4008);
						match(EXISTS);
						setState(4009);
						match(PATH);
						setState(4010);
						match(STRING_LITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4015);
				match(NESTED);
				setState(4017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(4016);
					match(PATH);
					}
				}

				setState(4019);
				match(STRING_LITERAL);
				setState(4020);
				match(COLUMNS);
				setState(4021);
				match(LR_BRACKET);
				setState(4022);
				jsonColumnList();
				setState(4023);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOnEmptyContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(MySqlParser.EMPTY, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public JsonOnEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnEmpty; }
	}

	public final JsonOnEmptyContext jsonOnEmpty() throws RecognitionException {
		JsonOnEmptyContext _localctx = new JsonOnEmptyContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_jsonOnEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4031);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_LITERAL:
				{
				setState(4027);
				match(NULL_LITERAL);
				}
				break;
			case ERROR:
				{
				setState(4028);
				match(ERROR);
				}
				break;
			case DEFAULT:
				{
				setState(4029);
				match(DEFAULT);
				setState(4030);
				defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4033);
			match(ON);
			setState(4034);
			match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOnErrorContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public List<TerminalNode> ERROR() { return getTokens(MySqlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(MySqlParser.ERROR, i);
		}
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public JsonOnErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnError; }
	}

	public final JsonOnErrorContext jsonOnError() throws RecognitionException {
		JsonOnErrorContext _localctx = new JsonOnErrorContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_jsonOnError);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_LITERAL:
				{
				setState(4036);
				match(NULL_LITERAL);
				}
				break;
			case ERROR:
				{
				setState(4037);
				match(ERROR);
				}
				break;
			case DEFAULT:
				{
				setState(4038);
				match(DEFAULT);
				setState(4039);
				defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4042);
			match(ON);
			setState(4043);
			match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_selectSpec);
		int _la;
		try {
			setState(4053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(4045);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4046);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(4047);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4048);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4049);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4050);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4051);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(4052);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_selectElements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				{
				setState(4055);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(4056);
				selectElement();
				}
				break;
			}
			setState(4063);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4059);
					match(COMMA);
					setState(4060);
					selectElement();
					}
					} 
				}
				setState(4065);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_selectElement);
		int _la;
		try {
			setState(4095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4066);
				fullId();
				setState(4067);
				match(DOT);
				setState(4068);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4070);
				fullColumnName();
				setState(4075);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
				case 1:
					{
					setState(4072);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4071);
						match(AS);
						}
					}

					setState(4074);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4077);
				functionCall();
				setState(4082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(4079);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4078);
						match(AS);
						}
					}

					setState(4081);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4086);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(4084);
					match(LOCAL_ID);
					setState(4085);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(4088);
				expression(0);
				setState(4093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
				case 1:
					{
					setState(4090);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(4089);
						match(AS);
						}
					}

					setState(4092);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_selectIntoExpression);
		int _la;
		try {
			setState(4133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4097);
				match(INTO);
				setState(4098);
				assignmentField();
				setState(4103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4099);
					match(COMMA);
					setState(4100);
					assignmentField();
					}
					}
					setState(4105);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4106);
				match(INTO);
				setState(4107);
				match(DUMPFILE);
				setState(4108);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(4109);
				match(INTO);
				setState(4110);
				match(OUTFILE);
				setState(4111);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(4115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(4112);
					match(CHARACTER);
					setState(4113);
					match(SET);
					setState(4114);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(4123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(4117);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4119); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4118);
						selectFieldsInto();
						}
						}
						setState(4121); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(4131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(4125);
					match(LINES);
					setState(4127); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4126);
						selectLinesInto();
						}
						}
						setState(4129); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_selectFieldsInto);
		int _la;
		try {
			setState(4147);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4135);
				match(TERMINATED);
				setState(4136);
				match(BY);
				setState(4137);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(4138);
					match(OPTIONALLY);
					}
				}

				setState(4141);
				match(ENCLOSED);
				setState(4142);
				match(BY);
				setState(4143);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(4144);
				match(ESCAPED);
				setState(4145);
				match(BY);
				setState(4146);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_selectLinesInto);
		try {
			setState(4155);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4149);
				match(STARTING);
				setState(4150);
				match(BY);
				setState(4151);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(4152);
				match(TERMINATED);
				setState(4153);
				match(BY);
				setState(4154);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4157);
				match(FROM);
				setState(4158);
				tableSources();
				}
			}

			setState(4163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4161);
				match(WHERE);
				setState(4162);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_groupByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4165);
			match(GROUP);
			setState(4166);
			match(BY);
			setState(4167);
			groupByItem();
			setState(4172);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,611,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4168);
					match(COMMA);
					setState(4169);
					groupByItem();
					}
					} 
				}
				setState(4174);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,611,_ctx);
			}
			setState(4177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				{
				setState(4175);
				match(WITH);
				setState(4176);
				match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4179);
			match(HAVING);
			setState(4180);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(MySqlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(MySqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(MySqlParser.AS, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4182);
			match(WINDOW);
			setState(4183);
			windowName();
			setState(4184);
			match(AS);
			setState(4185);
			match(LR_BRACKET);
			setState(4186);
			windowSpec();
			setState(4187);
			match(RR_BRACKET);
			setState(4197);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,613,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4188);
					match(COMMA);
					setState(4189);
					windowName();
					setState(4190);
					match(AS);
					setState(4191);
					match(LR_BRACKET);
					setState(4192);
					windowSpec();
					setState(4193);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4199);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,613,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4200);
			expression(0);
			setState(4202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
			case 1:
				{
				setState(4201);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4204);
			match(LIMIT);
			setState(4215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
			case 1:
				{
				setState(4208);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4205);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(4206);
					match(COMMA);
					}
					break;
				}
				setState(4210);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(4211);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(4212);
				match(OFFSET);
				setState(4213);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_limitClauseAtom);
		try {
			setState(4220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4217);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4218);
				mysqlVariable();
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case ENFORCED:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_QUERY_REWRITE:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ABORT_EXEMPT:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_EXEMPT:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TP_CONNECTION_ADMIN:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4219);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4222);
			match(START);
			setState(4223);
			match(TRANSACTION);
			setState(4232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				{
				setState(4224);
				transactionMode();
				setState(4229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4225);
					match(COMMA);
					setState(4226);
					transactionMode();
					}
					}
					setState(4231);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4234);
			match(BEGIN);
			setState(4236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4235);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4238);
			match(COMMIT);
			setState(4240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4239);
				match(WORK);
				}
			}

			setState(4247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4242);
				match(AND);
				setState(4244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4243);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(4246);
				match(CHAIN);
				}
			}

			setState(4253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				{
				setState(4250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4249);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(4252);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySqlParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4255);
			match(ROLLBACK);
			setState(4257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4256);
				match(WORK);
				}
			}

			setState(4264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(4259);
				match(AND);
				setState(4261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4260);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(4263);
				match(CHAIN);
				}
			}

			setState(4270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4266);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(4269);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4272);
			match(SAVEPOINT);
			setState(4273);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4275);
			match(ROLLBACK);
			setState(4277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(4276);
				match(WORK);
				}
			}

			setState(4279);
			match(TO);
			setState(4281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				setState(4280);
				match(SAVEPOINT);
				}
				break;
			}
			setState(4283);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(MySqlParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(RELEASE);
			setState(4286);
			match(SAVEPOINT);
			setState(4287);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public List<LockTableElementContext> lockTableElement() {
			return getRuleContexts(LockTableElementContext.class);
		}
		public LockTableElementContext lockTableElement(int i) {
			return getRuleContext(LockTableElementContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTables; }
	}

	public final LockTablesContext lockTables() throws RecognitionException {
		LockTablesContext _localctx = new LockTablesContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_lockTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4289);
			match(LOCK);
			setState(4290);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4291);
			lockTableElement();
			setState(4296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4292);
				match(COMMA);
				setState(4293);
				lockTableElement();
				}
				}
				setState(4298);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(4299);
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTables; }
	}

	public final UnlockTablesContext unlockTables() throws RecognitionException {
		UnlockTablesContext _localctx = new UnlockTablesContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_unlockTables);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4302);
			match(UNLOCK);
			setState(4303);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutocommitStatementContext extends ParserRuleContext {
		public Token autocommitValue;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutocommitStatement; }
	}

	public final SetAutocommitStatementContext setAutocommitStatement() throws RecognitionException {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_setAutocommitStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4305);
			match(SET);
			setState(4306);
			match(AUTOCOMMIT);
			setState(4307);
			match(EQUAL_SYMBOL);
			setState(4308);
			((SetAutocommitStatementContext)_localctx).autocommitValue = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				((SetAutocommitStatementContext)_localctx).autocommitValue = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTransactionStatementContext extends ParserRuleContext {
		public Token transactionContext;
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTransactionStatement; }
	}

	public final SetTransactionStatementContext setTransactionStatement() throws RecognitionException {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_setTransactionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4310);
			match(SET);
			setState(4312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(4311);
				((SetTransactionStatementContext)_localctx).transactionContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					((SetTransactionStatementContext)_localctx).transactionContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4314);
			match(TRANSACTION);
			setState(4315);
			transactionOption();
			setState(4320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4316);
				match(COMMA);
				setState(4317);
				transactionOption();
				}
				}
				setState(4322);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_transactionMode);
		try {
			setState(4330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4323);
				match(WITH);
				setState(4324);
				match(CONSISTENT);
				setState(4325);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4326);
				match(READ);
				setState(4327);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4328);
				match(READ);
				setState(4329);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableElementContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableElement; }
	}

	public final LockTableElementContext lockTableElement() throws RecognitionException {
		LockTableElementContext _localctx = new LockTableElementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_lockTableElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4332);
			tableName();
			setState(4337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(4334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4333);
					match(AS);
					}
				}

				setState(4336);
				uid();
				}
			}

			setState(4339);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_lockAction);
		int _la;
		try {
			setState(4349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(4341);
				match(READ);
				setState(4343);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(4342);
					match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(4345);
					match(LOW_PRIORITY);
					}
				}

				setState(4348);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySqlParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_transactionOption);
		try {
			setState(4358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4351);
				match(ISOLATION);
				setState(4352);
				match(LEVEL);
				setState(4353);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4354);
				match(READ);
				setState(4355);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4356);
				match(READ);
				setState(4357);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_transactionLevel);
		try {
			setState(4367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4360);
				match(REPEATABLE);
				setState(4361);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4362);
				match(READ);
				setState(4363);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4364);
				match(READ);
				setState(4365);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4366);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4369);
			match(CHANGE);
			setState(4370);
			match(MASTER);
			setState(4371);
			match(TO);
			setState(4372);
			masterOption();
			setState(4377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4373);
				match(COMMA);
				setState(4374);
				masterOption();
				}
				}
				setState(4379);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4381);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4380);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySqlParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4383);
			match(CHANGE);
			setState(4384);
			match(REPLICATION);
			setState(4385);
			match(FILTER);
			setState(4386);
			replicationFilter();
			setState(4391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4387);
				match(COMMA);
				setState(4388);
				replicationFilter();
				}
				}
				setState(4393);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public Token fileName;
		public Token timeValue;
		public TerminalNode PURGE() { return getToken(MySqlParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(MySqlParser.BEFORE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4394);
			match(PURGE);
			setState(4395);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4396);
			match(LOGS);
			setState(4401);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(4397);
				match(TO);
				setState(4398);
				((PurgeBinaryLogsContext)_localctx).fileName = match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				setState(4399);
				match(BEFORE);
				setState(4400);
				((PurgeBinaryLogsContext)_localctx).timeValue = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4403);
			match(RESET);
			setState(4404);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4406);
			match(RESET);
			setState(4407);
			match(SLAVE);
			setState(4409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(4408);
				match(ALL);
				}
			}

			setState(4412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4411);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_startSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4414);
			match(START);
			setState(4415);
			match(SLAVE);
			setState(4424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4416);
				threadType();
				setState(4421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4417);
					match(COMMA);
					setState(4418);
					threadType();
					}
					}
					setState(4423);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(4426);
				match(UNTIL);
				setState(4427);
				untilOption();
				}
			}

			setState(4433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				setState(4430);
				connectionOption();
				}
				}
				setState(4435);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4436);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4439);
			match(STOP);
			setState(4440);
			match(SLAVE);
			setState(4449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				setState(4441);
				threadType();
				setState(4446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4442);
					match(COMMA);
					setState(4443);
					threadType();
					}
					}
					setState(4448);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4451);
			match(START);
			setState(4452);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4454);
			match(STOP);
			setState(4455);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public Token boolVal;
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
	}
	public static class MasterUidListOptionContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_masterOption);
		int _la;
		try {
			setState(4486);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4457);
				stringMasterOption();
				setState(4458);
				match(EQUAL_SYMBOL);
				setState(4459);
				match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4461);
				decimalMasterOption();
				setState(4462);
				match(EQUAL_SYMBOL);
				setState(4463);
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4465);
				boolMasterOption();
				setState(4466);
				match(EQUAL_SYMBOL);
				setState(4467);
				((MasterBoolOptionContext)_localctx).boolVal = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4469);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(4470);
				match(EQUAL_SYMBOL);
				setState(4471);
				match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4472);
				match(IGNORE_SERVER_IDS);
				setState(4473);
				match(EQUAL_SYMBOL);
				setState(4474);
				match(LR_BRACKET);
				setState(4483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
					{
					setState(4475);
					uid();
					setState(4480);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4476);
						match(COMMA);
						setState(4477);
						uid();
						}
						}
						setState(4482);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4485);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(MySqlParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4488);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (MASTER_HOST - 482)) | (1L << (MASTER_LOG_FILE - 482)) | (1L << (MASTER_PASSWORD - 482)) | (1L << (MASTER_SSL_CA - 482)) | (1L << (MASTER_SSL_CAPATH - 482)) | (1L << (MASTER_SSL_CERT - 482)) | (1L << (MASTER_SSL_CIPHER - 482)) | (1L << (MASTER_SSL_CRL - 482)) | (1L << (MASTER_SSL_CRLPATH - 482)) | (1L << (MASTER_SSL_KEY - 482)) | (1L << (MASTER_TLS_VERSION - 482)) | (1L << (MASTER_USER - 482)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4490);
			_la = _input.LA(1);
			if ( !(((((_la - 479)) & ~0x3f) == 0 && ((1L << (_la - 479)) & ((1L << (MASTER_CONNECT_RETRY - 479)) | (1L << (MASTER_DELAY - 479)) | (1L << (MASTER_LOG_POS - 479)) | (1L << (MASTER_PORT - 479)) | (1L << (MASTER_RETRY_COUNT - 479)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4492);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4494);
			match(FOR);
			setState(4495);
			match(CHANNEL);
			setState(4496);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_replicationFilter);
		int _la;
		try {
			setState(4547);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4498);
				match(REPLICATE_DO_DB);
				setState(4499);
				match(EQUAL_SYMBOL);
				setState(4500);
				match(LR_BRACKET);
				setState(4501);
				uidList();
				setState(4502);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4504);
				match(REPLICATE_IGNORE_DB);
				setState(4505);
				match(EQUAL_SYMBOL);
				setState(4506);
				match(LR_BRACKET);
				setState(4507);
				uidList();
				setState(4508);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4510);
				match(REPLICATE_DO_TABLE);
				setState(4511);
				match(EQUAL_SYMBOL);
				setState(4512);
				match(LR_BRACKET);
				setState(4513);
				tables();
				setState(4514);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4516);
				match(REPLICATE_IGNORE_TABLE);
				setState(4517);
				match(EQUAL_SYMBOL);
				setState(4518);
				match(LR_BRACKET);
				setState(4519);
				tables();
				setState(4520);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4522);
				match(REPLICATE_WILD_DO_TABLE);
				setState(4523);
				match(EQUAL_SYMBOL);
				setState(4524);
				match(LR_BRACKET);
				setState(4525);
				simpleStrings();
				setState(4526);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4528);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(4529);
				match(EQUAL_SYMBOL);
				setState(4530);
				match(LR_BRACKET);
				setState(4531);
				simpleStrings();
				setState(4532);
				match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4534);
				match(REPLICATE_REWRITE_DB);
				setState(4535);
				match(EQUAL_SYMBOL);
				setState(4536);
				match(LR_BRACKET);
				setState(4537);
				tablePair();
				setState(4542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4538);
					match(COMMA);
					setState(4539);
					tablePair();
					}
					}
					setState(4544);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4545);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4549);
			match(LR_BRACKET);
			setState(4550);
			((TablePairContext)_localctx).firstTable = tableName();
			setState(4551);
			match(COMMA);
			setState(4552);
			((TablePairContext)_localctx).secondTable = tableName();
			setState(4553);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public GtuidSetContext gtuidSet() {
			return getRuleContext(GtuidSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_untilOption);
		int _la;
		try {
			setState(4575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4557);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4558);
				match(EQUAL_SYMBOL);
				setState(4559);
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4560);
				match(MASTER_LOG_FILE);
				setState(4561);
				match(EQUAL_SYMBOL);
				setState(4562);
				match(STRING_LITERAL);
				setState(4563);
				match(COMMA);
				setState(4564);
				match(MASTER_LOG_POS);
				setState(4565);
				match(EQUAL_SYMBOL);
				setState(4566);
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4567);
				match(RELAY_LOG_FILE);
				setState(4568);
				match(EQUAL_SYMBOL);
				setState(4569);
				match(STRING_LITERAL);
				setState(4570);
				match(COMMA);
				setState(4571);
				match(RELAY_LOG_POS);
				setState(4572);
				match(EQUAL_SYMBOL);
				setState(4573);
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4574);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptUser;
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public Token conOptPassword;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_connectionOption);
		try {
			setState(4589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4577);
				match(USER);
				setState(4578);
				match(EQUAL_SYMBOL);
				setState(4579);
				((UserConnectionOptionContext)_localctx).conOptUser = match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4580);
				match(PASSWORD);
				setState(4581);
				match(EQUAL_SYMBOL);
				setState(4582);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4583);
				match(DEFAULT_AUTH);
				setState(4584);
				match(EQUAL_SYMBOL);
				setState(4585);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4586);
				match(PLUGIN_DIR);
				setState(4587);
				match(EQUAL_SYMBOL);
				setState(4588);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtuidSetContext extends ParserRuleContext {
		public List<UuidSetContext> uuidSet() {
			return getRuleContexts(UuidSetContext.class);
		}
		public UuidSetContext uuidSet(int i) {
			return getRuleContext(UuidSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtuidSet; }
	}

	public final GtuidSetContext gtuidSet() throws RecognitionException {
		GtuidSetContext _localctx = new GtuidSetContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_gtuidSet);
		int _la;
		try {
			setState(4600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4591);
				uuidSet();
				setState(4596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4592);
					match(COMMA);
					setState(4593);
					uuidSet();
					}
					}
					setState(4598);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4599);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4602);
			match(XA);
			setState(4603);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4604);
			xid();
			setState(4606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				setState(4605);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4608);
			match(XA);
			setState(4609);
			match(END);
			setState(4610);
			xid();
			setState(4616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SUSPEND) {
				{
				setState(4611);
				match(SUSPEND);
				setState(4614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4612);
					match(FOR);
					setState(4613);
					match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4618);
			match(XA);
			setState(4619);
			match(PREPARE);
			setState(4620);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_xaCommitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4622);
			match(XA);
			setState(4623);
			match(COMMIT);
			setState(4624);
			xid();
			setState(4627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONE) {
				{
				setState(4625);
				match(ONE);
				setState(4626);
				match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4629);
			match(XA);
			setState(4630);
			match(ROLLBACK);
			setState(4631);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_xaRecoverWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4633);
			match(XA);
			setState(4634);
			match(RECOVER);
			setState(4637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERT) {
				{
				setState(4635);
				match(CONVERT);
				setState(4636);
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public Token query;
		public Token variable;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4639);
			match(PREPARE);
			setState(4640);
			uid();
			setState(4641);
			match(FROM);
			setState(4644);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				{
				setState(4642);
				((PrepareStatementContext)_localctx).query = match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				setState(4643);
				((PrepareStatementContext)_localctx).variable = match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4646);
			match(EXECUTE);
			setState(4647);
			uid();
			setState(4650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4648);
				match(USING);
				setState(4649);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4652);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4653);
			match(PREPARE);
			setState(4654);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineBodyContext extends ParserRuleContext {
		public BlockStatementContext blockStatement() {
			return getRuleContext(BlockStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineBody; }
	}

	public final RoutineBodyContext routineBody() throws RecognitionException {
		RoutineBodyContext _localctx = new RoutineBodyContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_routineBody);
		try {
			setState(4658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4656);
				blockStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4657);
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<DeclareVariableContext> declareVariable() {
			return getRuleContexts(DeclareVariableContext.class);
		}
		public DeclareVariableContext declareVariable(int i) {
			return getRuleContext(DeclareVariableContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<DeclareConditionContext> declareCondition() {
			return getRuleContexts(DeclareConditionContext.class);
		}
		public DeclareConditionContext declareCondition(int i) {
			return getRuleContext(DeclareConditionContext.class,i);
		}
		public List<DeclareCursorContext> declareCursor() {
			return getRuleContexts(DeclareCursorContext.class);
		}
		public DeclareCursorContext declareCursor(int i) {
			return getRuleContext(DeclareCursorContext.class,i);
		}
		public List<DeclareHandlerContext> declareHandler() {
			return getRuleContexts(DeclareHandlerContext.class);
		}
		public DeclareHandlerContext declareHandler(int i) {
			return getRuleContext(DeclareHandlerContext.class,i);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockStatement; }
	}

	public final BlockStatementContext blockStatement() throws RecognitionException {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4663);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				{
				setState(4660);
				uid();
				setState(4661);
				match(COLON_SYMB);
				}
				break;
			}
			setState(4665);
			match(BEGIN);
			setState(4671);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,676,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4666);
					declareVariable();
					setState(4667);
					match(SEMI);
					}
					} 
				}
				setState(4673);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,676,_ctx);
			}
			setState(4679);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,677,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4674);
					declareCondition();
					setState(4675);
					match(SEMI);
					}
					} 
				}
				setState(4681);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,677,_ctx);
			}
			setState(4687);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,678,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4682);
					declareCursor();
					setState(4683);
					match(SEMI);
					}
					} 
				}
				setState(4689);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,678,_ctx);
			}
			setState(4695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DECLARE) {
				{
				{
				setState(4690);
				declareHandler();
				setState(4691);
				match(SEMI);
				}
				}
				setState(4697);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4701);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,680,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4698);
					procedureSqlStatement();
					}
					} 
				}
				setState(4703);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,680,_ctx);
			}
			setState(4704);
			match(END);
			setState(4706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(4705);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(MySqlParser.CASE, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<CaseAlternativeContext> caseAlternative() {
			return getRuleContexts(CaseAlternativeContext.class);
		}
		public CaseAlternativeContext caseAlternative(int i) {
			return getRuleContext(CaseAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4708);
			match(CASE);
			setState(4711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				{
				setState(4709);
				uid();
				}
				break;
			case 2:
				{
				setState(4710);
				expression(0);
				}
				break;
			}
			setState(4714); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4713);
				caseAlternative();
				}
				}
				setState(4716); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4718);
				match(ELSE);
				setState(4720); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4719);
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4722); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,684,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4726);
			match(END);
			setState(4727);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public ProcedureSqlStatementContext procedureSqlStatement;
		public List<ProcedureSqlStatementContext> thenStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<ProcedureSqlStatementContext> elseStatements = new ArrayList<ProcedureSqlStatementContext>();
		public List<TerminalNode> IF() { return getTokens(MySqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(MySqlParser.IF, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<ElifAlternativeContext> elifAlternative() {
			return getRuleContexts(ElifAlternativeContext.class);
		}
		public ElifAlternativeContext elifAlternative(int i) {
			return getRuleContext(ElifAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4729);
			match(IF);
			setState(4730);
			expression(0);
			setState(4731);
			match(THEN);
			setState(4733); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4732);
					((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
					((IfStatementContext)_localctx).thenStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4735); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,686,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4737);
				elifAlternative();
				}
				}
				setState(4742);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4743);
				match(ELSE);
				setState(4745); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4744);
						((IfStatementContext)_localctx).procedureSqlStatement = procedureSqlStatement();
						((IfStatementContext)_localctx).elseStatements.add(((IfStatementContext)_localctx).procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4747); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,688,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4751);
			match(END);
			setState(4752);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(MySqlParser.ITERATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4754);
			match(ITERATE);
			setState(4755);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(MySqlParser.LEAVE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4757);
			match(LEAVE);
			setState(4758);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(MySqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(MySqlParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(4760);
				uid();
				setState(4761);
				match(COLON_SYMB);
				}
			}

			setState(4765);
			match(LOOP);
			setState(4767); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4766);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4769); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,691,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4771);
			match(END);
			setState(4772);
			match(LOOP);
			setState(4774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(4773);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(MySqlParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(MySqlParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(4776);
				uid();
				setState(4777);
				match(COLON_SYMB);
				}
			}

			setState(4781);
			match(REPEAT);
			setState(4783); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4782);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4785); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,694,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4787);
			match(UNTIL);
			setState(4788);
			expression(0);
			setState(4789);
			match(END);
			setState(4790);
			match(REPEAT);
			setState(4792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(4791);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4794);
			match(RETURN);
			setState(4795);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(MySqlParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(MySqlParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode COLON_SYMB() { return getToken(MySqlParser.COLON_SYMB, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(4797);
				uid();
				setState(4798);
				match(COLON_SYMB);
				}
			}

			setState(4802);
			match(WHILE);
			setState(4803);
			expression(0);
			setState(4804);
			match(DO);
			setState(4806); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4805);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4808); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,697,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(4810);
			match(END);
			setState(4811);
			match(WHILE);
			setState(4813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IF - 73)) | (1L << (IGNORED - 73)) | (1L << (INSERT - 73)) | (1L << (LATERAL - 73)) | (1L << (LEFT - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (REPLACE - 141)) | (1L << (RIGHT - 141)) | (1L << (SCHEMA - 141)) | (1L << (SKIP_QUERY_REWRITE - 141)) | (1L << (STACKED - 141)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (BINARY - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)) | (1L << (SERIAL - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (NESTED - 281)) | (1L << (ORDINALITY - 281)) | (1L << (PATH - 281)) | (1L << (AVG - 281)) | (1L << (BIT_AND - 281)) | (1L << (BIT_OR - 281)) | (1L << (BIT_XOR - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (GROUP_CONCAT - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (MAX - 281)) | (1L << (MIN - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (STD - 281)) | (1L << (STDDEV - 281)) | (1L << (STDDEV_POP - 281)) | (1L << (STDDEV_SAMP - 281)) | (1L << (SUM - 281)) | (1L << (VAR_POP - 281)) | (1L << (VAR_SAMP - 281)) | (1L << (VARIANCE - 281)) | (1L << (CURRENT_DATE - 281)) | (1L << (CURRENT_TIME - 281)) | (1L << (CURRENT_TIMESTAMP - 281)) | (1L << (LOCALTIME - 281)) | (1L << (CURDATE - 281)) | (1L << (CURTIME - 281)) | (1L << (DATE_ADD - 281)) | (1L << (DATE_SUB - 281)) | (1L << (LOCALTIMESTAMP - 281)) | (1L << (NOW - 281)) | (1L << (POSITION - 281)) | (1L << (SUBSTR - 281)) | (1L << (SUBSTRING - 281)) | (1L << (SYSDATE - 281)) | (1L << (TRIM - 281)) | (1L << (UTC_DATE - 281)) | (1L << (UTC_TIME - 281)) | (1L << (UTC_TIMESTAMP - 281)) | (1L << (ACCOUNT - 281)) | (1L << (ACTION - 281)) | (1L << (AFTER - 281)) | (1L << (AGGREGATE - 281)) | (1L << (ALGORITHM - 281)) | (1L << (ANY - 281)) | (1L << (AT - 281)) | (1L << (AUTHORS - 281)) | (1L << (AUTOCOMMIT - 281)) | (1L << (AUTOEXTEND_SIZE - 281)) | (1L << (AUTO_INCREMENT - 281)) | (1L << (AVG_ROW_LENGTH - 281)) | (1L << (BEGIN - 281)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (BINLOG - 345)) | (1L << (BIT - 345)) | (1L << (BLOCK - 345)) | (1L << (BOOL - 345)) | (1L << (BOOLEAN - 345)) | (1L << (BTREE - 345)) | (1L << (CACHE - 345)) | (1L << (CASCADED - 345)) | (1L << (CHAIN - 345)) | (1L << (CHANGED - 345)) | (1L << (CHANNEL - 345)) | (1L << (CHECKSUM - 345)) | (1L << (PAGE_CHECKSUM - 345)) | (1L << (CIPHER - 345)) | (1L << (CLASS_ORIGIN - 345)) | (1L << (CLIENT - 345)) | (1L << (CLOSE - 345)) | (1L << (CLUSTERING - 345)) | (1L << (COALESCE - 345)) | (1L << (CODE - 345)) | (1L << (COLUMNS - 345)) | (1L << (COLUMN_FORMAT - 345)) | (1L << (COLUMN_NAME - 345)) | (1L << (COMMENT - 345)) | (1L << (COMMIT - 345)) | (1L << (COMPACT - 345)) | (1L << (COMPLETION - 345)) | (1L << (COMPRESSED - 345)) | (1L << (COMPRESSION - 345)) | (1L << (CONCURRENT - 345)) | (1L << (CONNECT - 345)) | (1L << (CONNECTION - 345)) | (1L << (CONSISTENT - 345)) | (1L << (CONSTRAINT_CATALOG - 345)) | (1L << (CONSTRAINT_SCHEMA - 345)) | (1L << (CONSTRAINT_NAME - 345)) | (1L << (CONTAINS - 345)) | (1L << (CONTEXT - 345)) | (1L << (CONTRIBUTORS - 345)) | (1L << (COPY - 345)) | (1L << (CPU - 345)) | (1L << (CURSOR_NAME - 345)) | (1L << (DATA - 345)) | (1L << (DATAFILE - 345)) | (1L << (DEALLOCATE - 345)) | (1L << (DEFAULT_AUTH - 345)) | (1L << (DEFINER - 345)) | (1L << (DELAY_KEY_WRITE - 345)) | (1L << (DES_KEY_FILE - 345)) | (1L << (DIRECTORY - 345)) | (1L << (DISABLE - 345)) | (1L << (DISCARD - 345)) | (1L << (DISK - 345)) | (1L << (DO - 345)) | (1L << (DUMPFILE - 345)) | (1L << (DUPLICATE - 345)) | (1L << (DYNAMIC - 345)) | (1L << (ENABLE - 345)) | (1L << (ENCRYPTION - 345)) | (1L << (END - 345)) | (1L << (ENDS - 345)))) != 0) || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ENGINES - 409)) | (1L << (ERROR - 409)) | (1L << (ERRORS - 409)) | (1L << (ESCAPE - 409)) | (1L << (EVEN - 409)) | (1L << (EVENT - 409)) | (1L << (EVENTS - 409)) | (1L << (EVERY - 409)) | (1L << (EXCHANGE - 409)) | (1L << (EXCLUSIVE - 409)) | (1L << (EXPIRE - 409)) | (1L << (EXPORT - 409)) | (1L << (EXTENDED - 409)) | (1L << (EXTENT_SIZE - 409)) | (1L << (FAILED_LOGIN_ATTEMPTS - 409)) | (1L << (FAST - 409)) | (1L << (FAULTS - 409)) | (1L << (FIELDS - 409)) | (1L << (FILE_BLOCK_SIZE - 409)) | (1L << (FILTER - 409)) | (1L << (FIRST - 409)) | (1L << (FIXED - 409)) | (1L << (FLUSH - 409)) | (1L << (FOLLOWS - 409)) | (1L << (FOUND - 409)) | (1L << (FULL - 409)) | (1L << (FUNCTION - 409)) | (1L << (GENERAL - 409)) | (1L << (GLOBAL - 409)) | (1L << (GRANTS - 409)) | (1L << (GROUP_REPLICATION - 409)) | (1L << (HANDLER - 409)) | (1L << (HASH - 409)) | (1L << (HELP - 409)) | (1L << (HISTORY - 409)) | (1L << (HOST - 409)) | (1L << (HOSTS - 409)) | (1L << (IDENTIFIED - 409)) | (1L << (IGNORE_SERVER_IDS - 409)) | (1L << (IMPORT - 409)) | (1L << (INDEXES - 409)) | (1L << (INITIAL_SIZE - 409)) | (1L << (INPLACE - 409)) | (1L << (INSERT_METHOD - 409)) | (1L << (INSTALL - 409)) | (1L << (INSTANCE - 409)) | (1L << (INSTANT - 409)) | (1L << (INVISIBLE - 409)) | (1L << (INVOKER - 409)) | (1L << (IO - 409)) | (1L << (IO_THREAD - 409)) | (1L << (IPC - 409)) | (1L << (ISOLATION - 409)) | (1L << (ISSUER - 409)) | (1L << (JSON - 409)) | (1L << (KEY_BLOCK_SIZE - 409)) | (1L << (LANGUAGE - 409)) | (1L << (LAST - 409)) | (1L << (LEAVES - 409)) | (1L << (LESS - 409)) | (1L << (LEVEL - 409)))) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (LIST - 473)) | (1L << (LOCAL - 473)) | (1L << (LOGFILE - 473)) | (1L << (LOGS - 473)) | (1L << (MASTER - 473)) | (1L << (MASTER_AUTO_POSITION - 473)) | (1L << (MASTER_CONNECT_RETRY - 473)) | (1L << (MASTER_DELAY - 473)) | (1L << (MASTER_HEARTBEAT_PERIOD - 473)) | (1L << (MASTER_HOST - 473)) | (1L << (MASTER_LOG_FILE - 473)) | (1L << (MASTER_LOG_POS - 473)) | (1L << (MASTER_PASSWORD - 473)) | (1L << (MASTER_PORT - 473)) | (1L << (MASTER_RETRY_COUNT - 473)) | (1L << (MASTER_SSL - 473)) | (1L << (MASTER_SSL_CA - 473)) | (1L << (MASTER_SSL_CAPATH - 473)) | (1L << (MASTER_SSL_CERT - 473)) | (1L << (MASTER_SSL_CIPHER - 473)) | (1L << (MASTER_SSL_CRL - 473)) | (1L << (MASTER_SSL_CRLPATH - 473)) | (1L << (MASTER_SSL_KEY - 473)) | (1L << (MASTER_TLS_VERSION - 473)) | (1L << (MASTER_USER - 473)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 473)) | (1L << (MAX_QUERIES_PER_HOUR - 473)) | (1L << (MAX_ROWS - 473)) | (1L << (MAX_SIZE - 473)) | (1L << (MAX_UPDATES_PER_HOUR - 473)) | (1L << (MAX_USER_CONNECTIONS - 473)) | (1L << (MEDIUM - 473)) | (1L << (MEMBER - 473)) | (1L << (MERGE - 473)) | (1L << (MESSAGE_TEXT - 473)) | (1L << (MID - 473)) | (1L << (MIGRATE - 473)) | (1L << (MIN_ROWS - 473)) | (1L << (MODE - 473)) | (1L << (MODIFY - 473)) | (1L << (MUTEX - 473)) | (1L << (MYSQL - 473)) | (1L << (MYSQL_ERRNO - 473)) | (1L << (NAME - 473)) | (1L << (NAMES - 473)) | (1L << (NCHAR - 473)) | (1L << (NEVER - 473)) | (1L << (NEXT - 473)) | (1L << (NO - 473)) | (1L << (NOCOPY - 473)) | (1L << (NOWAIT - 473)) | (1L << (NODEGROUP - 473)) | (1L << (NONE - 473)) | (1L << (ODBC - 473)) | (1L << (OFFLINE - 473)) | (1L << (OFFSET - 473)) | (1L << (OF - 473)) | (1L << (OJ - 473)) | (1L << (OLD_PASSWORD - 473)) | (1L << (ONE - 473)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (ONLINE - 537)) | (1L << (ONLY - 537)) | (1L << (OPEN - 537)) | (1L << (OPTIMIZER_COSTS - 537)) | (1L << (OPTIONS - 537)) | (1L << (OWNER - 537)) | (1L << (PACK_KEYS - 537)) | (1L << (PAGE - 537)) | (1L << (PARSER - 537)) | (1L << (PARTIAL - 537)) | (1L << (PARTITIONING - 537)) | (1L << (PARTITIONS - 537)) | (1L << (PASSWORD - 537)) | (1L << (PASSWORD_LOCK_TIME - 537)) | (1L << (PHASE - 537)) | (1L << (PLUGIN - 537)) | (1L << (PLUGIN_DIR - 537)) | (1L << (PLUGINS - 537)) | (1L << (PORT - 537)) | (1L << (PRECEDES - 537)) | (1L << (PREPARE - 537)) | (1L << (PRESERVE - 537)) | (1L << (PREV - 537)) | (1L << (PROCESSLIST - 537)) | (1L << (PROFILE - 537)) | (1L << (PROFILES - 537)) | (1L << (PROXY - 537)) | (1L << (QUERY - 537)) | (1L << (QUICK - 537)) | (1L << (REBUILD - 537)) | (1L << (RECOVER - 537)) | (1L << (RECURSIVE - 537)) | (1L << (REDO_BUFFER_SIZE - 537)) | (1L << (REDUNDANT - 537)) | (1L << (RELAY - 537)) | (1L << (RELAY_LOG_FILE - 537)) | (1L << (RELAY_LOG_POS - 537)) | (1L << (RELAYLOG - 537)) | (1L << (REMOVE - 537)) | (1L << (REORGANIZE - 537)) | (1L << (REPAIR - 537)) | (1L << (REPLICATE_DO_DB - 537)) | (1L << (REPLICATE_DO_TABLE - 537)) | (1L << (REPLICATE_IGNORE_DB - 537)) | (1L << (REPLICATE_IGNORE_TABLE - 537)) | (1L << (REPLICATE_REWRITE_DB - 537)) | (1L << (REPLICATE_WILD_DO_TABLE - 537)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 537)) | (1L << (REPLICATION - 537)) | (1L << (RESET - 537)) | (1L << (RESUME - 537)) | (1L << (RETURNED_SQLSTATE - 537)) | (1L << (RETURNS - 537)) | (1L << (REUSE - 537)) | (1L << (ROLE - 537)) | (1L << (ROLLBACK - 537)) | (1L << (ROLLUP - 537)) | (1L << (ROTATE - 537)) | (1L << (ROW - 537)))) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (ROWS - 601)) | (1L << (ROW_FORMAT - 601)) | (1L << (RTREE - 601)) | (1L << (SAVEPOINT - 601)) | (1L << (SCHEDULE - 601)) | (1L << (SECURITY - 601)) | (1L << (SERVER - 601)) | (1L << (SESSION - 601)) | (1L << (SHARE - 601)) | (1L << (SHARED - 601)) | (1L << (SIGNED - 601)) | (1L << (SIMPLE - 601)) | (1L << (SLAVE - 601)) | (1L << (SLOW - 601)) | (1L << (SNAPSHOT - 601)) | (1L << (SOCKET - 601)) | (1L << (SOME - 601)) | (1L << (SONAME - 601)) | (1L << (SOUNDS - 601)) | (1L << (SOURCE - 601)) | (1L << (SQL_AFTER_GTIDS - 601)) | (1L << (SQL_AFTER_MTS_GAPS - 601)) | (1L << (SQL_BEFORE_GTIDS - 601)) | (1L << (SQL_BUFFER_RESULT - 601)) | (1L << (SQL_CACHE - 601)) | (1L << (SQL_NO_CACHE - 601)) | (1L << (SQL_THREAD - 601)) | (1L << (START - 601)) | (1L << (STARTS - 601)) | (1L << (STATS_AUTO_RECALC - 601)) | (1L << (STATS_PERSISTENT - 601)) | (1L << (STATS_SAMPLE_PAGES - 601)) | (1L << (STATUS - 601)) | (1L << (STOP - 601)) | (1L << (STORAGE - 601)) | (1L << (STRING - 601)) | (1L << (SUBCLASS_ORIGIN - 601)) | (1L << (SUBJECT - 601)) | (1L << (SUBPARTITION - 601)) | (1L << (SUBPARTITIONS - 601)) | (1L << (SUSPEND - 601)) | (1L << (SWAPS - 601)) | (1L << (SWITCHES - 601)) | (1L << (TABLE_NAME - 601)) | (1L << (TABLESPACE - 601)) | (1L << (TABLE_TYPE - 601)) | (1L << (TEMPORARY - 601)) | (1L << (TEMPTABLE - 601)) | (1L << (THAN - 601)) | (1L << (TRADITIONAL - 601)) | (1L << (TRANSACTION - 601)) | (1L << (TRANSACTIONAL - 601)) | (1L << (TRIGGERS - 601)) | (1L << (TRUNCATE - 601)) | (1L << (UNBOUNDED - 601)) | (1L << (UNDEFINED - 601)) | (1L << (UNDOFILE - 601)) | (1L << (UNDO_BUFFER_SIZE - 601)) | (1L << (UNINSTALL - 601)) | (1L << (UNKNOWN - 601)) | (1L << (UNTIL - 601)) | (1L << (UPGRADE - 601)))) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & ((1L << (USER - 665)) | (1L << (USE_FRM - 665)) | (1L << (USER_RESOURCES - 665)) | (1L << (VALIDATION - 665)) | (1L << (VALUE - 665)) | (1L << (VARIABLES - 665)) | (1L << (VIEW - 665)) | (1L << (VIRTUAL - 665)) | (1L << (VISIBLE - 665)) | (1L << (WAIT - 665)) | (1L << (WARNINGS - 665)) | (1L << (WITHOUT - 665)) | (1L << (WORK - 665)) | (1L << (WRAPPER - 665)) | (1L << (X509 - 665)) | (1L << (XA - 665)) | (1L << (XML - 665)) | (1L << (EUR - 665)) | (1L << (USA - 665)) | (1L << (JIS - 665)) | (1L << (ISO - 665)) | (1L << (INTERNAL - 665)) | (1L << (QUARTER - 665)) | (1L << (MONTH - 665)) | (1L << (DAY - 665)) | (1L << (HOUR - 665)) | (1L << (MINUTE - 665)) | (1L << (WEEK - 665)) | (1L << (SECOND - 665)) | (1L << (MICROSECOND - 665)) | (1L << (ADMIN - 665)) | (1L << (AUDIT_ABORT_EXEMPT - 665)) | (1L << (AUDIT_ADMIN - 665)) | (1L << (BACKUP_ADMIN - 665)) | (1L << (BINLOG_ADMIN - 665)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 665)) | (1L << (CLONE_ADMIN - 665)) | (1L << (CONNECTION_ADMIN - 665)) | (1L << (ENCRYPTION_KEY_ADMIN - 665)) | (1L << (EXECUTE - 665)) | (1L << (FILE - 665)) | (1L << (FIREWALL_ADMIN - 665)) | (1L << (FIREWALL_EXEMPT - 665)) | (1L << (FIREWALL_USER - 665)) | (1L << (GROUP_REPLICATION_ADMIN - 665)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 665)) | (1L << (INVOKE - 665)) | (1L << (LAMBDA - 665)) | (1L << (NDB_STORED_USER - 665)) | (1L << (PASSWORDLESS_USER_ADMIN - 665)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 665)) | (1L << (PRIVILEGES - 665)) | (1L << (PROCESS - 665)) | (1L << (RELOAD - 665)) | (1L << (REPLICATION_APPLIER - 665)) | (1L << (REPLICATION_SLAVE_ADMIN - 665)))) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & ((1L << (RESOURCE_GROUP_ADMIN - 729)) | (1L << (RESOURCE_GROUP_USER - 729)) | (1L << (ROLE_ADMIN - 729)) | (1L << (ROUTINE - 729)) | (1L << (S3 - 729)) | (1L << (SESSION_VARIABLES_ADMIN - 729)) | (1L << (SET_USER_ID - 729)) | (1L << (SHOW_ROUTINE - 729)) | (1L << (SHUTDOWN - 729)) | (1L << (SUPER - 729)) | (1L << (SYSTEM_VARIABLES_ADMIN - 729)) | (1L << (TABLES - 729)) | (1L << (TABLE_ENCRYPTION_ADMIN - 729)) | (1L << (VERSION_TOKEN_ADMIN - 729)) | (1L << (XA_RECOVER_ADMIN - 729)) | (1L << (ARMSCII8 - 729)) | (1L << (ASCII - 729)) | (1L << (BIG5 - 729)) | (1L << (CP1250 - 729)) | (1L << (CP1251 - 729)) | (1L << (CP1256 - 729)) | (1L << (CP1257 - 729)) | (1L << (CP850 - 729)) | (1L << (CP852 - 729)) | (1L << (CP866 - 729)) | (1L << (CP932 - 729)) | (1L << (DEC8 - 729)) | (1L << (EUCJPMS - 729)) | (1L << (EUCKR - 729)) | (1L << (GB18030 - 729)) | (1L << (GB2312 - 729)) | (1L << (GBK - 729)) | (1L << (GEOSTD8 - 729)) | (1L << (GREEK - 729)) | (1L << (HEBREW - 729)) | (1L << (HP8 - 729)) | (1L << (KEYBCS2 - 729)) | (1L << (KOI8R - 729)) | (1L << (KOI8U - 729)) | (1L << (LATIN1 - 729)) | (1L << (LATIN2 - 729)) | (1L << (LATIN5 - 729)) | (1L << (LATIN7 - 729)) | (1L << (MACCE - 729)) | (1L << (MACROMAN - 729)) | (1L << (SJIS - 729)) | (1L << (SWE7 - 729)) | (1L << (TIS620 - 729)) | (1L << (UCS2 - 729)) | (1L << (UJIS - 729)) | (1L << (UTF16 - 729)) | (1L << (UTF16LE - 729)) | (1L << (UTF32 - 729)) | (1L << (UTF8 - 729)) | (1L << (UTF8MB3 - 729)) | (1L << (UTF8MB4 - 729)) | (1L << (ARCHIVE - 729)) | (1L << (BLACKHOLE - 729)) | (1L << (CSV - 729)) | (1L << (FEDERATED - 729)) | (1L << (INNODB - 729)) | (1L << (MEMORY - 729)) | (1L << (MRG_MYISAM - 729)))) != 0) || ((((_la - 793)) & ~0x3f) == 0 && ((1L << (_la - 793)) & ((1L << (MYISAM - 793)) | (1L << (NDB - 793)) | (1L << (NDBCLUSTER - 793)) | (1L << (PERFORMANCE_SCHEMA - 793)) | (1L << (TOKUDB - 793)) | (1L << (REPEATABLE - 793)) | (1L << (COMMITTED - 793)) | (1L << (UNCOMMITTED - 793)) | (1L << (SERIALIZABLE - 793)) | (1L << (GEOMETRYCOLLECTION - 793)) | (1L << (LINESTRING - 793)) | (1L << (MULTILINESTRING - 793)) | (1L << (MULTIPOINT - 793)) | (1L << (MULTIPOLYGON - 793)) | (1L << (POINT - 793)) | (1L << (POLYGON - 793)) | (1L << (ABS - 793)) | (1L << (ACOS - 793)) | (1L << (ADDDATE - 793)) | (1L << (ADDTIME - 793)) | (1L << (AES_DECRYPT - 793)) | (1L << (AES_ENCRYPT - 793)) | (1L << (AREA - 793)) | (1L << (ASBINARY - 793)) | (1L << (ASIN - 793)) | (1L << (ASTEXT - 793)) | (1L << (ASWKB - 793)) | (1L << (ASWKT - 793)) | (1L << (ASYMMETRIC_DECRYPT - 793)) | (1L << (ASYMMETRIC_DERIVE - 793)) | (1L << (ASYMMETRIC_ENCRYPT - 793)) | (1L << (ASYMMETRIC_SIGN - 793)) | (1L << (ASYMMETRIC_VERIFY - 793)) | (1L << (ATAN - 793)) | (1L << (ATAN2 - 793)) | (1L << (BENCHMARK - 793)) | (1L << (BIN - 793)) | (1L << (BIT_COUNT - 793)) | (1L << (BIT_LENGTH - 793)) | (1L << (BUFFER - 793)) | (1L << (CATALOG_NAME - 793)) | (1L << (CEIL - 793)) | (1L << (CEILING - 793)) | (1L << (CENTROID - 793)) | (1L << (CHARACTER_LENGTH - 793)) | (1L << (CHARSET - 793)) | (1L << (CHAR_LENGTH - 793)) | (1L << (COERCIBILITY - 793)) | (1L << (COLLATION - 793)) | (1L << (COMPRESS - 793)) | (1L << (CONCAT - 793)) | (1L << (CONCAT_WS - 793)) | (1L << (CONNECTION_ID - 793)) | (1L << (CONV - 793)) | (1L << (CONVERT_TZ - 793)) | (1L << (COS - 793)) | (1L << (COT - 793)) | (1L << (CRC32 - 793)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 793)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 793)) | (1L << (CREATE_DH_PARAMETERS - 793)) | (1L << (CREATE_DIGEST - 793)))) != 0) || ((((_la - 857)) & ~0x3f) == 0 && ((1L << (_la - 857)) & ((1L << (CROSSES - 857)) | (1L << (DATEDIFF - 857)) | (1L << (DATE_FORMAT - 857)) | (1L << (DAYNAME - 857)) | (1L << (DAYOFMONTH - 857)) | (1L << (DAYOFWEEK - 857)) | (1L << (DAYOFYEAR - 857)) | (1L << (DECODE - 857)) | (1L << (DEGREES - 857)) | (1L << (DES_DECRYPT - 857)) | (1L << (DES_ENCRYPT - 857)) | (1L << (DIMENSION - 857)) | (1L << (DISJOINT - 857)) | (1L << (ELT - 857)) | (1L << (ENCODE - 857)) | (1L << (ENCRYPT - 857)) | (1L << (ENDPOINT - 857)) | (1L << (ENGINE_ATTRIBUTE - 857)) | (1L << (ENVELOPE - 857)) | (1L << (EQUALS - 857)) | (1L << (EXP - 857)) | (1L << (EXPORT_SET - 857)) | (1L << (EXTERIORRING - 857)) | (1L << (EXTRACTVALUE - 857)) | (1L << (FIELD - 857)) | (1L << (FIND_IN_SET - 857)) | (1L << (FLOOR - 857)) | (1L << (FORMAT - 857)) | (1L << (FOUND_ROWS - 857)) | (1L << (FROM_BASE64 - 857)) | (1L << (FROM_DAYS - 857)) | (1L << (FROM_UNIXTIME - 857)) | (1L << (GEOMCOLLFROMTEXT - 857)) | (1L << (GEOMCOLLFROMWKB - 857)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 857)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 857)) | (1L << (GEOMETRYFROMTEXT - 857)) | (1L << (GEOMETRYFROMWKB - 857)) | (1L << (GEOMETRYN - 857)) | (1L << (GEOMETRYTYPE - 857)) | (1L << (GEOMFROMTEXT - 857)) | (1L << (GEOMFROMWKB - 857)) | (1L << (GET_FORMAT - 857)) | (1L << (GET_LOCK - 857)) | (1L << (GLENGTH - 857)) | (1L << (GREATEST - 857)) | (1L << (GTID_SUBSET - 857)) | (1L << (GTID_SUBTRACT - 857)) | (1L << (HEX - 857)) | (1L << (IFNULL - 857)) | (1L << (INET6_ATON - 857)) | (1L << (INET6_NTOA - 857)) | (1L << (INET_ATON - 857)) | (1L << (INET_NTOA - 857)) | (1L << (INSTR - 857)) | (1L << (INTERIORRINGN - 857)) | (1L << (INTERSECTS - 857)) | (1L << (ISCLOSED - 857)) | (1L << (ISEMPTY - 857)) | (1L << (ISNULL - 857)) | (1L << (ISSIMPLE - 857)) | (1L << (IS_FREE_LOCK - 857)) | (1L << (IS_IPV4 - 857)) | (1L << (IS_IPV4_COMPAT - 857)))) != 0) || ((((_la - 921)) & ~0x3f) == 0 && ((1L << (_la - 921)) & ((1L << (IS_IPV4_MAPPED - 921)) | (1L << (IS_IPV6 - 921)) | (1L << (IS_USED_LOCK - 921)) | (1L << (LAST_INSERT_ID - 921)) | (1L << (LCASE - 921)) | (1L << (LEAST - 921)) | (1L << (LENGTH - 921)) | (1L << (LINEFROMTEXT - 921)) | (1L << (LINEFROMWKB - 921)) | (1L << (LINESTRINGFROMTEXT - 921)) | (1L << (LINESTRINGFROMWKB - 921)) | (1L << (LN - 921)) | (1L << (LOAD_FILE - 921)) | (1L << (LOCATE - 921)) | (1L << (LOG - 921)) | (1L << (LOG10 - 921)) | (1L << (LOG2 - 921)) | (1L << (LOWER - 921)) | (1L << (LPAD - 921)) | (1L << (LTRIM - 921)) | (1L << (MAKEDATE - 921)) | (1L << (MAKETIME - 921)) | (1L << (MAKE_SET - 921)) | (1L << (MASTER_POS_WAIT - 921)) | (1L << (MBRCONTAINS - 921)) | (1L << (MBRDISJOINT - 921)) | (1L << (MBREQUAL - 921)) | (1L << (MBRINTERSECTS - 921)) | (1L << (MBROVERLAPS - 921)) | (1L << (MBRTOUCHES - 921)) | (1L << (MBRWITHIN - 921)) | (1L << (MD5 - 921)) | (1L << (MLINEFROMTEXT - 921)) | (1L << (MLINEFROMWKB - 921)) | (1L << (MONTHNAME - 921)) | (1L << (MPOINTFROMTEXT - 921)) | (1L << (MPOINTFROMWKB - 921)) | (1L << (MPOLYFROMTEXT - 921)) | (1L << (MPOLYFROMWKB - 921)) | (1L << (MULTILINESTRINGFROMTEXT - 921)) | (1L << (MULTILINESTRINGFROMWKB - 921)) | (1L << (MULTIPOINTFROMTEXT - 921)) | (1L << (MULTIPOINTFROMWKB - 921)) | (1L << (MULTIPOLYGONFROMTEXT - 921)) | (1L << (MULTIPOLYGONFROMWKB - 921)) | (1L << (NAME_CONST - 921)) | (1L << (NULLIF - 921)) | (1L << (NUMGEOMETRIES - 921)) | (1L << (NUMINTERIORRINGS - 921)) | (1L << (NUMPOINTS - 921)) | (1L << (OCT - 921)) | (1L << (OCTET_LENGTH - 921)) | (1L << (ORD - 921)) | (1L << (OVERLAPS - 921)) | (1L << (PERIOD_ADD - 921)) | (1L << (PERIOD_DIFF - 921)) | (1L << (PI - 921)) | (1L << (POINTFROMTEXT - 921)) | (1L << (POINTFROMWKB - 921)) | (1L << (POINTN - 921)) | (1L << (POLYFROMTEXT - 921)) | (1L << (POLYFROMWKB - 921)) | (1L << (POLYGONFROMTEXT - 921)) | (1L << (POLYGONFROMWKB - 921)))) != 0) || ((((_la - 985)) & ~0x3f) == 0 && ((1L << (_la - 985)) & ((1L << (POW - 985)) | (1L << (POWER - 985)) | (1L << (QUOTE - 985)) | (1L << (RADIANS - 985)) | (1L << (RAND - 985)) | (1L << (RANDOM_BYTES - 985)) | (1L << (RELEASE_LOCK - 985)) | (1L << (REVERSE - 985)) | (1L << (ROUND - 985)) | (1L << (ROW_COUNT - 985)) | (1L << (RPAD - 985)) | (1L << (RTRIM - 985)) | (1L << (SEC_TO_TIME - 985)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 985)) | (1L << (SESSION_USER - 985)) | (1L << (SHA - 985)) | (1L << (SHA1 - 985)) | (1L << (SHA2 - 985)) | (1L << (SCHEMA_NAME - 985)) | (1L << (SIGN - 985)) | (1L << (SIN - 985)) | (1L << (SLEEP - 985)) | (1L << (SOUNDEX - 985)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 985)) | (1L << (SQRT - 985)) | (1L << (SRID - 985)) | (1L << (STARTPOINT - 985)) | (1L << (STRCMP - 985)) | (1L << (STR_TO_DATE - 985)) | (1L << (ST_AREA - 985)) | (1L << (ST_ASBINARY - 985)) | (1L << (ST_ASTEXT - 985)) | (1L << (ST_ASWKB - 985)) | (1L << (ST_ASWKT - 985)) | (1L << (ST_BUFFER - 985)) | (1L << (ST_CENTROID - 985)) | (1L << (ST_CONTAINS - 985)) | (1L << (ST_CROSSES - 985)) | (1L << (ST_DIFFERENCE - 985)) | (1L << (ST_DIMENSION - 985)) | (1L << (ST_DISJOINT - 985)) | (1L << (ST_DISTANCE - 985)) | (1L << (ST_ENDPOINT - 985)) | (1L << (ST_ENVELOPE - 985)) | (1L << (ST_EQUALS - 985)) | (1L << (ST_EXTERIORRING - 985)) | (1L << (ST_GEOMCOLLFROMTEXT - 985)) | (1L << (ST_GEOMCOLLFROMTXT - 985)) | (1L << (ST_GEOMCOLLFROMWKB - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 985)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 985)) | (1L << (ST_GEOMETRYFROMTEXT - 985)) | (1L << (ST_GEOMETRYFROMWKB - 985)) | (1L << (ST_GEOMETRYN - 985)) | (1L << (ST_GEOMETRYTYPE - 985)) | (1L << (ST_GEOMFROMTEXT - 985)) | (1L << (ST_GEOMFROMWKB - 985)) | (1L << (ST_INTERIORRINGN - 985)) | (1L << (ST_INTERSECTION - 985)) | (1L << (ST_INTERSECTS - 985)) | (1L << (ST_ISCLOSED - 985)) | (1L << (ST_ISEMPTY - 985)) | (1L << (ST_ISSIMPLE - 985)) | (1L << (ST_LINEFROMTEXT - 985)))) != 0) || ((((_la - 1049)) & ~0x3f) == 0 && ((1L << (_la - 1049)) & ((1L << (ST_LINEFROMWKB - 1049)) | (1L << (ST_LINESTRINGFROMTEXT - 1049)) | (1L << (ST_LINESTRINGFROMWKB - 1049)) | (1L << (ST_NUMGEOMETRIES - 1049)) | (1L << (ST_NUMINTERIORRING - 1049)) | (1L << (ST_NUMINTERIORRINGS - 1049)) | (1L << (ST_NUMPOINTS - 1049)) | (1L << (ST_OVERLAPS - 1049)) | (1L << (ST_POINTFROMTEXT - 1049)) | (1L << (ST_POINTFROMWKB - 1049)) | (1L << (ST_POINTN - 1049)) | (1L << (ST_POLYFROMTEXT - 1049)) | (1L << (ST_POLYFROMWKB - 1049)) | (1L << (ST_POLYGONFROMTEXT - 1049)) | (1L << (ST_POLYGONFROMWKB - 1049)) | (1L << (ST_SRID - 1049)) | (1L << (ST_STARTPOINT - 1049)) | (1L << (ST_SYMDIFFERENCE - 1049)) | (1L << (ST_TOUCHES - 1049)) | (1L << (ST_UNION - 1049)) | (1L << (ST_WITHIN - 1049)) | (1L << (ST_X - 1049)) | (1L << (ST_Y - 1049)) | (1L << (SUBDATE - 1049)) | (1L << (SUBSTRING_INDEX - 1049)) | (1L << (SUBTIME - 1049)) | (1L << (SYSTEM_USER - 1049)) | (1L << (TAN - 1049)) | (1L << (TIMEDIFF - 1049)) | (1L << (TIMESTAMPADD - 1049)) | (1L << (TIMESTAMPDIFF - 1049)) | (1L << (TIME_FORMAT - 1049)) | (1L << (TIME_TO_SEC - 1049)) | (1L << (TOUCHES - 1049)) | (1L << (TO_BASE64 - 1049)) | (1L << (TO_DAYS - 1049)) | (1L << (TO_SECONDS - 1049)) | (1L << (TP_CONNECTION_ADMIN - 1049)) | (1L << (UCASE - 1049)) | (1L << (UNCOMPRESS - 1049)) | (1L << (UNCOMPRESSED_LENGTH - 1049)) | (1L << (UNHEX - 1049)) | (1L << (UNIX_TIMESTAMP - 1049)) | (1L << (UPDATEXML - 1049)) | (1L << (UPPER - 1049)) | (1L << (UUID - 1049)) | (1L << (UUID_SHORT - 1049)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1049)) | (1L << (VERSION - 1049)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1049)) | (1L << (WEEKDAY - 1049)) | (1L << (WEEKOFYEAR - 1049)) | (1L << (WEIGHT_STRING - 1049)) | (1L << (WITHIN - 1049)) | (1L << (YEARWEEK - 1049)) | (1L << (Y_FUNCTION - 1049)) | (1L << (X_FUNCTION - 1049)))) != 0) || ((((_la - 1121)) & ~0x3f) == 0 && ((1L << (_la - 1121)) & ((1L << (MOD - 1121)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1121)) | (1L << (STRING_LITERAL - 1121)) | (1L << (ID - 1121)) | (1L << (REVERSE_QUOTE_ID - 1121)))) != 0)) {
				{
				setState(4812);
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(MySqlParser.FETCH, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_cursorStatement);
		int _la;
		try {
			setState(4830);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4815);
				match(CLOSE);
				setState(4816);
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4817);
				match(FETCH);
				setState(4822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
				case 1:
					{
					setState(4819);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4818);
						match(NEXT);
						}
					}

					setState(4821);
					match(FROM);
					}
					break;
				}
				setState(4824);
				uid();
				setState(4825);
				match(INTO);
				setState(4826);
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4828);
				match(OPEN);
				setState(4829);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4832);
			match(DECLARE);
			setState(4833);
			uidList();
			setState(4834);
			dataType();
			setState(4837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4835);
				match(DEFAULT);
				setState(4836);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_declareCondition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4839);
			match(DECLARE);
			setState(4840);
			uid();
			setState(4841);
			match(CONDITION);
			setState(4842);
			match(FOR);
			setState(4849);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				setState(4843);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				setState(4844);
				match(SQLSTATE);
				setState(4846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4845);
					match(VALUE);
					}
				}

				setState(4848);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MySqlParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4851);
			match(DECLARE);
			setState(4852);
			uid();
			setState(4853);
			match(CURSOR);
			setState(4854);
			match(FOR);
			setState(4855);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(MySqlParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public RoutineBodyContext routineBody() {
			return getRuleContext(RoutineBodyContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(MySqlParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(MySqlParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(MySqlParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4857);
			match(DECLARE);
			setState(4858);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4859);
			match(HANDLER);
			setState(4860);
			match(FOR);
			setState(4861);
			handlerConditionValue();
			setState(4866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4862);
				match(COMMA);
				setState(4863);
				handlerConditionValue();
				}
				}
				setState(4868);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4869);
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(MySqlParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(MySqlParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_handlerConditionValue);
		int _la;
		try {
			setState(4882);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4871);
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4872);
				match(SQLSTATE);
				setState(4874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4873);
					match(VALUE);
					}
				}

				setState(4876);
				match(STRING_LITERAL);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case ENFORCED:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_QUERY_REWRITE:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ABORT_EXEMPT:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_EXEMPT:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TP_CONNECTION_ADMIN:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4877);
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4878);
				match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4879);
				match(NOT);
				setState(4880);
				match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4881);
				match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureSqlStatementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public SqlStatementContext sqlStatement() {
			return getRuleContext(SqlStatementContext.class,0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSqlStatement; }
	}

	public final ProcedureSqlStatementContext procedureSqlStatement() throws RecognitionException {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_procedureSqlStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				setState(4884);
				compoundStatement();
				}
				break;
			case 2:
				{
				setState(4885);
				sqlStatement();
				}
				break;
			}
			setState(4888);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseAlternativeContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseAlternative; }
	}

	public final CaseAlternativeContext caseAlternative() throws RecognitionException {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_caseAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4890);
			match(WHEN);
			setState(4893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
			case 1:
				{
				setState(4891);
				constant();
				}
				break;
			case 2:
				{
				setState(4892);
				expression(0);
				}
				break;
			}
			setState(4895);
			match(THEN);
			setState(4897); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4896);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4899); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,710,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElifAlternativeContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(MySqlParser.ELSEIF, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<ProcedureSqlStatementContext> procedureSqlStatement() {
			return getRuleContexts(ProcedureSqlStatementContext.class);
		}
		public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return getRuleContext(ProcedureSqlStatementContext.class,i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elifAlternative; }
	}

	public final ElifAlternativeContext elifAlternative() throws RecognitionException {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_elifAlternative);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4901);
			match(ELSEIF);
			setState(4902);
			expression(0);
			setState(4903);
			match(THEN);
			setState(4905); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4904);
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4907); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,711,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
	 
		public AlterUserContext() { }
		public void copyFrom(AlterUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV80Context extends AlterUserContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(MySqlParser.ATTRIBUTE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public AlterUserMysqlV80Context(AlterUserContext ctx) { copyFrom(ctx); }
	}
	public static class AlterUserMysqlV56Context extends AlterUserContext {
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext ctx) { copyFrom(ctx); }
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_alterUser);
		int _la;
		try {
			setState(4982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4909);
				match(ALTER);
				setState(4910);
				match(USER);
				setState(4911);
				userSpecification();
				setState(4916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4912);
					match(COMMA);
					setState(4913);
					userSpecification();
					}
					}
					setState(4918);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV80Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4919);
				match(ALTER);
				setState(4920);
				match(USER);
				setState(4922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4921);
					ifExists();
					}
				}

				setState(4924);
				userAuthOption();
				setState(4929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4925);
					match(COMMA);
					setState(4926);
					userAuthOption();
					}
					}
					setState(4931);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4932);
					match(REQUIRE);
					setState(4944);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4933);
						((AlterUserMysqlV80Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4934);
						tlsOption();
						setState(4941);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(4936);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4935);
								match(AND);
								}
							}

							setState(4938);
							tlsOption();
							}
							}
							setState(4943);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4954);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
				case 1:
					{
					setState(4948);
					match(WITH);
					setState(4950); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4949);
						userResourceOption();
						}
						}
						setState(4952); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 498)) | (1L << (MAX_QUERIES_PER_HOUR - 498)) | (1L << (MAX_UPDATES_PER_HOUR - 498)) | (1L << (MAX_USER_CONNECTIONS - 498)))) != 0) );
					}
					break;
				}
				setState(4960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==FAILED_LOGIN_ATTEMPTS || _la==PASSWORD || _la==PASSWORD_LOCK_TIME) {
					{
					setState(4958);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FAILED_LOGIN_ATTEMPTS:
					case PASSWORD:
					case PASSWORD_LOCK_TIME:
						{
						setState(4956);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4957);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4962);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4967);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMENT:
					{
					setState(4963);
					match(COMMENT);
					setState(4964);
					match(STRING_LITERAL);
					}
					break;
				case ATTRIBUTE:
					{
					setState(4965);
					match(ATTRIBUTE);
					setState(4966);
					match(STRING_LITERAL);
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case WITH:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterUserMysqlV80Context(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4969);
				match(ALTER);
				setState(4970);
				match(USER);
				setState(4972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
				case 1:
					{
					setState(4971);
					ifExists();
					}
					break;
				}
				setState(4976);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(4974);
					userName();
					}
					break;
				case 2:
					{
					setState(4975);
					uid();
					}
					break;
				}
				setState(4978);
				match(DEFAULT);
				setState(4979);
				match(ROLE);
				setState(4980);
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
	 
		public CreateUserContext() { }
		public void copyFrom(CreateUserContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CreateUserMysqlV56Context extends CreateUserContext {
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext ctx) { copyFrom(ctx); }
	}
	public static class CreateUserMysqlV80Context extends CreateUserContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(MySqlParser.ATTRIBUTE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public CreateUserMysqlV80Context(CreateUserContext ctx) { copyFrom(ctx); }
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_createUser);
		int _la;
		try {
			setState(5049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4984);
				match(CREATE);
				setState(4985);
				match(USER);
				setState(4986);
				userAuthOption();
				setState(4991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4987);
					match(COMMA);
					setState(4988);
					userAuthOption();
					}
					}
					setState(4993);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV80Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4994);
				match(CREATE);
				setState(4995);
				match(USER);
				setState(4997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4996);
					ifNotExists();
					}
				}

				setState(4999);
				userAuthOption();
				setState(5004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5000);
					match(COMMA);
					setState(5001);
					userAuthOption();
					}
					}
					setState(5006);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(5007);
					match(DEFAULT);
					setState(5008);
					match(ROLE);
					setState(5009);
					roleOption();
					}
				}

				setState(5026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(5012);
					match(REQUIRE);
					setState(5024);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(5013);
						((CreateUserMysqlV80Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(5014);
						tlsOption();
						setState(5021);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(5016);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(5015);
								match(AND);
								}
							}

							setState(5018);
							tlsOption();
							}
							}
							setState(5023);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(5034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5028);
					match(WITH);
					setState(5030); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(5029);
						userResourceOption();
						}
						}
						setState(5032); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 498)) | (1L << (MAX_QUERIES_PER_HOUR - 498)) | (1L << (MAX_UPDATES_PER_HOUR - 498)) | (1L << (MAX_USER_CONNECTIONS - 498)))) != 0) );
					}
					break;
				}
				setState(5040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT || _la==FAILED_LOGIN_ATTEMPTS || _la==PASSWORD || _la==PASSWORD_LOCK_TIME) {
					{
					setState(5038);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FAILED_LOGIN_ATTEMPTS:
					case PASSWORD:
					case PASSWORD_LOCK_TIME:
						{
						setState(5036);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(5037);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(5042);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5047);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMENT:
					{
					setState(5043);
					match(COMMENT);
					setState(5044);
					match(STRING_LITERAL);
					}
					break;
				case ATTRIBUTE:
					{
					setState(5045);
					match(ATTRIBUTE);
					setState(5046);
					match(STRING_LITERAL);
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case WITH:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_dropUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5051);
			match(DROP);
			setState(5052);
			match(USER);
			setState(5054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5053);
				ifExists();
				}
			}

			setState(5056);
			userName();
			setState(5061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5057);
				match(COMMA);
				setState(5058);
				userName();
				}
				}
				setState(5063);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public List<TerminalNode> WITH() { return getTokens(MySqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(MySqlParser.WITH, i);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public RoleOptionContext roleOption() {
			return getRuleContext(RoleOptionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(MySqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(MySqlParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySqlParser.AND, i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			setState(5157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5064);
				match(GRANT);
				setState(5065);
				privelegeClause();
				setState(5070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5066);
					match(COMMA);
					setState(5067);
					privelegeClause();
					}
					}
					setState(5072);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5073);
				match(ON);
				setState(5075);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
				case 1:
					{
					setState(5074);
					((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5077);
				privilegeLevel();
				setState(5078);
				match(TO);
				setState(5079);
				userAuthOption();
				setState(5084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5080);
					match(COMMA);
					setState(5081);
					userAuthOption();
					}
					}
					setState(5086);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(5087);
					match(REQUIRE);
					setState(5099);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(5088);
						((GrantStatementContext)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(5089);
						tlsOption();
						setState(5096);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							setState(5091);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(5090);
								match(AND);
								}
							}

							setState(5093);
							tlsOption();
							}
							}
							setState(5098);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(5112);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					setState(5103);
					match(WITH);
					setState(5109);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,751,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5107);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case GRANT:
								{
								setState(5104);
								match(GRANT);
								setState(5105);
								match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								setState(5106);
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						setState(5111);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,751,_ctx);
					}
					}
					break;
				}
				setState(5120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5114);
					match(AS);
					setState(5115);
					userName();
					setState(5116);
					match(WITH);
					setState(5117);
					match(ROLE);
					setState(5118);
					roleOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5122);
				match(GRANT);
				setState(5125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
				case 1:
					{
					setState(5123);
					userName();
					}
					break;
				case 2:
					{
					setState(5124);
					uid();
					}
					break;
				}
				setState(5134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5127);
					match(COMMA);
					setState(5130);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
					case 1:
						{
						setState(5128);
						userName();
						}
						break;
					case 2:
						{
						setState(5129);
						uid();
						}
						break;
					}
					}
					}
					setState(5136);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5137);
				match(TO);
				setState(5140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
				case 1:
					{
					setState(5138);
					userName();
					}
					break;
				case 2:
					{
					setState(5139);
					uid();
					}
					break;
				}
				setState(5149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5142);
					match(COMMA);
					setState(5145);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
					case 1:
						{
						setState(5143);
						userName();
						}
						break;
					case 2:
						{
						setState(5144);
						uid();
						}
						break;
					}
					}
					}
					setState(5151);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
				case 1:
					{
					setState(5152);
					match(WITH);
					setState(5153);
					match(ADMIN);
					setState(5154);
					match(OPTION);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOptionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOption; }
	}

	public final RoleOptionContext roleOption() throws RecognitionException {
		RoleOptionContext _localctx = new RoleOptionContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_roleOption);
		int _la;
		try {
			setState(5181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5159);
				match(DEFAULT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5160);
				match(NONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5161);
				match(ALL);
				setState(5171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT) {
					{
					setState(5162);
					match(EXCEPT);
					setState(5163);
					userName();
					setState(5168);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5164);
						match(COMMA);
						setState(5165);
						userName();
						}
						}
						setState(5170);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5173);
				userName();
				setState(5178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5174);
					match(COMMA);
					setState(5175);
					userName();
					}
					}
					setState(5180);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext userName;
		public List<UserNameContext> toOther = new ArrayList<UserNameContext>();
		public List<TerminalNode> GRANT() { return getTokens(MySqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySqlParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5183);
			match(GRANT);
			setState(5184);
			match(PROXY);
			setState(5185);
			match(ON);
			setState(5186);
			((GrantProxyContext)_localctx).fromFirst = userName();
			setState(5187);
			match(TO);
			setState(5188);
			((GrantProxyContext)_localctx).toFirst = userName();
			setState(5193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5189);
				match(COMMA);
				setState(5190);
				((GrantProxyContext)_localctx).userName = userName();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).userName);
				}
				}
				setState(5195);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
			case 1:
				{
				setState(5196);
				match(WITH);
				setState(5197);
				match(GRANT);
				setState(5198);
				match(OPTION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5201);
			match(RENAME);
			setState(5202);
			match(USER);
			setState(5203);
			renameUserClause();
			setState(5208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5204);
				match(COMMA);
				setState(5205);
				renameUserClause();
				}
				}
				setState(5210);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
	}
	public static class RoleRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_revokeStatement);
		int _la;
		try {
			setState(5281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5211);
				match(REVOKE);
				setState(5212);
				privelegeClause();
				setState(5217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5213);
					match(COMMA);
					setState(5214);
					privelegeClause();
					}
					}
					setState(5219);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5220);
				match(ON);
				setState(5222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(5221);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5224);
				privilegeLevel();
				setState(5225);
				match(FROM);
				setState(5226);
				userName();
				setState(5231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5227);
					match(COMMA);
					setState(5228);
					userName();
					}
					}
					setState(5233);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5234);
				match(REVOKE);
				setState(5235);
				match(ALL);
				setState(5237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5236);
					match(PRIVILEGES);
					}
				}

				setState(5239);
				match(COMMA);
				setState(5240);
				match(GRANT);
				setState(5241);
				match(OPTION);
				setState(5242);
				match(FROM);
				setState(5243);
				userName();
				setState(5248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5244);
					match(COMMA);
					setState(5245);
					userName();
					}
					}
					setState(5250);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5251);
				match(REVOKE);
				setState(5254);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
				case 1:
					{
					setState(5252);
					userName();
					}
					break;
				case 2:
					{
					setState(5253);
					uid();
					}
					break;
				}
				setState(5263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5256);
					match(COMMA);
					setState(5259);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
					case 1:
						{
						setState(5257);
						userName();
						}
						break;
					case 2:
						{
						setState(5258);
						uid();
						}
						break;
					}
					}
					}
					setState(5265);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5266);
				match(FROM);
				setState(5269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					setState(5267);
					userName();
					}
					break;
				case 2:
					{
					setState(5268);
					uid();
					}
					break;
				}
				setState(5278);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5271);
					match(COMMA);
					setState(5274);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
					case 1:
						{
						setState(5272);
						userName();
						}
						break;
					case 2:
						{
						setState(5273);
						uid();
						}
						break;
					}
					}
					}
					setState(5280);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext userName;
		public List<UserNameContext> fromOther = new ArrayList<UserNameContext>();
		public TerminalNode REVOKE() { return getToken(MySqlParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5283);
			match(REVOKE);
			setState(5284);
			match(PROXY);
			setState(5285);
			match(ON);
			setState(5286);
			((RevokeProxyContext)_localctx).onUser = userName();
			setState(5287);
			match(FROM);
			setState(5288);
			((RevokeProxyContext)_localctx).fromFirst = userName();
			setState(5293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5289);
				match(COMMA);
				setState(5290);
				((RevokeProxyContext)_localctx).userName = userName();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).userName);
				}
				}
				setState(5295);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetPasswordStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPasswordStatement; }
	}

	public final SetPasswordStatementContext setPasswordStatement() throws RecognitionException {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_setPasswordStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5296);
			match(SET);
			setState(5297);
			match(PASSWORD);
			setState(5300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5298);
				match(FOR);
				setState(5299);
				userName();
				}
			}

			setState(5302);
			match(EQUAL_SYMBOL);
			setState(5305);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				setState(5303);
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				setState(5304);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5307);
			userName();
			setState(5308);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
	}
	public static class ModuleAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public AuthenticationRuleContext authenticationRule() {
			return getRuleContext(AuthenticationRuleContext.class,0);
		}
		public ModuleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode RETAIN() { return getToken(MySqlParser.RETAIN, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public Token hashed;
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_userAuthOption);
		int _la;
		try {
			setState(5331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5310);
				userName();
				setState(5311);
				match(IDENTIFIED);
				setState(5312);
				match(BY);
				setState(5313);
				match(PASSWORD);
				setState(5314);
				((HashAuthOptionContext)_localctx).hashed = match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5316);
				userName();
				setState(5317);
				match(IDENTIFIED);
				setState(5318);
				match(BY);
				setState(5319);
				match(STRING_LITERAL);
				setState(5323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN) {
					{
					setState(5320);
					match(RETAIN);
					setState(5321);
					match(CURRENT);
					setState(5322);
					match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new ModuleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5325);
				userName();
				setState(5326);
				match(IDENTIFIED);
				setState(5327);
				match(WITH);
				setState(5328);
				authenticationRule();
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5330);
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthenticationRuleContext extends ParserRuleContext {
		public AuthenticationRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authenticationRule; }
	 
		public AuthenticationRuleContext() { }
		public void copyFrom(AuthenticationRuleContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PasswordModuleOptionContext extends AuthenticationRuleContext {
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordModuleOptionContext(AuthenticationRuleContext ctx) { copyFrom(ctx); }
	}
	public static class ModuleContext extends AuthenticationRuleContext {
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ModuleContext(AuthenticationRuleContext ctx) { copyFrom(ctx); }
	}

	public final AuthenticationRuleContext authenticationRule() throws RecognitionException {
		AuthenticationRuleContext _localctx = new AuthenticationRuleContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_authenticationRule);
		int _la;
		try {
			setState(5342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				_localctx = new ModuleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5333);
				authPlugin();
				setState(5336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(5334);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==BY || _la==USING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5335);
					match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new PasswordModuleOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5338);
				authPlugin();
				setState(5339);
				match(USING);
				setState(5340);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySqlParser.SSL, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_tlsOption);
		try {
			setState(5352);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5344);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(5345);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(5346);
				match(CIPHER);
				setState(5347);
				match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5348);
				match(ISSUER);
				setState(5349);
				match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(5350);
				match(SUBJECT);
				setState(5351);
				match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_userResourceOption);
		try {
			setState(5362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5354);
				match(MAX_QUERIES_PER_HOUR);
				setState(5355);
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5356);
				match(MAX_UPDATES_PER_HOUR);
				setState(5357);
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(5358);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(5359);
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5360);
				match(MAX_USER_CONNECTIONS);
				setState(5361);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public TerminalNode HISTORY() { return getToken(MySqlParser.HISTORY, 0); }
		public TerminalNode REUSE() { return getToken(MySqlParser.REUSE, 0); }
		public TerminalNode REQUIRE() { return getToken(MySqlParser.REQUIRE, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS() { return getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode PASSWORD_LOCK_TIME() { return getToken(MySqlParser.PASSWORD_LOCK_TIME, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_userPasswordOption);
		int _la;
		try {
			setState(5402);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5364);
				match(PASSWORD);
				setState(5365);
				match(EXPIRE);
				setState(5372);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(5366);
					((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
					}
					break;
				case NEVER:
					{
					setState(5367);
					((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
					}
					break;
				case INTERVAL:
					{
					setState(5368);
					((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
					setState(5369);
					decimalLiteral();
					setState(5370);
					match(DAY);
					}
					break;
				case EOF:
				case ALTER:
				case ANALYZE:
				case ATTRIBUTE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case WITH:
				case ACCOUNT:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMENT:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FAILED_LOGIN_ATTEMPTS:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5374);
				match(PASSWORD);
				setState(5375);
				match(HISTORY);
				setState(5378);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(5376);
					match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5377);
					decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5380);
				match(PASSWORD);
				setState(5381);
				match(REUSE);
				setState(5382);
				match(INTERVAL);
				setState(5387);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(5383);
					match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5384);
					decimalLiteral();
					setState(5385);
					match(DAY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5389);
				match(PASSWORD);
				setState(5390);
				match(REQUIRE);
				setState(5391);
				match(CURRENT);
				setState(5393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==OPTIONAL) {
					{
					setState(5392);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==OPTIONAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5395);
				match(FAILED_LOGIN_ATTEMPTS);
				setState(5396);
				decimalLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5397);
				match(PASSWORD_LOCK_TIME);
				setState(5400);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(5398);
					decimalLiteral();
					}
					break;
				case UNBOUNDED:
					{
					setState(5399);
					match(UNBOUNDED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySqlParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5404);
			match(ACCOUNT);
			setState(5405);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5407);
			privilege();
			setState(5412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5408);
				match(LR_BRACKET);
				setState(5409);
				uidList();
				setState(5410);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(MySqlParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(MySqlParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySqlParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(MySqlParser.USAGE, 0); }
		public TerminalNode APPLICATION_PASSWORD_ADMIN() { return getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0); }
		public TerminalNode AUDIT_ABORT_EXEMPT() { return getToken(MySqlParser.AUDIT_ABORT_EXEMPT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_EXEMPT() { return getToken(MySqlParser.FIREWALL_EXEMPT, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FLUSH_OPTIMIZER_COSTS() { return getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0); }
		public TerminalNode FLUSH_STATUS() { return getToken(MySqlParser.FLUSH_STATUS, 0); }
		public TerminalNode FLUSH_TABLES() { return getToken(MySqlParser.FLUSH_TABLES, 0); }
		public TerminalNode FLUSH_USER_RESOURCES() { return getToken(MySqlParser.FLUSH_USER_RESOURCES, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INNODB_REDO_LOG_ENABLE() { return getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode PASSWORDLESS_USER_ADMIN() { return getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode SERVICE_CONNECTION_ADMIN() { return getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SKIP_QUERY_REWRITE() { return getToken(MySqlParser.SKIP_QUERY_REWRITE, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TP_CONNECTION_ADMIN() { return getToken(MySqlParser.TP_CONNECTION_ADMIN, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode S3() { return getToken(MySqlParser.S3, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode INVOKE() { return getToken(MySqlParser.INVOKE, 0); }
		public TerminalNode LAMBDA() { return getToken(MySqlParser.LAMBDA, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_privilege);
		int _la;
		try {
			setState(5506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5414);
				match(ALL);
				setState(5416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5415);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5418);
				match(ALTER);
				setState(5420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(5419);
					match(ROUTINE);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5422);
				match(CREATE);
				setState(5430);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(5423);
					match(TEMPORARY);
					setState(5424);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(5425);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(5426);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(5427);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(5428);
					match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					setState(5429);
					match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5432);
				match(DELETE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5433);
				match(DROP);
				setState(5435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROLE) {
					{
					setState(5434);
					match(ROLE);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5437);
				match(EVENT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5438);
				match(EXECUTE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5439);
				match(FILE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5440);
				match(GRANT);
				setState(5441);
				match(OPTION);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5442);
				match(INDEX);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5443);
				match(INSERT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5444);
				match(LOCK);
				setState(5445);
				match(TABLES);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5446);
				match(PROCESS);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5447);
				match(PROXY);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5448);
				match(REFERENCES);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5449);
				match(RELOAD);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5450);
				match(REPLICATION);
				setState(5451);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5452);
				match(SELECT);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5453);
				match(SHOW);
				setState(5454);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(5455);
				match(SHUTDOWN);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(5456);
				match(SUPER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(5457);
				match(TRIGGER);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(5458);
				match(UPDATE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(5459);
				match(USAGE);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(5460);
				match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(5461);
				match(AUDIT_ABORT_EXEMPT);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(5462);
				match(AUDIT_ADMIN);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(5463);
				match(BACKUP_ADMIN);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(5464);
				match(BINLOG_ADMIN);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(5465);
				match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(5466);
				match(CLONE_ADMIN);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(5467);
				match(CONNECTION_ADMIN);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(5468);
				match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(5469);
				match(FIREWALL_ADMIN);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(5470);
				match(FIREWALL_EXEMPT);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(5471);
				match(FIREWALL_USER);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(5472);
				match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(5473);
				match(FLUSH_STATUS);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(5474);
				match(FLUSH_TABLES);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(5475);
				match(FLUSH_USER_RESOURCES);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(5476);
				match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(5477);
				match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(5478);
				match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(5479);
				match(NDB_STORED_USER);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(5480);
				match(PASSWORDLESS_USER_ADMIN);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(5481);
				match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(5482);
				match(REPLICATION_APPLIER);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(5483);
				match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(5484);
				match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(5485);
				match(RESOURCE_GROUP_USER);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(5486);
				match(ROLE_ADMIN);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(5487);
				match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(5488);
				match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(5489);
				match(SET_USER_ID);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(5490);
				match(SKIP_QUERY_REWRITE);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(5491);
				match(SHOW_ROUTINE);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(5492);
				match(SYSTEM_USER);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(5493);
				match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(5494);
				match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(5495);
				match(TP_CONNECTION_ADMIN);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(5496);
				match(VERSION_TOKEN_ADMIN);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(5497);
				match(XA_RECOVER_ADMIN);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(5498);
				match(LOAD);
				setState(5499);
				match(FROM);
				setState(5500);
				match(S3);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(5501);
				match(SELECT);
				setState(5502);
				match(INTO);
				setState(5503);
				match(S3);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(5504);
				match(INVOKE);
				setState(5505);
				match(LAMBDA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
	}
	public static class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext dottedId() {
			return getRuleContext(DottedIdContext.class,0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext ctx) { copyFrom(ctx); }
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_privilegeLevel);
		try {
			setState(5524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5508);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5509);
				match(STAR);
				setState(5510);
				match(DOT);
				setState(5511);
				match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5512);
				uid();
				setState(5513);
				match(DOT);
				setState(5514);
				match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5516);
				uid();
				setState(5517);
				match(DOT);
				setState(5518);
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5520);
				uid();
				setState(5521);
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5523);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5526);
			((RenameUserClauseContext)_localctx).fromFirst = userName();
			setState(5527);
			match(TO);
			setState(5528);
			((RenameUserClauseContext)_localctx).toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(MySqlParser.ANALYZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public List<TerminalNode> HISTOGRAM() { return getTokens(MySqlParser.HISTOGRAM); }
		public TerminalNode HISTOGRAM(int i) {
			return getToken(MySqlParser.HISTOGRAM, i);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode BUCKETS() { return getToken(MySqlParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5530);
			match(ANALYZE);
			setState(5532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5531);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5534);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5535);
			tables();
			setState(5553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
			case 1:
				{
				setState(5536);
				match(UPDATE);
				setState(5537);
				match(HISTOGRAM);
				setState(5538);
				match(ON);
				setState(5539);
				fullColumnName();
				setState(5544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5540);
					match(COMMA);
					setState(5541);
					fullColumnName();
					}
					}
					setState(5546);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5551);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
				case 1:
					{
					setState(5547);
					match(WITH);
					setState(5548);
					decimalLiteral();
					setState(5549);
					match(BUCKETS);
					}
					break;
				}
				}
				break;
			}
			setState(5566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				setState(5555);
				match(DROP);
				setState(5556);
				match(HISTOGRAM);
				setState(5557);
				match(ON);
				setState(5558);
				fullColumnName();
				setState(5563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5559);
					match(COMMA);
					setState(5560);
					fullColumnName();
					}
					}
					setState(5565);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_checkTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5568);
			match(CHECK);
			setState(5569);
			match(TABLE);
			setState(5570);
			tables();
			setState(5574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				setState(5571);
				checkTableOption();
				}
				}
				setState(5576);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5577);
			match(CHECKSUM);
			setState(5578);
			match(TABLE);
			setState(5579);
			tables();
			setState(5581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				setState(5580);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(MySqlParser.OPTIMIZE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5583);
			match(OPTIMIZE);
			setState(5585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5584);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5587);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5588);
			tables();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5590);
			match(REPAIR);
			setState(5592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5591);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5594);
			match(TABLE);
			setState(5595);
			tables();
			setState(5597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(5596);
				match(QUICK);
				}
			}

			setState(5600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(5599);
				match(EXTENDED);
				}
			}

			setState(5603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(5602);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_checkTableOption);
		try {
			setState(5612);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5605);
				match(FOR);
				setState(5606);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5607);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(5608);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(5609);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5610);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(5611);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5614);
			match(CREATE);
			setState(5616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(5615);
				match(AGGREGATE);
				}
			}

			setState(5618);
			match(FUNCTION);
			setState(5620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
			case 1:
				{
				setState(5619);
				ifNotExists();
				}
				break;
			}
			setState(5622);
			uid();
			setState(5623);
			match(RETURNS);
			setState(5624);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (INTEGER - 206)) | (1L << (REAL - 206)) | (1L << (DECIMAL - 206)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5625);
			match(SONAME);
			setState(5626);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5628);
			match(INSTALL);
			setState(5629);
			match(PLUGIN);
			setState(5630);
			uid();
			setState(5631);
			match(SONAME);
			setState(5632);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5634);
			match(UNINSTALL);
			setState(5635);
			match(PLUGIN);
			setState(5636);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetTransactionContext extends SetStatementContext {
		public SetTransactionStatementContext setTransactionStatement() {
			return getRuleContext(SetTransactionStatementContext.class,0);
		}
		public SetTransactionContext(SetStatementContext ctx) { copyFrom(ctx); }
	}
	public static class SetCharsetContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext ctx) { copyFrom(ctx); }
	}
	public static class SetNamesContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public SetNamesContext(SetStatementContext ctx) { copyFrom(ctx); }
	}
	public static class SetPasswordContext extends SetStatementContext {
		public SetPasswordStatementContext setPasswordStatement() {
			return getRuleContext(SetPasswordStatementContext.class,0);
		}
		public SetPasswordContext(SetStatementContext ctx) { copyFrom(ctx); }
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutocommitStatementContext setAutocommitStatement() {
			return getRuleContext(SetAutocommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
	}
	public static class SetNewValueInsideTriggerContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<FullIdContext> fullId() {
			return getRuleContexts(FullIdContext.class);
		}
		public FullIdContext fullId(int i) {
			return getRuleContext(FullIdContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext ctx) { copyFrom(ctx); }
	}
	public static class SetVariableContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public List<TerminalNode> VAR_ASSIGN() { return getTokens(MySqlParser.VAR_ASSIGN); }
		public TerminalNode VAR_ASSIGN(int i) {
			return getToken(MySqlParser.VAR_ASSIGN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext ctx) { copyFrom(ctx); }
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_setStatement);
		int _la;
		try {
			setState(5690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5638);
				match(SET);
				setState(5639);
				variableClause();
				setState(5640);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5643);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
				case 1:
					{
					setState(5641);
					expression(0);
					}
					break;
				case 2:
					{
					setState(5642);
					match(ON);
					}
					break;
				}
				setState(5654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5645);
					match(COMMA);
					setState(5646);
					variableClause();
					setState(5647);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5650);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
					case 1:
						{
						setState(5648);
						expression(0);
						}
						break;
					case 2:
						{
						setState(5649);
						match(ON);
						}
						break;
					}
					}
					}
					setState(5656);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5657);
				match(SET);
				setState(5658);
				charSet();
				setState(5661);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5659);
					charsetName();
					}
					break;
				case DEFAULT:
					{
					setState(5660);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5663);
				match(SET);
				setState(5664);
				match(NAMES);
				setState(5671);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					setState(5665);
					charsetName();
					setState(5668);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE) {
						{
						setState(5666);
						match(COLLATE);
						setState(5667);
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					setState(5670);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5673);
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5674);
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5675);
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5676);
				match(SET);
				setState(5677);
				fullId();
				setState(5678);
				_la = _input.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5679);
				expression(0);
				setState(5687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5680);
					match(COMMA);
					setState(5681);
					fullId();
					setState(5682);
					_la = _input.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5683);
					expression(0);
					}
					}
					setState(5689);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_showStatement);
		int _la;
		try {
			setState(5845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5692);
				match(SHOW);
				setState(5693);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5694);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5695);
				match(SHOW);
				setState(5696);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5697);
				match(EVENTS);
				setState(5700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5698);
					match(IN);
					setState(5699);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(5704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(5702);
					match(FROM);
					setState(5703);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(5713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5706);
					match(LIMIT);
					setState(5710);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
					case 1:
						{
						setState(5707);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(5708);
						match(COMMA);
						}
						break;
					}
					setState(5712);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5715);
				match(SHOW);
				setState(5716);
				showCommonEntity();
				setState(5718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5717);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5720);
				match(SHOW);
				setState(5722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5721);
					match(FULL);
					}
				}

				setState(5724);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5725);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5726);
				tableName();
				setState(5729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5727);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5728);
					uid();
					}
				}

				setState(5732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5731);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5734);
				match(SHOW);
				setState(5735);
				match(CREATE);
				setState(5736);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
				case 1:
					{
					setState(5737);
					ifNotExists();
					}
					break;
				}
				setState(5740);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5741);
				match(SHOW);
				setState(5742);
				match(CREATE);
				setState(5743);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (PROCEDURE - 131)) | (1L << (TABLE - 131)) | (1L << (TRIGGER - 131)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5744);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5745);
				match(SHOW);
				setState(5746);
				match(CREATE);
				setState(5747);
				match(USER);
				setState(5748);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5749);
				match(SHOW);
				setState(5750);
				match(ENGINE);
				setState(5751);
				engineName();
				setState(5752);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5754);
				match(SHOW);
				setState(5755);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5756);
				match(SHOW);
				setState(5757);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5758);
					match(LIMIT);
					setState(5762);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
					case 1:
						{
						setState(5759);
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						setState(5760);
						match(COMMA);
						}
						break;
					}
					setState(5764);
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5767);
				match(SHOW);
				setState(5768);
				match(COUNT);
				setState(5769);
				match(LR_BRACKET);
				setState(5770);
				match(STAR);
				setState(5771);
				match(RR_BRACKET);
				setState(5772);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5773);
				match(SHOW);
				setState(5774);
				showSchemaEntity();
				setState(5777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5775);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5776);
					uid();
					}
				}

				setState(5780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5779);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5782);
				match(SHOW);
				setState(5783);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5784);
				match(CODE);
				setState(5785);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5786);
				match(SHOW);
				setState(5787);
				match(GRANTS);
				setState(5790);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5788);
					match(FOR);
					setState(5789);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5792);
				match(SHOW);
				setState(5793);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5794);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5795);
				tableName();
				setState(5798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5796);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5797);
					uid();
					}
				}

				setState(5802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5800);
					match(WHERE);
					setState(5801);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5804);
				match(SHOW);
				setState(5805);
				match(OPEN);
				setState(5806);
				match(TABLES);
				setState(5809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5807);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5808);
					uid();
					}
				}

				setState(5812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5811);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(5814);
				match(SHOW);
				setState(5815);
				match(PROFILE);
				setState(5816);
				showProfileType();
				setState(5821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5817);
					match(COMMA);
					setState(5818);
					showProfileType();
					}
					}
					setState(5823);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5824);
					match(FOR);
					setState(5825);
					match(QUERY);
					setState(5826);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(5829);
				match(LIMIT);
				setState(5833);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
				case 1:
					{
					setState(5830);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(5831);
					match(COMMA);
					}
					break;
				}
				setState(5835);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5837);
				match(SHOW);
				setState(5838);
				match(SLAVE);
				setState(5839);
				match(STATUS);
				setState(5843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5840);
					match(FOR);
					setState(5841);
					match(CHANNEL);
					setState(5842);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(MySqlParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_variableClause);
		int _la;
		try {
			setState(5857);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5847);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5848);
				match(GLOBAL_ID);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case ENFORCED:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_QUERY_REWRITE:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ABORT_EXEMPT:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_EXEMPT:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TP_CONNECTION_ADMIN:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5854);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					setState(5851);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(5849);
						match(AT_SIGN);
						setState(5850);
						match(AT_SIGN);
						}
					}

					setState(5853);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5856);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_showCommonEntity);
		int _la;
		try {
			setState(5872);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5859);
				match(CHARACTER);
				setState(5860);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5861);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5862);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5863);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5864);
				match(FUNCTION);
				setState(5865);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5866);
				match(PROCEDURE);
				setState(5867);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5868);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5871);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_showFilter);
		try {
			setState(5878);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5874);
				match(LIKE);
				setState(5875);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5876);
				match(WHERE);
				setState(5877);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5897);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5880);
					match(STORAGE);
					}
				}

				setState(5883);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5884);
				match(MASTER);
				setState(5885);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5886);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5887);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5888);
					match(FULL);
					}
				}

				setState(5891);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5892);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5893);
				match(SLAVE);
				setState(5894);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5895);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5896);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5899);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5900);
				match(TABLE);
				setState(5901);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5902);
					match(FULL);
					}
				}

				setState(5905);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5906);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_showProfileType);
		try {
			setState(5921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5909);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5910);
				match(BLOCK);
				setState(5911);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5912);
				match(CONTEXT);
				setState(5913);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5914);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5915);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5916);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5917);
				match(PAGE);
				setState(5918);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5919);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5920);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5923);
			match(BINLOG);
			setState(5924);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public UidContext schema;
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5926);
			match(CACHE);
			setState(5927);
			match(INDEX);
			setState(5928);
			tableIndexes();
			setState(5933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5929);
				match(COMMA);
				setState(5930);
				tableIndexes();
				}
				}
				setState(5935);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5936);
				match(PARTITION);
				setState(5937);
				match(LR_BRACKET);
				setState(5940);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(5938);
					uidList();
					}
					break;
				case ALL:
					{
					setState(5939);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5942);
				match(RR_BRACKET);
				}
			}

			setState(5945);
			match(IN);
			setState(5946);
			((CacheIndexStatementContext)_localctx).schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5948);
			match(FLUSH);
			setState(5950);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5949);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5952);
			flushOption();
			setState(5957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5953);
				match(COMMA);
				setState(5954);
				flushOption();
				}
				}
				setState(5959);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(MySqlParser.KILL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_killStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5960);
			match(KILL);
			setState(5962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
			case 1:
				{
				setState(5961);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5964);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5966);
			match(LOAD);
			setState(5967);
			match(INDEX);
			setState(5968);
			match(INTO);
			setState(5969);
			match(CACHE);
			setState(5970);
			loadedTableIndexes();
			setState(5975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5971);
				match(COMMA);
				setState(5972);
				loadedTableIndexes();
				}
				}
				setState(5977);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5978);
			match(RESET);
			setState(5979);
			match(QUERY);
			setState(5980);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5982);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public Token indexFormat;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5984);
			tableName();
			setState(5992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				setState(5986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(5985);
					((TableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((TableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5988);
				match(LR_BRACKET);
				setState(5989);
				uidList();
				setState(5990);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_flushOption);
		int _la;
		try {
			setState(6026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6012);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5994);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5995);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5997);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ERROR - 409)) | (1L << (GENERAL - 409)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5996);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 409)) & ~0x3f) == 0 && ((1L << (_la - 409)) & ((1L << (ENGINE - 409)) | (1L << (ERROR - 409)) | (1L << (GENERAL - 409)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5999);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(6000);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(6001);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(6002);
					match(QUERY);
					setState(6003);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(6004);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(6005);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(6006);
					match(TABLES);
					setState(6010);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
					case 1:
						{
						setState(6007);
						match(WITH);
						setState(6008);
						match(READ);
						setState(6009);
						match(LOCK);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6014);
				match(RELAY);
				setState(6015);
				match(LOGS);
				setState(6017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6016);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6019);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
				case 1:
					{
					setState(6020);
					tables();
					}
					break;
				}
				setState(6024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
				case 1:
					{
					setState(6023);
					flushTableOption();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySqlParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_flushTableOption);
		try {
			setState(6033);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(6028);
				match(WITH);
				setState(6029);
				match(READ);
				setState(6030);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(6031);
				match(FOR);
				setState(6032);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public UidListContext partitionList;
		public Token indexFormat;
		public UidListContext indexList;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6035);
			tableName();
			setState(6043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6036);
				match(PARTITION);
				setState(6037);
				match(LR_BRACKET);
				setState(6040);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
					{
					setState(6038);
					((LoadedTableIndexesContext)_localctx).partitionList = uidList();
					}
					break;
				case ALL:
					{
					setState(6039);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6042);
				match(RR_BRACKET);
				}
			}

			setState(6052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
			case 1:
				{
				setState(6046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(6045);
					((LoadedTableIndexesContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((LoadedTableIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6048);
				match(LR_BRACKET);
				setState(6049);
				((LoadedTableIndexesContext)_localctx).indexList = uidList();
				setState(6050);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(6054);
				match(IGNORE);
				setState(6055);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6058);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6059);
			tableName();
			setState(6062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,884,_ctx) ) {
			case 1:
				{
				setState(6060);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(6061);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6064);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6068);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(6065);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6066);
				match(EQUAL_SYMBOL);
				setState(6067);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6070);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6072);
			match(HELP);
			setState(6073);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6075);
			match(USE);
			setState(6076);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(MySqlParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6078);
			match(SIGNAL);
			setState(6086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(6079);
				match(SQLSTATE);
				setState(6081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(6080);
					match(VALUE);
					}
				}

				setState(6083);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(6084);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(6085);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				{
				setState(6088);
				match(SET);
				setState(6089);
				signalConditionInformation();
				setState(6094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6090);
					match(COMMA);
					setState(6091);
					signalConditionInformation();
					}
					}
					setState(6096);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(MySqlParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6099);
			match(RESIGNAL);
			setState(6107);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(6100);
				match(SQLSTATE);
				setState(6102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(6101);
					match(VALUE);
					}
				}

				setState(6104);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(6105);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(6106);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case WITH:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			setState(6118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
			case 1:
				{
				setState(6109);
				match(SET);
				setState(6110);
				signalConditionInformation();
				setState(6115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6111);
					match(COMMA);
					setState(6112);
					signalConditionInformation();
					}
					}
					setState(6117);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6120);
			_la = _input.LA(1);
			if ( !(((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (CLASS_ORIGIN - 359)) | (1L << (COLUMN_NAME - 359)) | (1L << (CONSTRAINT_CATALOG - 359)) | (1L << (CONSTRAINT_SCHEMA - 359)) | (1L << (CONSTRAINT_NAME - 359)) | (1L << (CURSOR_NAME - 359)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6121);
			match(EQUAL_SYMBOL);
			setState(6126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
			case 1:
				{
				setState(6122);
				stringLiteral();
				}
				break;
			case 2:
				{
				setState(6123);
				match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				setState(6124);
				mysqlVariable();
				}
				break;
			case 4:
				{
				setState(6125);
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithStatementContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public List<CommonTableExpressionsContext> commonTableExpressions() {
			return getRuleContexts(CommonTableExpressionsContext.class);
		}
		public CommonTableExpressionsContext commonTableExpressions(int i) {
			return getRuleContext(CommonTableExpressionsContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withStatement; }
	}

	public final WithStatementContext withStatement() throws RecognitionException {
		WithStatementContext _localctx = new WithStatementContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_withStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6128);
			match(WITH);
			setState(6130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
			case 1:
				{
				setState(6129);
				match(RECURSIVE);
				}
				break;
			}
			setState(6132);
			commonTableExpressions();
			setState(6137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6133);
				match(COMMA);
				setState(6134);
				commonTableExpressions();
				}
				}
				setState(6139);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(MySqlParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(MySqlParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(MySqlParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(MySqlParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(MySqlParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6140);
			match(GET);
			setState(6142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(6141);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6144);
			match(DIAGNOSTICS);
			setState(6176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				{
				{
				setState(6145);
				variableClause();
				setState(6146);
				match(EQUAL_SYMBOL);
				setState(6147);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6148);
					match(COMMA);
					setState(6149);
					variableClause();
					setState(6150);
					match(EQUAL_SYMBOL);
					setState(6151);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(6157);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				setState(6158);
				match(CONDITION);
				setState(6161);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(6159);
					decimalLiteral();
					}
					break;
				case ATTRIBUTE:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case ENFORCED:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_QUERY_REWRITE:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCOPY:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case ADMIN:
				case AUDIT_ABORT_EXEMPT:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_EXEMPT:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case TP_CONNECTION_ADMIN:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					setState(6160);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6163);
				variableClause();
				setState(6164);
				match(EQUAL_SYMBOL);
				setState(6165);
				diagnosticsConditionInformationName();
				setState(6173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6166);
					match(COMMA);
					setState(6167);
					variableClause();
					setState(6168);
					match(EQUAL_SYMBOL);
					setState(6169);
					diagnosticsConditionInformationName();
					}
					}
					setState(6175);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6178);
			_la = _input.LA(1);
			if ( !(((((_la - 359)) & ~0x3f) == 0 && ((1L << (_la - 359)) & ((1L << (CLASS_ORIGIN - 359)) | (1L << (COLUMN_NAME - 359)) | (1L << (CONSTRAINT_CATALOG - 359)) | (1L << (CONSTRAINT_SCHEMA - 359)) | (1L << (CONSTRAINT_NAME - 359)) | (1L << (CURSOR_NAME - 359)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (RETURNED_SQLSTATE - 592)) | (1L << (SUBCLASS_ORIGIN - 592)) | (1L << (TABLE_NAME - 592)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_describeObjectClause);
		try {
			setState(6190);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6185);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(6180);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(6181);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(6182);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(6183);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(6184);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6187);
				match(FOR);
				setState(6188);
				match(CONNECTION);
				setState(6189);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6192);
			uid();
			setState(6196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,904,_ctx) ) {
			case 1:
				{
				setState(6193);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(6194);
				match(DOT);
				setState(6195);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6198);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_roleName);
		try {
			setState(6202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6200);
				userName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6201);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_fullColumnName);
		try {
			setState(6218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6204);
				uid();
				setState(6209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,907,_ctx) ) {
				case 1:
					{
					setState(6205);
					dottedId();
					setState(6207);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
					case 1:
						{
						setState(6206);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6212);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
				case 1:
					{
					setState(6211);
					matchWildcard();
					}
					break;
				}
				setState(6214);
				dottedId();
				setState(6216);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
				case 1:
					{
					setState(6215);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
			case 1:
				{
				setState(6222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
				case 1:
					{
					setState(6220);
					uid();
					}
					break;
				case 2:
					{
					setState(6221);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(6228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6224);
					match(LR_BRACKET);
					setState(6225);
					decimalLiteral();
					setState(6226);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				setState(6230);
				expression(0);
				}
				break;
			}
			setState(6234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(6233);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(MySqlParser.STRING_USER_NAME, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_userName);
		try {
			setState(6241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6236);
				match(STRING_USER_NAME);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6237);
				match(ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6238);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6239);
				match(ADMIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6240);
				keywordsCanBeId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6243);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_charsetName);
		try {
			setState(6249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6245);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6246);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6247);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6248);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_collationName);
		try {
			setState(6253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6251);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6252);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6255);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 786)) & ~0x3f) == 0 && ((1L << (_la - 786)) & ((1L << (ARCHIVE - 786)) | (1L << (BLACKHOLE - 786)) | (1L << (CSV - 786)) | (1L << (FEDERATED - 786)) | (1L << (INNODB - 786)) | (1L << (MEMORY - 786)) | (1L << (MRG_MYISAM - 786)) | (1L << (MYISAM - 786)) | (1L << (NDB - 786)) | (1L << (NDBCLUSTER - 786)) | (1L << (PERFORMANCE_SCHEMA - 786)) | (1L << (TOKUDB - 786)))) != 0) || ((((_la - 1146)) & ~0x3f) == 0 && ((1L << (_la - 1146)) & ((1L << (STRING_LITERAL - 1146)) | (1L << (ID - 1146)) | (1L << (REVERSE_QUOTE_ID - 1146)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(MySqlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6257);
			decimalLiteral();
			setState(6258);
			match(MINUS);
			setState(6259);
			decimalLiteral();
			setState(6260);
			match(MINUS);
			setState(6261);
			decimalLiteral();
			setState(6262);
			match(MINUS);
			setState(6263);
			decimalLiteral();
			setState(6264);
			match(MINUS);
			setState(6265);
			decimalLiteral();
			setState(6271); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6266);
				match(COLON_SYMB);
				setState(6267);
				decimalLiteral();
				setState(6268);
				match(MINUS);
				setState(6269);
				decimalLiteral();
				}
				}
				setState(6273); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6275);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(6282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6276);
				match(COMMA);
				setState(6277);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(6280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6278);
					match(COMMA);
					setState(6279);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_xuidStringId);
		int _la;
		try {
			setState(6291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6284);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6285);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6287); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6286);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(6289); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_authPlugin);
		try {
			setState(6295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6293);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6294);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_uid);
		try {
			setState(6300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6297);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6298);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6299);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_simpleId);
		try {
			setState(6311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6302);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6303);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6304);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6305);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6306);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6307);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6308);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6309);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6310);
				scalarFunctionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_dottedId);
		try {
			setState(6316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6313);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6314);
				match(DOT);
				setState(6315);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6318);
			_la = _input.LA(1);
			if ( !(((((_la - 1136)) & ~0x3f) == 0 && ((1L << (_la - 1136)) & ((1L << (ZERO_DECIMAL - 1136)) | (1L << (ONE_DECIMAL - 1136)) | (1L << (TWO_DECIMAL - 1136)) | (1L << (DECIMAL_LITERAL - 1136)) | (1L << (REAL_LITERAL - 1136)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_fileSizeLiteral);
		try {
			setState(6322);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6320);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6321);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(6347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6329);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(6325);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(6324);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(6327);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(6328);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6332); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6331);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6334); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,930,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6341);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(6337);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(6336);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(6339);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(6340);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6345);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
				case 1:
					{
					setState(6343);
					match(COLLATE);
					setState(6344);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6349);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(6351);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(6354);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6356);
				match(NOT);
				}
			}

			setState(6359);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_constant);
		int _la;
		try {
			setState(6373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6361);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6362);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6363);
				match(MINUS);
				setState(6364);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6365);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6366);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6367);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6368);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6369);
					match(NOT);
					}
				}

				setState(6372);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(MySqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(MySqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(MySqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(MySqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(MySqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(MySqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> SIGNED() { return getTokens(MySqlParser.SIGNED); }
		public TerminalNode SIGNED(int i) {
			return getToken(MySqlParser.SIGNED, i);
		}
		public List<TerminalNode> UNSIGNED() { return getTokens(MySqlParser.UNSIGNED); }
		public TerminalNode UNSIGNED(int i) {
			return getToken(MySqlParser.UNSIGNED, i);
		}
		public List<TerminalNode> ZEROFILL() { return getTokens(MySqlParser.ZEROFILL); }
		public TerminalNode ZEROFILL(int i) {
			return getToken(MySqlParser.ZEROFILL, i);
		}
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(MySqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(MySqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(MySqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MySqlParser.BINARY, i);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_dataType);
		int _la;
		try {
			int _alt;
			setState(6501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6375);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (CHAR - 222)) | (1L << (VARCHAR - 222)) | (1L << (NVARCHAR - 222)) | (1L << (LONG - 222)) | (1L << (TINYTEXT - 222)) | (1L << (TEXT - 222)) | (1L << (MEDIUMTEXT - 222)) | (1L << (LONGTEXT - 222)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(6376);
					match(VARYING);
					}
				}

				setState(6380);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(6379);
					lengthOneDimension();
					}
					break;
				}
				setState(6383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(6382);
					match(BINARY);
					}
					break;
				}
				setState(6388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					setState(6385);
					charSet();
					setState(6386);
					charsetName();
					}
					break;
				}
				setState(6393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					setState(6390);
					match(COLLATE);
					setState(6391);
					collationName();
					}
					break;
				case 2:
					{
					setState(6392);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6395);
				match(NATIONAL);
				setState(6396);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6397);
				match(VARYING);
				setState(6399);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					setState(6398);
					lengthOneDimension();
					}
					break;
				}
				setState(6402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
				case 1:
					{
					setState(6401);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6404);
				match(NATIONAL);
				setState(6405);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
				case 1:
					{
					setState(6406);
					lengthOneDimension();
					}
					break;
				}
				setState(6410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,947,_ctx) ) {
				case 1:
					{
					setState(6409);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6412);
				match(NCHAR);
				setState(6413);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(6415);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
				case 1:
					{
					setState(6414);
					lengthOneDimension();
					}
					break;
				}
				setState(6418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
				case 1:
					{
					setState(6417);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6420);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (TINYINT - 196)) | (1L << (SMALLINT - 196)) | (1L << (MEDIUMINT - 196)) | (1L << (MIDDLEINT - 196)) | (1L << (INT - 196)) | (1L << (INT1 - 196)) | (1L << (INT2 - 196)) | (1L << (INT3 - 196)) | (1L << (INT4 - 196)) | (1L << (INT8 - 196)) | (1L << (INTEGER - 196)) | (1L << (BIGINT - 196)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6422);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
				case 1:
					{
					setState(6421);
					lengthOneDimension();
					}
					break;
				}
				setState(6427);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,951,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6424);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6429);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,951,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6430);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(6432);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
				case 1:
					{
					setState(6431);
					lengthTwoDimension();
					}
					break;
				}
				setState(6437);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,953,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6434);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6439);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,953,_ctx);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6440);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(6442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(6441);
					match(PRECISION);
					}
				}

				setState(6445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,955,_ctx) ) {
				case 1:
					{
					setState(6444);
					lengthTwoDimension();
					}
					break;
				}
				setState(6450);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,956,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6447);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6452);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,956,_ctx);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6453);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (FLOAT - 211)) | (1L << (FLOAT4 - 211)) | (1L << (FLOAT8 - 211)) | (1L << (DECIMAL - 211)) | (1L << (DEC - 211)) | (1L << (NUMERIC - 211)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
				case 1:
					{
					setState(6454);
					lengthTwoOptionalDimension();
					}
					break;
				}
				setState(6460);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,958,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6457);
						_la = _input.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						} 
					}
					setState(6462);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,958,_ctx);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6463);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TINYBLOB - 217)) | (1L << (MEDIUMBLOB - 217)) | (1L << (LONGBLOB - 217)) | (1L << (SERIAL - 217)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6464);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (TIME - 218)) | (1L << (TIMESTAMP - 218)) | (1L << (DATETIME - 218)) | (1L << (YEAR - 218)) | (1L << (BINARY - 218)) | (1L << (VARBINARY - 218)) | (1L << (BLOB - 218)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6466);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
				case 1:
					{
					setState(6465);
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6468);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6469);
				collectionOptions();
				setState(6471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,960,_ctx) ) {
				case 1:
					{
					setState(6470);
					match(BINARY);
					}
					break;
				}
				setState(6476);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
				case 1:
					{
					setState(6473);
					charSet();
					setState(6474);
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6478);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 802)) & ~0x3f) == 0 && ((1L << (_la - 802)) & ((1L << (GEOMETRYCOLLECTION - 802)) | (1L << (GEOMCOLLECTION - 802)) | (1L << (GEOMETRY - 802)) | (1L << (LINESTRING - 802)) | (1L << (MULTILINESTRING - 802)) | (1L << (MULTIPOINT - 802)) | (1L << (MULTIPOLYGON - 802)) | (1L << (POINT - 802)) | (1L << (POLYGON - 802)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
				case 1:
					{
					setState(6479);
					match(SRID);
					setState(6480);
					decimalLiteral();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6483);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(6485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(6484);
					match(VARCHAR);
					}
				}

				setState(6488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,964,_ctx) ) {
				case 1:
					{
					setState(6487);
					match(BINARY);
					}
					break;
				}
				setState(6493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,965,_ctx) ) {
				case 1:
					{
					setState(6490);
					charSet();
					setState(6491);
					charsetName();
					}
					break;
				}
				setState(6497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					setState(6495);
					match(COLLATE);
					setState(6496);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6499);
				match(LONG);
				setState(6500);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6503);
			match(LR_BRACKET);
			setState(6504);
			match(STRING_LITERAL);
			setState(6509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6505);
				match(COMMA);
				setState(6506);
				match(STRING_LITERAL);
				}
				}
				setState(6511);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6512);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode ARRAY() { return getToken(MySqlParser.ARRAY, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public CharSetContext charSet() {
			return getRuleContext(CharSetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_convertedDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6536);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				setState(6514);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6515);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				setState(6518);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(6520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6519);
					lengthOneDimension();
					}
				}

				setState(6525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					setState(6522);
					charSet();
					setState(6523);
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				setState(6527);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (INT - 200)) | (1L << (INTEGER - 200)) | (1L << (DATE - 200)) | (1L << (TIME - 200)) | (1L << (DATETIME - 200)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				{
				setState(6528);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(6530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6529);
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				setState(6532);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(6533);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY) {
				{
				setState(6538);
				match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6541);
			match(LR_BRACKET);
			setState(6542);
			decimalLiteral();
			setState(6543);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6545);
			match(LR_BRACKET);
			setState(6546);
			decimalLiteral();
			setState(6547);
			match(COMMA);
			setState(6548);
			decimalLiteral();
			setState(6549);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6551);
			match(LR_BRACKET);
			setState(6552);
			decimalLiteral();
			setState(6555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6553);
				match(COMMA);
				setState(6554);
				decimalLiteral();
				}
			}

			setState(6557);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_uidList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6559);
			uid();
			setState(6564);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,977,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6560);
					match(COMMA);
					setState(6561);
					uid();
					}
					} 
				}
				setState(6566);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,977,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameListContext extends ParserRuleContext {
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FullColumnNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnNameList; }
	}

	public final FullColumnNameListContext fullColumnNameList() throws RecognitionException {
		FullColumnNameListContext _localctx = new FullColumnNameListContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_fullColumnNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6567);
			fullColumnName();
			setState(6572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6568);
				match(COMMA);
				setState(6569);
				fullColumnName();
				}
				}
				setState(6574);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_tables);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6575);
			tableName();
			setState(6580);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,979,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6576);
					match(COMMA);
					setState(6577);
					tableName();
					}
					} 
				}
				setState(6582);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,979,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6583);
			match(LR_BRACKET);
			setState(6584);
			indexColumnName();
			setState(6589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6585);
				match(COMMA);
				setState(6586);
				indexColumnName();
				}
				}
				setState(6591);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6592);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6594);
			expression(0);
			setState(6599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6595);
				match(COMMA);
				setState(6596);
				expression(0);
				}
				}
				setState(6601);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6602);
			expressionOrDefault();
			setState(6607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6603);
				match(COMMA);
				setState(6604);
				expressionOrDefault();
				}
				}
				setState(6609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6610);
			constant();
			setState(6615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6611);
				match(COMMA);
				setState(6612);
				constant();
				}
				}
				setState(6617);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6618);
			match(STRING_LITERAL);
			setState(6623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6619);
				match(COMMA);
				setState(6620);
				match(STRING_LITERAL);
				}
				}
				setState(6625);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6626);
			match(LOCAL_ID);
			setState(6631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6627);
				match(COMMA);
				setState(6628);
				match(LOCAL_ID);
				}
				}
				setState(6633);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_defaultValue);
		try {
			setState(6660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,988,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6634);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6635);
				match(CAST);
				setState(6636);
				match(LR_BRACKET);
				setState(6637);
				expression(0);
				setState(6638);
				match(AS);
				setState(6639);
				convertedDataType();
				setState(6640);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6643);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
				case 1:
					{
					setState(6642);
					unaryOperator();
					}
					break;
				}
				setState(6645);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6646);
				currentTimestamp();
				setState(6650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
				case 1:
					{
					setState(6647);
					match(ON);
					setState(6648);
					match(UPDATE);
					setState(6649);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6652);
				match(LR_BRACKET);
				setState(6653);
				expression(0);
				setState(6654);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6656);
				match(LR_BRACKET);
				setState(6657);
				fullId();
				setState(6658);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6676);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
				{
				setState(6662);
				_la = _input.LA(1);
				if ( !(((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (CURRENT_TIMESTAMP - 315)) | (1L << (LOCALTIME - 315)) | (1L << (LOCALTIMESTAMP - 315)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
				case 1:
					{
					setState(6663);
					match(LR_BRACKET);
					setState(6665);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1136)) & ~0x3f) == 0 && ((1L << (_la - 1136)) & ((1L << (ZERO_DECIMAL - 1136)) | (1L << (ONE_DECIMAL - 1136)) | (1L << (TWO_DECIMAL - 1136)) | (1L << (DECIMAL_LITERAL - 1136)) | (1L << (REAL_LITERAL - 1136)))) != 0)) {
						{
						setState(6664);
						decimalLiteral();
						}
					}

					setState(6667);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				setState(6670);
				match(NOW);
				setState(6671);
				match(LR_BRACKET);
				setState(6673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1136)) & ~0x3f) == 0 && ((1L << (_la - 1136)) & ((1L << (ZERO_DECIMAL - 1136)) | (1L << (ONE_DECIMAL - 1136)) | (1L << (TWO_DECIMAL - 1136)) | (1L << (DECIMAL_LITERAL - 1136)) | (1L << (REAL_LITERAL - 1136)))) != 0)) {
					{
					setState(6672);
					decimalLiteral();
					}
				}

				setState(6675);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_expressionOrDefault);
		try {
			setState(6680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6678);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6679);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6682);
			match(IF);
			setState(6683);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6685);
			match(IF);
			setState(6686);
			match(NOT);
			setState(6687);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrReplaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public OrReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orReplace; }
	}

	public final OrReplaceContext orReplace() throws RecognitionException {
		OrReplaceContext _localctx = new OrReplaceContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_orReplace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6689);
			match(OR);
			setState(6690);
			match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WaitNowaitClauseContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public WaitNowaitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitNowaitClause; }
	}

	public final WaitNowaitClauseContext waitNowaitClause() throws RecognitionException {
		WaitNowaitClauseContext _localctx = new WaitNowaitClauseContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_waitNowaitClause);
		try {
			setState(6695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6692);
				match(WAIT);
				setState(6693);
				decimalLiteral();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6694);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
	}
	public static class PasswordFunctionCallContext extends FunctionCallContext {
		public PasswordFunctionClauseContext passwordFunctionClause() {
			return getRuleContext(PasswordFunctionClauseContext.class,0);
		}
		public PasswordFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
	}
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_functionCall);
		try {
			setState(6715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6697);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6698);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6699);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6700);
				scalarFunctionName();
				setState(6701);
				match(LR_BRACKET);
				setState(6703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					setState(6702);
					functionArgs();
					}
					break;
				}
				setState(6705);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6707);
				fullId();
				setState(6708);
				match(LR_BRACKET);
				setState(6710);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,996,_ctx) ) {
				case 1:
					{
					setState(6709);
					functionArgs();
					}
					break;
				}
				setState(6712);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6714);
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNING() { return getToken(MySqlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public JsonOnEmptyContext jsonOnEmpty() {
			return getRuleContext(JsonOnEmptyContext.class,0);
		}
		public JsonOnErrorContext jsonOnError() {
			return getRuleContext(JsonOnErrorContext.class,0);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_specificFunction);
		int _la;
		try {
			setState(6895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6717);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || _la==SCHEMA || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (CURRENT_DATE - 313)) | (1L << (CURRENT_TIME - 313)) | (1L << (CURRENT_TIMESTAMP - 313)) | (1L << (LOCALTIME - 313)) | (1L << (UTC_TIMESTAMP - 313)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6720);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
				case 1:
					{
					setState(6718);
					match(LR_BRACKET);
					setState(6719);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6722);
				match(CONVERT);
				setState(6723);
				match(LR_BRACKET);
				setState(6724);
				expression(0);
				setState(6725);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(6726);
				convertedDataType();
				setState(6727);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6729);
				match(CONVERT);
				setState(6730);
				match(LR_BRACKET);
				setState(6731);
				expression(0);
				setState(6732);
				match(USING);
				setState(6733);
				charsetName();
				setState(6734);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6736);
				match(CAST);
				setState(6737);
				match(LR_BRACKET);
				setState(6738);
				expression(0);
				setState(6739);
				match(AS);
				setState(6740);
				convertedDataType();
				setState(6741);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6743);
				match(VALUES);
				setState(6744);
				match(LR_BRACKET);
				setState(6745);
				fullColumnName();
				setState(6746);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6748);
				match(CASE);
				setState(6749);
				expression(0);
				setState(6751); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6750);
					caseFuncAlternative();
					}
					}
					setState(6753); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6755);
					match(ELSE);
					setState(6756);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6759);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6761);
				match(CASE);
				setState(6763); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6762);
					caseFuncAlternative();
					}
					}
					setState(6765); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(6769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(6767);
					match(ELSE);
					setState(6768);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(6771);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6773);
				match(CHAR);
				setState(6774);
				match(LR_BRACKET);
				setState(6775);
				functionArgs();
				setState(6778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6776);
					match(USING);
					setState(6777);
					charsetName();
					}
				}

				setState(6780);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6782);
				match(POSITION);
				setState(6783);
				match(LR_BRACKET);
				setState(6786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1004,_ctx) ) {
				case 1:
					{
					setState(6784);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6785);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(6788);
				match(IN);
				setState(6791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
				case 1:
					{
					setState(6789);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6790);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(6793);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6795);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6796);
				match(LR_BRACKET);
				setState(6799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
				case 1:
					{
					setState(6797);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6798);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6801);
				match(FROM);
				setState(6804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
				case 1:
					{
					setState(6802);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(6803);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6806);
					match(FOR);
					setState(6809);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1008,_ctx) ) {
					case 1:
						{
						setState(6807);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(6808);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(6813);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6815);
				match(TRIM);
				setState(6816);
				match(LR_BRACKET);
				setState(6817);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
				case 1:
					{
					setState(6818);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6819);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6822);
				match(FROM);
				setState(6825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
				case 1:
					{
					setState(6823);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6824);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6827);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6829);
				match(TRIM);
				setState(6830);
				match(LR_BRACKET);
				setState(6833);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
				case 1:
					{
					setState(6831);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6832);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6835);
				match(FROM);
				setState(6838);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
				case 1:
					{
					setState(6836);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6837);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(6840);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6842);
				match(WEIGHT_STRING);
				setState(6843);
				match(LR_BRACKET);
				setState(6846);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
				case 1:
					{
					setState(6844);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(6845);
					expression(0);
					}
					break;
				}
				setState(6854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6848);
					match(AS);
					setState(6849);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6850);
					match(LR_BRACKET);
					setState(6851);
					decimalLiteral();
					setState(6852);
					match(RR_BRACKET);
					}
				}

				setState(6857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6856);
					levelsInWeightString();
					}
				}

				setState(6859);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6861);
				match(EXTRACT);
				setState(6862);
				match(LR_BRACKET);
				setState(6863);
				intervalType();
				setState(6864);
				match(FROM);
				setState(6867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
				case 1:
					{
					setState(6865);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(6866);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(6869);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6871);
				match(GET_FORMAT);
				setState(6872);
				match(LR_BRACKET);
				setState(6873);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (DATETIME - 217)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6874);
				match(COMMA);
				setState(6875);
				stringLiteral();
				setState(6876);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(6878);
				match(JSON_VALUE);
				setState(6879);
				match(LR_BRACKET);
				setState(6880);
				expression(0);
				setState(6881);
				match(COMMA);
				setState(6882);
				expression(0);
				setState(6885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(6883);
					match(RETURNING);
					setState(6884);
					convertedDataType();
					}
				}

				setState(6888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1019,_ctx) ) {
				case 1:
					{
					setState(6887);
					jsonOnEmpty();
					}
					break;
				}
				setState(6891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(6890);
					jsonOnError();
					}
				}

				setState(6893);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6897);
			match(WHEN);
			setState(6898);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(6899);
			match(THEN);
			setState(6900);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_levelsInWeightString);
		int _la;
		try {
			setState(6916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6902);
				match(LEVEL);
				setState(6903);
				levelInWeightListElement();
				setState(6908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6904);
					match(COMMA);
					setState(6905);
					levelInWeightListElement();
					}
					}
					setState(6910);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6911);
				match(LEVEL);
				setState(6912);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(6913);
				match(MINUS);
				setState(6914);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6918);
			decimalLiteral();
			setState(6920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(6919);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(6981);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6922);
				_la = _input.LA(1);
				if ( !(((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (AVG - 286)) | (1L << (MAX - 286)) | (1L << (MIN - 286)) | (1L << (SUM - 286)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6923);
				match(LR_BRACKET);
				setState(6925);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1025,_ctx) ) {
				case 1:
					{
					setState(6924);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6927);
				functionArg();
				setState(6928);
				match(RR_BRACKET);
				setState(6930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
				case 1:
					{
					setState(6929);
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6932);
				match(COUNT);
				setState(6933);
				match(LR_BRACKET);
				setState(6941);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1028,_ctx) ) {
				case 1:
					{
					setState(6934);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(6936);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
					case 1:
						{
						setState(6935);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(6938);
					functionArg();
					}
					break;
				case 3:
					{
					setState(6939);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					setState(6940);
					functionArgs();
					}
					break;
				}
				setState(6943);
				match(RR_BRACKET);
				setState(6945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
				case 1:
					{
					setState(6944);
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6947);
				_la = _input.LA(1);
				if ( !(((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (BIT_AND - 287)) | (1L << (BIT_OR - 287)) | (1L << (BIT_XOR - 287)) | (1L << (STD - 287)) | (1L << (STDDEV - 287)) | (1L << (STDDEV_POP - 287)) | (1L << (STDDEV_SAMP - 287)) | (1L << (VAR_POP - 287)) | (1L << (VAR_SAMP - 287)) | (1L << (VARIANCE - 287)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6948);
				match(LR_BRACKET);
				setState(6950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
				case 1:
					{
					setState(6949);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(6952);
				functionArg();
				setState(6953);
				match(RR_BRACKET);
				setState(6955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1031,_ctx) ) {
				case 1:
					{
					setState(6954);
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6957);
				match(GROUP_CONCAT);
				setState(6958);
				match(LR_BRACKET);
				setState(6960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1032,_ctx) ) {
				case 1:
					{
					setState(6959);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(6962);
				functionArgs();
				setState(6973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6963);
					match(ORDER);
					setState(6964);
					match(BY);
					setState(6965);
					orderByExpression();
					setState(6970);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6966);
						match(COMMA);
						setState(6967);
						orderByExpression();
						}
						}
						setState(6972);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(6975);
					match(SEPARATOR);
					setState(6976);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(6979);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(7021);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(6983);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6984);
				match(LR_BRACKET);
				setState(6985);
				expression(0);
				setState(6988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
				case 1:
					{
					setState(6986);
					match(COMMA);
					setState(6987);
					decimalLiteral();
					}
					break;
				}
				setState(6992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6990);
					match(COMMA);
					setState(6991);
					decimalLiteral();
					}
				}

				setState(6994);
				match(RR_BRACKET);
				setState(6995);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6997);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6998);
				match(LR_BRACKET);
				setState(6999);
				expression(0);
				setState(7000);
				match(RR_BRACKET);
				setState(7001);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(7003);
				_la = _input.LA(1);
				if ( !(((((_la - 291)) & ~0x3f) == 0 && ((1L << (_la - 291)) & ((1L << (CUME_DIST - 291)) | (1L << (DENSE_RANK - 291)) | (1L << (PERCENT_RANK - 291)) | (1L << (RANK - 291)) | (1L << (ROW_NUMBER - 291)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7004);
				match(LR_BRACKET);
				setState(7005);
				match(RR_BRACKET);
				setState(7006);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7007);
				match(NTH_VALUE);
				setState(7008);
				match(LR_BRACKET);
				setState(7009);
				expression(0);
				setState(7010);
				match(COMMA);
				setState(7011);
				decimalLiteral();
				setState(7012);
				match(RR_BRACKET);
				setState(7013);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(7015);
				match(NTILE);
				setState(7016);
				match(LR_BRACKET);
				setState(7017);
				decimalLiteral();
				setState(7018);
				match(RR_BRACKET);
				setState(7019);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MySqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7023);
			match(OVER);
			setState(7029);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(7024);
				match(LR_BRACKET);
				setState(7025);
				windowSpec();
				setState(7026);
				match(RR_BRACKET);
				}
				break;
			case ATTRIBUTE:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case ENFORCED:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_QUERY_REWRITE:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCOPY:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case ADMIN:
			case AUDIT_ABORT_EXEMPT:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_EXEMPT:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case TP_CONNECTION_ADMIN:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
				{
				setState(7028);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1041,_ctx) ) {
			case 1:
				{
				setState(7031);
				windowName();
				}
				break;
			}
			setState(7035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7034);
				partitionClause();
				}
			}

			setState(7038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7037);
				orderByClause();
				}
			}

			setState(7041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(7040);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7043);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7045);
			frameUnits();
			setState(7046);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7048);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_frameExtent);
		try {
			setState(7052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1045,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7050);
				frameRange();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7051);
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7054);
			match(BETWEEN);
			setState(7055);
			frameRange();
			setState(7056);
			match(AND);
			setState(7057);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MySqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(MySqlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_frameRange);
		int _la;
		try {
			setState(7066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7059);
				match(CURRENT);
				setState(7060);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7061);
				match(UNBOUNDED);
				setState(7062);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7063);
				expression(0);
				setState(7064);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7068);
			match(PARTITION);
			setState(7069);
			match(BY);
			setState(7070);
			expression(0);
			setState(7075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7071);
				match(COMMA);
				setState(7072);
				expression(0);
				}
				}
				setState(7077);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_scalarFunctionName);
		try {
			setState(7101);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(7078);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(7079);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7080);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7081);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(7082);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(7083);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(7084);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(7085);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(7086);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(7087);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(7088);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(7089);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(7090);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(7091);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(7092);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(7093);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(7094);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(7095);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(7096);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(7097);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(7098);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(7099);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(7100);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordFunctionClauseContext extends ParserRuleContext {
		public Token functionName;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordFunctionClause; }
	}

	public final PasswordFunctionClauseContext passwordFunctionClause() throws RecognitionException {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_passwordFunctionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7103);
			((PasswordFunctionClauseContext)_localctx).functionName = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				((PasswordFunctionClauseContext)_localctx).functionName = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7104);
			match(LR_BRACKET);
			setState(7105);
			functionArg();
			setState(7106);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1049,_ctx) ) {
			case 1:
				{
				setState(7108);
				constant();
				}
				break;
			case 2:
				{
				setState(7109);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(7110);
				functionCall();
				}
				break;
			case 4:
				{
				setState(7111);
				expression(0);
				}
				break;
			}
			setState(7123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7114);
				match(COMMA);
				setState(7119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1050,_ctx) ) {
				case 1:
					{
					setState(7115);
					constant();
					}
					break;
				case 2:
					{
					setState(7116);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(7117);
					functionCall();
					}
					break;
				case 4:
					{
					setState(7118);
					expression(0);
					}
					break;
				}
				}
				}
				setState(7125);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_functionArg);
		try {
			setState(7130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1052,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7126);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7127);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7128);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7129);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 672;
		enterRecursionRule(_localctx, 672, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7133);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7134);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7135);
				predicate(0);
				setState(7136);
				match(IS);
				setState(7138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7137);
					match(NOT);
					}
				}

				setState(7140);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7142);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7151);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1055,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(7145);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(7146);
					logicalOperator();
					setState(7147);
					expression(4);
					}
					} 
				}
				setState(7153);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1055,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 674;
		enterRecursionRule(_localctx, 674, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(7157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1056,_ctx) ) {
			case 1:
				{
				setState(7155);
				match(LOCAL_ID);
				setState(7156);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(7159);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(7225);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1064,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7223);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1063,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7161);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(7162);
						comparisonOperator();
						setState(7163);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7165);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(7167);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7166);
							match(NOT);
							}
						}

						setState(7169);
						match(BETWEEN);
						setState(7170);
						predicate(0);
						setState(7171);
						match(AND);
						setState(7172);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7174);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(7175);
						match(SOUNDS);
						setState(7176);
						match(LIKE);
						setState(7177);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7178);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7180);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7179);
							match(NOT);
							}
						}

						setState(7182);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7183);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7184);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(7186);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7185);
							match(NOT);
							}
						}

						setState(7188);
						match(IN);
						setState(7189);
						match(LR_BRACKET);
						setState(7192);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1060,_ctx) ) {
						case 1:
							{
							setState(7190);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(7191);
							expressions();
							}
							break;
						}
						setState(7194);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7196);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(7197);
						match(IS);
						setState(7198);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7199);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(7200);
						comparisonOperator();
						setState(7201);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7202);
						match(LR_BRACKET);
						setState(7203);
						selectStatement();
						setState(7204);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7206);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(7208);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(7207);
							match(NOT);
							}
						}

						setState(7210);
						match(LIKE);
						setState(7211);
						predicate(0);
						setState(7214);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
						case 1:
							{
							setState(7212);
							match(ESCAPE);
							setState(7213);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(7216);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7217);
						match(MEMBER);
						setState(7218);
						match(OF);
						setState(7219);
						match(LR_BRACKET);
						setState(7220);
						predicate(0);
						setState(7221);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(7227);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1064,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 676;
		enterRecursionRule(_localctx, 676, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1067,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(7229);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7230);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7231);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7232);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7233);
				unaryOperator();
				setState(7234);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7236);
				match(BINARY);
				setState(7237);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7238);
				match(LR_BRACKET);
				setState(7239);
				expression(0);
				setState(7244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7240);
					match(COMMA);
					setState(7241);
					expression(0);
					}
					}
					setState(7246);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7247);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7249);
				match(ROW);
				setState(7250);
				match(LR_BRACKET);
				setState(7251);
				expression(0);
				setState(7254); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7252);
					match(COMMA);
					setState(7253);
					expression(0);
					}
					}
					setState(7256); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(7258);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7260);
				match(EXISTS);
				setState(7261);
				match(LR_BRACKET);
				setState(7262);
				selectStatement();
				setState(7263);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7265);
				match(LR_BRACKET);
				setState(7266);
				selectStatement();
				setState(7267);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(7269);
				match(INTERVAL);
				setState(7270);
				expression(0);
				setState(7271);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(7292);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1069,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7290);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1068,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7275);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7276);
						bitOperator();
						setState(7277);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7279);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7280);
						mathOperator();
						setState(7281);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7283);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7284);
						jsonOperator();
						setState(7285);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(7287);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(7288);
						match(COLLATE);
						setState(7289);
						collationName();
						}
						break;
					}
					} 
				}
				setState(7294);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1069,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7295);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1118)) & ~0x3f) == 0 && ((1L << (_la - 1118)) & ((1L << (PLUS - 1118)) | (1L << (MINUS - 1118)) | (1L << (EXCLAMATION_SYMBOL - 1118)) | (1L << (BIT_NOT_OP - 1118)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_comparisonOperator);
		try {
			setState(7311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1070,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7297);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7298);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7299);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7300);
				match(LESS_SYMBOL);
				setState(7301);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7302);
				match(GREATER_SYMBOL);
				setState(7303);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7304);
				match(LESS_SYMBOL);
				setState(7305);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7306);
				match(EXCLAMATION_SYMBOL);
				setState(7307);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7308);
				match(LESS_SYMBOL);
				setState(7309);
				match(EQUAL_SYMBOL);
				setState(7310);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_logicalOperator);
		try {
			setState(7320);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(7313);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(7314);
				match(BIT_AND_OP);
				setState(7315);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(7316);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(7317);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(7318);
				match(BIT_OR_OP);
				setState(7319);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(MySqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(MySqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(MySqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_bitOperator);
		try {
			setState(7329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7322);
				match(LESS_SYMBOL);
				setState(7323);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7324);
				match(GREATER_SYMBOL);
				setState(7325);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(7326);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(7327);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(7328);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MySqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MySqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7331);
			_la = _input.LA(1);
			if ( !(((((_la - 1115)) & ~0x3f) == 0 && ((1L << (_la - 1115)) & ((1L << (STAR - 1115)) | (1L << (DIVIDE - 1115)) | (1L << (MODULE - 1115)) | (1L << (PLUS - 1115)) | (1L << (MINUS - 1115)) | (1L << (DIV - 1115)) | (1L << (MOD - 1115)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_jsonOperator);
		try {
			setState(7338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1073,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7333);
				match(MINUS);
				setState(7334);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7335);
				match(MINUS);
				setState(7336);
				match(GREATER_SYMBOL);
				setState(7337);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(MySqlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7340);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & ((1L << (ARMSCII8 - 745)) | (1L << (ASCII - 745)) | (1L << (BIG5 - 745)) | (1L << (CP1250 - 745)) | (1L << (CP1251 - 745)) | (1L << (CP1256 - 745)) | (1L << (CP1257 - 745)) | (1L << (CP850 - 745)) | (1L << (CP852 - 745)) | (1L << (CP866 - 745)) | (1L << (CP932 - 745)) | (1L << (DEC8 - 745)) | (1L << (EUCJPMS - 745)) | (1L << (EUCKR - 745)) | (1L << (GB18030 - 745)) | (1L << (GB2312 - 745)) | (1L << (GBK - 745)) | (1L << (GEOSTD8 - 745)) | (1L << (GREEK - 745)) | (1L << (HEBREW - 745)) | (1L << (HP8 - 745)) | (1L << (KEYBCS2 - 745)) | (1L << (KOI8R - 745)) | (1L << (KOI8U - 745)) | (1L << (LATIN1 - 745)) | (1L << (LATIN2 - 745)) | (1L << (LATIN5 - 745)) | (1L << (LATIN7 - 745)) | (1L << (MACCE - 745)) | (1L << (MACROMAN - 745)) | (1L << (SJIS - 745)) | (1L << (SWE7 - 745)) | (1L << (TIS620 - 745)) | (1L << (UCS2 - 745)) | (1L << (UJIS - 745)) | (1L << (UTF16 - 745)) | (1L << (UTF16LE - 745)) | (1L << (UTF32 - 745)) | (1L << (UTF8 - 745)) | (1L << (UTF8MB3 - 745)) | (1L << (UTF8MB4 - 745)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7342);
			_la = _input.LA(1);
			if ( !(((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & ((1L << (REPEATABLE - 798)) | (1L << (COMMITTED - 798)) | (1L << (UNCOMMITTED - 798)) | (1L << (SERIALIZABLE - 798)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7344);
			_la = _input.LA(1);
			if ( !(((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & ((1L << (EXECUTE - 707)) | (1L << (FILE - 707)) | (1L << (PRIVILEGES - 707)) | (1L << (PROCESS - 707)) | (1L << (RELOAD - 707)) | (1L << (ROUTINE - 707)) | (1L << (SHUTDOWN - 707)) | (1L << (SUPER - 707)) | (1L << (TABLES - 707)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7346);
			_la = _input.LA(1);
			if ( !(((((_la - 689)) & ~0x3f) == 0 && ((1L << (_la - 689)) & ((1L << (QUARTER - 689)) | (1L << (MONTH - 689)) | (1L << (DAY - 689)) | (1L << (HOUR - 689)) | (1L << (MINUTE - 689)) | (1L << (WEEK - 689)) | (1L << (SECOND - 689)) | (1L << (MICROSECOND - 689)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7348);
			_la = _input.LA(1);
			if ( !(((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (DATETIME - 217)) | (1L << (YEAR - 217)) | (1L << (TEXT - 217)) | (1L << (ENUM - 217)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUDIT_ABORT_EXEMPT() { return getToken(MySqlParser.AUDIT_ABORT_EXEMPT, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(MySqlParser.ATTRIBUTE, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode BUCKETS() { return getToken(MySqlParser.BUCKETS, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode CLUSTERING() { return getToken(MySqlParser.CLUSTERING, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode EMPTY() { return getToken(MySqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ENFORCED() { return getToken(MySqlParser.ENFORCED, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(MySqlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS() { return getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_EXEMPT() { return getToken(MySqlParser.FIREWALL_EXEMPT, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HISTORY() { return getToken(MySqlParser.HISTORY, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORED() { return getToken(MySqlParser.IGNORED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKE() { return getToken(MySqlParser.INVOKE, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(MySqlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(MySqlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LAMBDA() { return getToken(MySqlParser.LAMBDA, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LATERAL() { return getToken(MySqlParser.LATERAL, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NESTED() { return getToken(MySqlParser.NESTED, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NOCOPY() { return getToken(MySqlParser.NOCOPY, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode ORDINALITY() { return getToken(MySqlParser.ORDINALITY, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PASSWORDLESS_USER_ADMIN() { return getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		public TerminalNode PASSWORD_LOCK_TIME() { return getToken(MySqlParser.PASSWORD_LOCK_TIME, 0); }
		public TerminalNode PATH() { return getToken(MySqlParser.PATH, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode REUSE() { return getToken(MySqlParser.REUSE, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode RTREE() { return getToken(MySqlParser.RTREE, 0); }
		public TerminalNode S3() { return getToken(MySqlParser.S3, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SKIP_QUERY_REWRITE() { return getToken(MySqlParser.SKIP_QUERY_REWRITE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TP_CONNECTION_ADMIN() { return getToken(MySqlParser.TP_CONNECTION_ADMIN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(MySqlParser.USA, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7350);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << BUCKETS) | (1L << CONDITION) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EMPTY) | (1L << ENFORCED) | (1L << EXCEPT))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (GROUP - 73)) | (1L << (IGNORED - 73)) | (1L << (LATERAL - 73)) | (1L << (NUMBER - 73)) | (1L << (OPTIONAL - 73)) | (1L << (ORDER - 73)) | (1L << (PRIMARY - 73)))) != 0) || _la==SKIP_QUERY_REWRITE || _la==STACKED || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (SERIAL - 239)) | (1L << (NESTED - 239)) | (1L << (ORDINALITY - 239)) | (1L << (PATH - 239)) | (1L << (AVG - 239)) | (1L << (BIT_AND - 239)) | (1L << (BIT_OR - 239)) | (1L << (BIT_XOR - 239)) | (1L << (COUNT - 239)) | (1L << (GROUP_CONCAT - 239)) | (1L << (MAX - 239)) | (1L << (MIN - 239)))) != 0) || ((((_la - 305)) & ~0x3f) == 0 && ((1L << (_la - 305)) & ((1L << (STD - 305)) | (1L << (STDDEV - 305)) | (1L << (STDDEV_POP - 305)) | (1L << (STDDEV_SAMP - 305)) | (1L << (SUM - 305)) | (1L << (VAR_POP - 305)) | (1L << (VAR_SAMP - 305)) | (1L << (VARIANCE - 305)) | (1L << (ACCOUNT - 305)) | (1L << (ACTION - 305)) | (1L << (AFTER - 305)) | (1L << (AGGREGATE - 305)) | (1L << (ALGORITHM - 305)) | (1L << (ANY - 305)) | (1L << (AT - 305)) | (1L << (AUTHORS - 305)) | (1L << (AUTOCOMMIT - 305)) | (1L << (AUTOEXTEND_SIZE - 305)) | (1L << (AUTO_INCREMENT - 305)) | (1L << (AVG_ROW_LENGTH - 305)) | (1L << (BEGIN - 305)) | (1L << (BINLOG - 305)) | (1L << (BIT - 305)) | (1L << (BLOCK - 305)) | (1L << (BOOL - 305)) | (1L << (BOOLEAN - 305)) | (1L << (BTREE - 305)) | (1L << (CACHE - 305)) | (1L << (CASCADED - 305)) | (1L << (CHAIN - 305)) | (1L << (CHANGED - 305)) | (1L << (CHANNEL - 305)) | (1L << (CHECKSUM - 305)) | (1L << (PAGE_CHECKSUM - 305)) | (1L << (CIPHER - 305)) | (1L << (CLASS_ORIGIN - 305)) | (1L << (CLIENT - 305)) | (1L << (CLOSE - 305)) | (1L << (CLUSTERING - 305)) | (1L << (COALESCE - 305)) | (1L << (CODE - 305)) | (1L << (COLUMNS - 305)) | (1L << (COLUMN_FORMAT - 305)) | (1L << (COLUMN_NAME - 305)) | (1L << (COMMENT - 305)))) != 0) || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (COMMIT - 369)) | (1L << (COMPACT - 369)) | (1L << (COMPLETION - 369)) | (1L << (COMPRESSED - 369)) | (1L << (COMPRESSION - 369)) | (1L << (CONCURRENT - 369)) | (1L << (CONNECT - 369)) | (1L << (CONNECTION - 369)) | (1L << (CONSISTENT - 369)) | (1L << (CONSTRAINT_CATALOG - 369)) | (1L << (CONSTRAINT_SCHEMA - 369)) | (1L << (CONSTRAINT_NAME - 369)) | (1L << (CONTAINS - 369)) | (1L << (CONTEXT - 369)) | (1L << (CONTRIBUTORS - 369)) | (1L << (COPY - 369)) | (1L << (CPU - 369)) | (1L << (CURSOR_NAME - 369)) | (1L << (DATA - 369)) | (1L << (DATAFILE - 369)) | (1L << (DEALLOCATE - 369)) | (1L << (DEFAULT_AUTH - 369)) | (1L << (DEFINER - 369)) | (1L << (DELAY_KEY_WRITE - 369)) | (1L << (DES_KEY_FILE - 369)) | (1L << (DIRECTORY - 369)) | (1L << (DISABLE - 369)) | (1L << (DISCARD - 369)) | (1L << (DISK - 369)) | (1L << (DO - 369)) | (1L << (DUMPFILE - 369)) | (1L << (DUPLICATE - 369)) | (1L << (DYNAMIC - 369)) | (1L << (ENABLE - 369)) | (1L << (ENCRYPTION - 369)) | (1L << (END - 369)) | (1L << (ENDS - 369)) | (1L << (ENGINE - 369)) | (1L << (ENGINES - 369)) | (1L << (ERROR - 369)) | (1L << (ERRORS - 369)) | (1L << (ESCAPE - 369)) | (1L << (EVEN - 369)) | (1L << (EVENT - 369)) | (1L << (EVENTS - 369)) | (1L << (EVERY - 369)) | (1L << (EXCHANGE - 369)) | (1L << (EXCLUSIVE - 369)) | (1L << (EXPIRE - 369)) | (1L << (EXPORT - 369)) | (1L << (EXTENDED - 369)) | (1L << (EXTENT_SIZE - 369)) | (1L << (FAILED_LOGIN_ATTEMPTS - 369)) | (1L << (FAST - 369)) | (1L << (FAULTS - 369)) | (1L << (FIELDS - 369)) | (1L << (FILE_BLOCK_SIZE - 369)) | (1L << (FILTER - 369)) | (1L << (FIRST - 369)) | (1L << (FIXED - 369)) | (1L << (FLUSH - 369)))) != 0) || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (FOLLOWS - 434)) | (1L << (FOUND - 434)) | (1L << (FULL - 434)) | (1L << (FUNCTION - 434)) | (1L << (GENERAL - 434)) | (1L << (GLOBAL - 434)) | (1L << (GRANTS - 434)) | (1L << (GROUP_REPLICATION - 434)) | (1L << (HANDLER - 434)) | (1L << (HASH - 434)) | (1L << (HELP - 434)) | (1L << (HISTORY - 434)) | (1L << (HOST - 434)) | (1L << (HOSTS - 434)) | (1L << (IDENTIFIED - 434)) | (1L << (IGNORE_SERVER_IDS - 434)) | (1L << (IMPORT - 434)) | (1L << (INDEXES - 434)) | (1L << (INITIAL_SIZE - 434)) | (1L << (INPLACE - 434)) | (1L << (INSERT_METHOD - 434)) | (1L << (INSTALL - 434)) | (1L << (INSTANCE - 434)) | (1L << (INSTANT - 434)) | (1L << (INVOKER - 434)) | (1L << (IO - 434)) | (1L << (IO_THREAD - 434)) | (1L << (IPC - 434)) | (1L << (ISOLATION - 434)) | (1L << (ISSUER - 434)) | (1L << (JSON - 434)) | (1L << (KEY_BLOCK_SIZE - 434)) | (1L << (LANGUAGE - 434)) | (1L << (LAST - 434)) | (1L << (LEAVES - 434)) | (1L << (LESS - 434)) | (1L << (LEVEL - 434)) | (1L << (LIST - 434)) | (1L << (LOCAL - 434)) | (1L << (LOGFILE - 434)) | (1L << (LOGS - 434)) | (1L << (MASTER - 434)) | (1L << (MASTER_AUTO_POSITION - 434)) | (1L << (MASTER_CONNECT_RETRY - 434)) | (1L << (MASTER_DELAY - 434)) | (1L << (MASTER_HEARTBEAT_PERIOD - 434)) | (1L << (MASTER_HOST - 434)) | (1L << (MASTER_LOG_FILE - 434)) | (1L << (MASTER_LOG_POS - 434)) | (1L << (MASTER_PASSWORD - 434)) | (1L << (MASTER_PORT - 434)) | (1L << (MASTER_RETRY_COUNT - 434)) | (1L << (MASTER_SSL - 434)) | (1L << (MASTER_SSL_CA - 434)) | (1L << (MASTER_SSL_CAPATH - 434)) | (1L << (MASTER_SSL_CERT - 434)) | (1L << (MASTER_SSL_CIPHER - 434)) | (1L << (MASTER_SSL_CRL - 434)) | (1L << (MASTER_SSL_CRLPATH - 434)) | (1L << (MASTER_SSL_KEY - 434)) | (1L << (MASTER_TLS_VERSION - 434)) | (1L << (MASTER_USER - 434)))) != 0) || ((((_la - 498)) & ~0x3f) == 0 && ((1L << (_la - 498)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 498)) | (1L << (MAX_QUERIES_PER_HOUR - 498)) | (1L << (MAX_ROWS - 498)) | (1L << (MAX_SIZE - 498)) | (1L << (MAX_UPDATES_PER_HOUR - 498)) | (1L << (MAX_USER_CONNECTIONS - 498)) | (1L << (MEDIUM - 498)) | (1L << (MEMBER - 498)) | (1L << (MERGE - 498)) | (1L << (MESSAGE_TEXT - 498)) | (1L << (MID - 498)) | (1L << (MIGRATE - 498)) | (1L << (MIN_ROWS - 498)) | (1L << (MODE - 498)) | (1L << (MODIFY - 498)) | (1L << (MUTEX - 498)) | (1L << (MYSQL - 498)) | (1L << (MYSQL_ERRNO - 498)) | (1L << (NAME - 498)) | (1L << (NAMES - 498)) | (1L << (NCHAR - 498)) | (1L << (NEVER - 498)) | (1L << (NEXT - 498)) | (1L << (NO - 498)) | (1L << (NOCOPY - 498)) | (1L << (NOWAIT - 498)) | (1L << (NODEGROUP - 498)) | (1L << (NONE - 498)) | (1L << (ODBC - 498)) | (1L << (OFFLINE - 498)) | (1L << (OFFSET - 498)) | (1L << (OF - 498)) | (1L << (OJ - 498)) | (1L << (OLD_PASSWORD - 498)) | (1L << (ONE - 498)) | (1L << (ONLINE - 498)) | (1L << (ONLY - 498)) | (1L << (OPEN - 498)) | (1L << (OPTIMIZER_COSTS - 498)) | (1L << (OPTIONS - 498)) | (1L << (OWNER - 498)) | (1L << (PACK_KEYS - 498)) | (1L << (PAGE - 498)) | (1L << (PARSER - 498)) | (1L << (PARTIAL - 498)) | (1L << (PARTITIONING - 498)) | (1L << (PARTITIONS - 498)) | (1L << (PASSWORD - 498)) | (1L << (PASSWORD_LOCK_TIME - 498)) | (1L << (PHASE - 498)) | (1L << (PLUGIN - 498)) | (1L << (PLUGIN_DIR - 498)) | (1L << (PLUGINS - 498)) | (1L << (PORT - 498)) | (1L << (PRECEDES - 498)) | (1L << (PREPARE - 498)) | (1L << (PRESERVE - 498)))) != 0) || ((((_la - 562)) & ~0x3f) == 0 && ((1L << (_la - 562)) & ((1L << (PREV - 562)) | (1L << (PROCESSLIST - 562)) | (1L << (PROFILE - 562)) | (1L << (PROFILES - 562)) | (1L << (PROXY - 562)) | (1L << (QUERY - 562)) | (1L << (QUICK - 562)) | (1L << (REBUILD - 562)) | (1L << (RECOVER - 562)) | (1L << (RECURSIVE - 562)) | (1L << (REDO_BUFFER_SIZE - 562)) | (1L << (REDUNDANT - 562)) | (1L << (RELAY - 562)) | (1L << (RELAY_LOG_FILE - 562)) | (1L << (RELAY_LOG_POS - 562)) | (1L << (RELAYLOG - 562)) | (1L << (REMOVE - 562)) | (1L << (REORGANIZE - 562)) | (1L << (REPAIR - 562)) | (1L << (REPLICATE_DO_DB - 562)) | (1L << (REPLICATE_DO_TABLE - 562)) | (1L << (REPLICATE_IGNORE_DB - 562)) | (1L << (REPLICATE_IGNORE_TABLE - 562)) | (1L << (REPLICATE_REWRITE_DB - 562)) | (1L << (REPLICATE_WILD_DO_TABLE - 562)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 562)) | (1L << (REPLICATION - 562)) | (1L << (RESET - 562)) | (1L << (RESUME - 562)) | (1L << (RETURNED_SQLSTATE - 562)) | (1L << (RETURNS - 562)) | (1L << (REUSE - 562)) | (1L << (ROLE - 562)) | (1L << (ROLLBACK - 562)) | (1L << (ROLLUP - 562)) | (1L << (ROTATE - 562)) | (1L << (ROW - 562)) | (1L << (ROWS - 562)) | (1L << (ROW_FORMAT - 562)) | (1L << (RTREE - 562)) | (1L << (SAVEPOINT - 562)) | (1L << (SCHEDULE - 562)) | (1L << (SECURITY - 562)) | (1L << (SERVER - 562)) | (1L << (SESSION - 562)) | (1L << (SHARE - 562)) | (1L << (SHARED - 562)) | (1L << (SIGNED - 562)) | (1L << (SIMPLE - 562)) | (1L << (SLAVE - 562)) | (1L << (SLOW - 562)) | (1L << (SNAPSHOT - 562)) | (1L << (SOCKET - 562)) | (1L << (SOME - 562)) | (1L << (SONAME - 562)) | (1L << (SOUNDS - 562)) | (1L << (SOURCE - 562)) | (1L << (SQL_AFTER_GTIDS - 562)) | (1L << (SQL_AFTER_MTS_GAPS - 562)) | (1L << (SQL_BEFORE_GTIDS - 562)) | (1L << (SQL_BUFFER_RESULT - 562)))) != 0) || ((((_la - 626)) & ~0x3f) == 0 && ((1L << (_la - 626)) & ((1L << (SQL_CACHE - 626)) | (1L << (SQL_NO_CACHE - 626)) | (1L << (SQL_THREAD - 626)) | (1L << (START - 626)) | (1L << (STARTS - 626)) | (1L << (STATS_AUTO_RECALC - 626)) | (1L << (STATS_PERSISTENT - 626)) | (1L << (STATS_SAMPLE_PAGES - 626)) | (1L << (STATUS - 626)) | (1L << (STOP - 626)) | (1L << (STORAGE - 626)) | (1L << (STRING - 626)) | (1L << (SUBCLASS_ORIGIN - 626)) | (1L << (SUBJECT - 626)) | (1L << (SUBPARTITION - 626)) | (1L << (SUBPARTITIONS - 626)) | (1L << (SUSPEND - 626)) | (1L << (SWAPS - 626)) | (1L << (SWITCHES - 626)) | (1L << (TABLE_NAME - 626)) | (1L << (TABLESPACE - 626)) | (1L << (TABLE_TYPE - 626)) | (1L << (TEMPORARY - 626)) | (1L << (TEMPTABLE - 626)) | (1L << (THAN - 626)) | (1L << (TRADITIONAL - 626)) | (1L << (TRANSACTION - 626)) | (1L << (TRANSACTIONAL - 626)) | (1L << (TRIGGERS - 626)) | (1L << (TRUNCATE - 626)) | (1L << (UNBOUNDED - 626)) | (1L << (UNDEFINED - 626)) | (1L << (UNDOFILE - 626)) | (1L << (UNDO_BUFFER_SIZE - 626)) | (1L << (UNINSTALL - 626)) | (1L << (UNKNOWN - 626)) | (1L << (UNTIL - 626)) | (1L << (UPGRADE - 626)) | (1L << (USER - 626)) | (1L << (USE_FRM - 626)) | (1L << (USER_RESOURCES - 626)) | (1L << (VALIDATION - 626)) | (1L << (VALUE - 626)) | (1L << (VARIABLES - 626)) | (1L << (VIEW - 626)) | (1L << (VIRTUAL - 626)) | (1L << (WAIT - 626)) | (1L << (WARNINGS - 626)) | (1L << (WITHOUT - 626)) | (1L << (WORK - 626)) | (1L << (WRAPPER - 626)) | (1L << (X509 - 626)) | (1L << (XA - 626)) | (1L << (XML - 626)) | (1L << (EUR - 626)) | (1L << (USA - 626)) | (1L << (JIS - 626)) | (1L << (ISO - 626)) | (1L << (INTERNAL - 626)))) != 0) || ((((_la - 697)) & ~0x3f) == 0 && ((1L << (_la - 697)) & ((1L << (ADMIN - 697)) | (1L << (AUDIT_ABORT_EXEMPT - 697)) | (1L << (AUDIT_ADMIN - 697)) | (1L << (BACKUP_ADMIN - 697)) | (1L << (BINLOG_ADMIN - 697)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 697)) | (1L << (CLONE_ADMIN - 697)) | (1L << (CONNECTION_ADMIN - 697)) | (1L << (ENCRYPTION_KEY_ADMIN - 697)) | (1L << (FIREWALL_ADMIN - 697)) | (1L << (FIREWALL_EXEMPT - 697)) | (1L << (FIREWALL_USER - 697)) | (1L << (GROUP_REPLICATION_ADMIN - 697)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 697)) | (1L << (INVOKE - 697)) | (1L << (LAMBDA - 697)) | (1L << (NDB_STORED_USER - 697)) | (1L << (PASSWORDLESS_USER_ADMIN - 697)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 697)) | (1L << (REPLICATION_APPLIER - 697)) | (1L << (REPLICATION_SLAVE_ADMIN - 697)) | (1L << (RESOURCE_GROUP_ADMIN - 697)) | (1L << (RESOURCE_GROUP_USER - 697)) | (1L << (ROLE_ADMIN - 697)) | (1L << (S3 - 697)) | (1L << (SESSION_VARIABLES_ADMIN - 697)) | (1L << (SET_USER_ID - 697)) | (1L << (SHOW_ROUTINE - 697)) | (1L << (SYSTEM_VARIABLES_ADMIN - 697)) | (1L << (TABLE_ENCRYPTION_ADMIN - 697)) | (1L << (VERSION_TOKEN_ADMIN - 697)) | (1L << (XA_RECOVER_ADMIN - 697)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME || _la==TP_CONNECTION_ADMIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(MySqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(MySqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(MySqlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(MySqlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(MySqlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(MySqlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(MySqlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(MySqlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(MySqlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(MySqlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(MySqlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(MySqlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(MySqlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(MySqlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(MySqlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(MySqlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(MySqlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(MySqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(MySqlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7352);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (LEFT - 97)) | (1L << (RIGHT - 97)) | (1L << (SCHEMA - 97)))) != 0) || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (DATE - 217)) | (1L << (TIME - 217)) | (1L << (TIMESTAMP - 217)) | (1L << (YEAR - 217)) | (1L << (JSON_ARRAY - 217)) | (1L << (JSON_ARRAYAGG - 217)) | (1L << (JSON_ARRAY_APPEND - 217)) | (1L << (JSON_ARRAY_INSERT - 217)) | (1L << (JSON_CONTAINS - 217)) | (1L << (JSON_CONTAINS_PATH - 217)) | (1L << (JSON_DEPTH - 217)) | (1L << (JSON_EXTRACT - 217)) | (1L << (JSON_INSERT - 217)) | (1L << (JSON_KEYS - 217)) | (1L << (JSON_LENGTH - 217)) | (1L << (JSON_MERGE - 217)) | (1L << (JSON_MERGE_PATCH - 217)) | (1L << (JSON_MERGE_PRESERVE - 217)) | (1L << (JSON_OBJECT - 217)) | (1L << (JSON_OBJECTAGG - 217)) | (1L << (JSON_OVERLAPS - 217)) | (1L << (JSON_PRETTY - 217)) | (1L << (JSON_QUOTE - 217)) | (1L << (JSON_REMOVE - 217)) | (1L << (JSON_REPLACE - 217)) | (1L << (JSON_SCHEMA_VALID - 217)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 217)) | (1L << (JSON_SEARCH - 217)) | (1L << (JSON_SET - 217)) | (1L << (JSON_STORAGE_FREE - 217)) | (1L << (JSON_STORAGE_SIZE - 217)) | (1L << (JSON_TABLE - 217)) | (1L << (JSON_TYPE - 217)) | (1L << (JSON_UNQUOTE - 217)))) != 0) || ((((_la - 281)) & ~0x3f) == 0 && ((1L << (_la - 281)) & ((1L << (JSON_VALID - 281)) | (1L << (JSON_VALUE - 281)) | (1L << (COUNT - 281)) | (1L << (CUME_DIST - 281)) | (1L << (DENSE_RANK - 281)) | (1L << (FIRST_VALUE - 281)) | (1L << (LAG - 281)) | (1L << (LAST_VALUE - 281)) | (1L << (LEAD - 281)) | (1L << (NTILE - 281)) | (1L << (NTH_VALUE - 281)) | (1L << (PERCENT_RANK - 281)) | (1L << (RANK - 281)) | (1L << (ROW_NUMBER - 281)) | (1L << (POSITION - 281)))) != 0) || _la==INVISIBLE || ((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & ((1L << (VISIBLE - 673)) | (1L << (QUARTER - 673)) | (1L << (MONTH - 673)) | (1L << (DAY - 673)) | (1L << (HOUR - 673)) | (1L << (MINUTE - 673)) | (1L << (WEEK - 673)) | (1L << (SECOND - 673)) | (1L << (MICROSECOND - 673)) | (1L << (SESSION_VARIABLES_ADMIN - 673)))) != 0) || ((((_la - 802)) & ~0x3f) == 0 && ((1L << (_la - 802)) & ((1L << (GEOMETRYCOLLECTION - 802)) | (1L << (LINESTRING - 802)) | (1L << (MULTILINESTRING - 802)) | (1L << (MULTIPOINT - 802)) | (1L << (MULTIPOLYGON - 802)) | (1L << (POINT - 802)) | (1L << (POLYGON - 802)) | (1L << (ABS - 802)) | (1L << (ACOS - 802)) | (1L << (ADDDATE - 802)) | (1L << (ADDTIME - 802)) | (1L << (AES_DECRYPT - 802)) | (1L << (AES_ENCRYPT - 802)) | (1L << (AREA - 802)) | (1L << (ASBINARY - 802)) | (1L << (ASIN - 802)) | (1L << (ASTEXT - 802)) | (1L << (ASWKB - 802)) | (1L << (ASWKT - 802)) | (1L << (ASYMMETRIC_DECRYPT - 802)) | (1L << (ASYMMETRIC_DERIVE - 802)) | (1L << (ASYMMETRIC_ENCRYPT - 802)) | (1L << (ASYMMETRIC_SIGN - 802)) | (1L << (ASYMMETRIC_VERIFY - 802)) | (1L << (ATAN - 802)) | (1L << (ATAN2 - 802)) | (1L << (BENCHMARK - 802)) | (1L << (BIN - 802)) | (1L << (BIT_COUNT - 802)) | (1L << (BIT_LENGTH - 802)) | (1L << (BUFFER - 802)) | (1L << (CEIL - 802)) | (1L << (CEILING - 802)) | (1L << (CENTROID - 802)) | (1L << (CHARACTER_LENGTH - 802)) | (1L << (CHARSET - 802)) | (1L << (CHAR_LENGTH - 802)) | (1L << (COERCIBILITY - 802)) | (1L << (COLLATION - 802)) | (1L << (COMPRESS - 802)) | (1L << (CONCAT - 802)) | (1L << (CONCAT_WS - 802)) | (1L << (CONNECTION_ID - 802)) | (1L << (CONV - 802)) | (1L << (CONVERT_TZ - 802)) | (1L << (COS - 802)) | (1L << (COT - 802)) | (1L << (CRC32 - 802)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 802)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 802)) | (1L << (CREATE_DH_PARAMETERS - 802)) | (1L << (CREATE_DIGEST - 802)) | (1L << (CROSSES - 802)) | (1L << (DATEDIFF - 802)) | (1L << (DATE_FORMAT - 802)) | (1L << (DAYNAME - 802)) | (1L << (DAYOFMONTH - 802)) | (1L << (DAYOFWEEK - 802)) | (1L << (DAYOFYEAR - 802)) | (1L << (DECODE - 802)) | (1L << (DEGREES - 802)))) != 0) || ((((_la - 866)) & ~0x3f) == 0 && ((1L << (_la - 866)) & ((1L << (DES_DECRYPT - 866)) | (1L << (DES_ENCRYPT - 866)) | (1L << (DIMENSION - 866)) | (1L << (DISJOINT - 866)) | (1L << (ELT - 866)) | (1L << (ENCODE - 866)) | (1L << (ENCRYPT - 866)) | (1L << (ENDPOINT - 866)) | (1L << (ENVELOPE - 866)) | (1L << (EQUALS - 866)) | (1L << (EXP - 866)) | (1L << (EXPORT_SET - 866)) | (1L << (EXTERIORRING - 866)) | (1L << (EXTRACTVALUE - 866)) | (1L << (FIELD - 866)) | (1L << (FIND_IN_SET - 866)) | (1L << (FLOOR - 866)) | (1L << (FORMAT - 866)) | (1L << (FOUND_ROWS - 866)) | (1L << (FROM_BASE64 - 866)) | (1L << (FROM_DAYS - 866)) | (1L << (FROM_UNIXTIME - 866)) | (1L << (GEOMCOLLFROMTEXT - 866)) | (1L << (GEOMCOLLFROMWKB - 866)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 866)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 866)) | (1L << (GEOMETRYFROMTEXT - 866)) | (1L << (GEOMETRYFROMWKB - 866)) | (1L << (GEOMETRYN - 866)) | (1L << (GEOMETRYTYPE - 866)) | (1L << (GEOMFROMTEXT - 866)) | (1L << (GEOMFROMWKB - 866)) | (1L << (GET_FORMAT - 866)) | (1L << (GET_LOCK - 866)) | (1L << (GLENGTH - 866)) | (1L << (GREATEST - 866)) | (1L << (GTID_SUBSET - 866)) | (1L << (GTID_SUBTRACT - 866)) | (1L << (HEX - 866)) | (1L << (IFNULL - 866)) | (1L << (INET6_ATON - 866)) | (1L << (INET6_NTOA - 866)) | (1L << (INET_ATON - 866)) | (1L << (INET_NTOA - 866)) | (1L << (INSTR - 866)) | (1L << (INTERIORRINGN - 866)) | (1L << (INTERSECTS - 866)) | (1L << (ISCLOSED - 866)) | (1L << (ISEMPTY - 866)) | (1L << (ISNULL - 866)) | (1L << (ISSIMPLE - 866)) | (1L << (IS_FREE_LOCK - 866)) | (1L << (IS_IPV4 - 866)) | (1L << (IS_IPV4_COMPAT - 866)) | (1L << (IS_IPV4_MAPPED - 866)) | (1L << (IS_IPV6 - 866)) | (1L << (IS_USED_LOCK - 866)) | (1L << (LAST_INSERT_ID - 866)) | (1L << (LCASE - 866)) | (1L << (LEAST - 866)) | (1L << (LENGTH - 866)) | (1L << (LINEFROMTEXT - 866)) | (1L << (LINEFROMWKB - 866)))) != 0) || ((((_la - 930)) & ~0x3f) == 0 && ((1L << (_la - 930)) & ((1L << (LINESTRINGFROMTEXT - 930)) | (1L << (LINESTRINGFROMWKB - 930)) | (1L << (LN - 930)) | (1L << (LOAD_FILE - 930)) | (1L << (LOCATE - 930)) | (1L << (LOG - 930)) | (1L << (LOG10 - 930)) | (1L << (LOG2 - 930)) | (1L << (LOWER - 930)) | (1L << (LPAD - 930)) | (1L << (LTRIM - 930)) | (1L << (MAKEDATE - 930)) | (1L << (MAKETIME - 930)) | (1L << (MAKE_SET - 930)) | (1L << (MASTER_POS_WAIT - 930)) | (1L << (MBRCONTAINS - 930)) | (1L << (MBRDISJOINT - 930)) | (1L << (MBREQUAL - 930)) | (1L << (MBRINTERSECTS - 930)) | (1L << (MBROVERLAPS - 930)) | (1L << (MBRTOUCHES - 930)) | (1L << (MBRWITHIN - 930)) | (1L << (MD5 - 930)) | (1L << (MLINEFROMTEXT - 930)) | (1L << (MLINEFROMWKB - 930)) | (1L << (MONTHNAME - 930)) | (1L << (MPOINTFROMTEXT - 930)) | (1L << (MPOINTFROMWKB - 930)) | (1L << (MPOLYFROMTEXT - 930)) | (1L << (MPOLYFROMWKB - 930)) | (1L << (MULTILINESTRINGFROMTEXT - 930)) | (1L << (MULTILINESTRINGFROMWKB - 930)) | (1L << (MULTIPOINTFROMTEXT - 930)) | (1L << (MULTIPOINTFROMWKB - 930)) | (1L << (MULTIPOLYGONFROMTEXT - 930)) | (1L << (MULTIPOLYGONFROMWKB - 930)) | (1L << (NAME_CONST - 930)) | (1L << (NULLIF - 930)) | (1L << (NUMGEOMETRIES - 930)) | (1L << (NUMINTERIORRINGS - 930)) | (1L << (NUMPOINTS - 930)) | (1L << (OCT - 930)) | (1L << (OCTET_LENGTH - 930)) | (1L << (ORD - 930)) | (1L << (OVERLAPS - 930)) | (1L << (PERIOD_ADD - 930)) | (1L << (PERIOD_DIFF - 930)) | (1L << (PI - 930)) | (1L << (POINTFROMTEXT - 930)) | (1L << (POINTFROMWKB - 930)) | (1L << (POINTN - 930)) | (1L << (POLYFROMTEXT - 930)) | (1L << (POLYFROMWKB - 930)) | (1L << (POLYGONFROMTEXT - 930)) | (1L << (POLYGONFROMWKB - 930)) | (1L << (POW - 930)) | (1L << (POWER - 930)) | (1L << (QUOTE - 930)) | (1L << (RADIANS - 930)) | (1L << (RAND - 930)) | (1L << (RANDOM_BYTES - 930)) | (1L << (RELEASE_LOCK - 930)) | (1L << (REVERSE - 930)) | (1L << (ROUND - 930)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (ROW_COUNT - 994)) | (1L << (RPAD - 994)) | (1L << (RTRIM - 994)) | (1L << (SEC_TO_TIME - 994)) | (1L << (SESSION_USER - 994)) | (1L << (SHA - 994)) | (1L << (SHA1 - 994)) | (1L << (SHA2 - 994)) | (1L << (SIGN - 994)) | (1L << (SIN - 994)) | (1L << (SLEEP - 994)) | (1L << (SOUNDEX - 994)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 994)) | (1L << (SQRT - 994)) | (1L << (SRID - 994)) | (1L << (STARTPOINT - 994)) | (1L << (STRCMP - 994)) | (1L << (STR_TO_DATE - 994)) | (1L << (ST_AREA - 994)) | (1L << (ST_ASBINARY - 994)) | (1L << (ST_ASTEXT - 994)) | (1L << (ST_ASWKB - 994)) | (1L << (ST_ASWKT - 994)) | (1L << (ST_BUFFER - 994)) | (1L << (ST_CENTROID - 994)) | (1L << (ST_CONTAINS - 994)) | (1L << (ST_CROSSES - 994)) | (1L << (ST_DIFFERENCE - 994)) | (1L << (ST_DIMENSION - 994)) | (1L << (ST_DISJOINT - 994)) | (1L << (ST_DISTANCE - 994)) | (1L << (ST_ENDPOINT - 994)) | (1L << (ST_ENVELOPE - 994)) | (1L << (ST_EQUALS - 994)) | (1L << (ST_EXTERIORRING - 994)) | (1L << (ST_GEOMCOLLFROMTEXT - 994)) | (1L << (ST_GEOMCOLLFROMTXT - 994)) | (1L << (ST_GEOMCOLLFROMWKB - 994)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 994)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 994)) | (1L << (ST_GEOMETRYFROMTEXT - 994)) | (1L << (ST_GEOMETRYFROMWKB - 994)) | (1L << (ST_GEOMETRYN - 994)) | (1L << (ST_GEOMETRYTYPE - 994)) | (1L << (ST_GEOMFROMTEXT - 994)) | (1L << (ST_GEOMFROMWKB - 994)) | (1L << (ST_INTERIORRINGN - 994)) | (1L << (ST_INTERSECTION - 994)) | (1L << (ST_INTERSECTS - 994)) | (1L << (ST_ISCLOSED - 994)) | (1L << (ST_ISEMPTY - 994)) | (1L << (ST_ISSIMPLE - 994)) | (1L << (ST_LINEFROMTEXT - 994)) | (1L << (ST_LINEFROMWKB - 994)) | (1L << (ST_LINESTRINGFROMTEXT - 994)) | (1L << (ST_LINESTRINGFROMWKB - 994)) | (1L << (ST_NUMGEOMETRIES - 994)) | (1L << (ST_NUMINTERIORRING - 994)) | (1L << (ST_NUMINTERIORRINGS - 994)) | (1L << (ST_NUMPOINTS - 994)) | (1L << (ST_OVERLAPS - 994)) | (1L << (ST_POINTFROMTEXT - 994)))) != 0) || ((((_la - 1058)) & ~0x3f) == 0 && ((1L << (_la - 1058)) & ((1L << (ST_POINTFROMWKB - 1058)) | (1L << (ST_POINTN - 1058)) | (1L << (ST_POLYFROMTEXT - 1058)) | (1L << (ST_POLYFROMWKB - 1058)) | (1L << (ST_POLYGONFROMTEXT - 1058)) | (1L << (ST_POLYGONFROMWKB - 1058)) | (1L << (ST_SRID - 1058)) | (1L << (ST_STARTPOINT - 1058)) | (1L << (ST_SYMDIFFERENCE - 1058)) | (1L << (ST_TOUCHES - 1058)) | (1L << (ST_UNION - 1058)) | (1L << (ST_WITHIN - 1058)) | (1L << (ST_X - 1058)) | (1L << (ST_Y - 1058)) | (1L << (SUBDATE - 1058)) | (1L << (SUBSTRING_INDEX - 1058)) | (1L << (SUBTIME - 1058)) | (1L << (SYSTEM_USER - 1058)) | (1L << (TAN - 1058)) | (1L << (TIMEDIFF - 1058)) | (1L << (TIMESTAMPADD - 1058)) | (1L << (TIMESTAMPDIFF - 1058)) | (1L << (TIME_FORMAT - 1058)) | (1L << (TIME_TO_SEC - 1058)) | (1L << (TOUCHES - 1058)) | (1L << (TO_BASE64 - 1058)) | (1L << (TO_DAYS - 1058)) | (1L << (TO_SECONDS - 1058)) | (1L << (UCASE - 1058)) | (1L << (UNCOMPRESS - 1058)) | (1L << (UNCOMPRESSED_LENGTH - 1058)) | (1L << (UNHEX - 1058)) | (1L << (UNIX_TIMESTAMP - 1058)) | (1L << (UPDATEXML - 1058)) | (1L << (UPPER - 1058)) | (1L << (UUID - 1058)) | (1L << (UUID_SHORT - 1058)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1058)) | (1L << (VERSION - 1058)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1058)) | (1L << (WEEKDAY - 1058)) | (1L << (WEEKOFYEAR - 1058)) | (1L << (WEIGHT_STRING - 1058)) | (1L << (WITHIN - 1058)) | (1L << (YEARWEEK - 1058)) | (1L << (Y_FUNCTION - 1058)) | (1L << (X_FUNCTION - 1058)) | (1L << (MOD - 1058)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 336:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 337:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 338:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u048a\u1cbd\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\3\2\5\2\u02c4\n\2\3\2\3\2\5\2\u02c8\n\2\3\2\3\2\3\3\3\3\3\3\5\3\u02cf"+
		"\n\3\3\3\5\3\u02d2\n\3\3\3\7\3\u02d5\n\3\f\3\16\3\u02d8\13\3\3\3\3\3\3"+
		"\3\5\3\u02dd\n\3\3\3\5\3\u02e0\n\3\3\3\5\3\u02e3\n\3\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\5\4\u02ec\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0316\n\6\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0324\n\7\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\5\b\u032f\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\3\t\3\t\3\t\5\t\u0340\n\t\3\n\3\n\3\n\5\n\u0345\n\n\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0351\n\13\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\5\f\u036c\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0375\n"+
		"\r\3\16\3\16\3\16\5\16\u037a\n\16\3\16\3\16\7\16\u037e\n\16\f\16\16\16"+
		"\u0381\13\16\3\17\3\17\5\17\u0385\n\17\3\17\3\17\5\17\u0389\n\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0392\n\17\3\17\5\17\u0395\n\17\3"+
		"\17\5\17\u0398\n\17\3\17\3\17\5\17\u039c\n\17\3\17\3\17\3\17\3\20\3\20"+
		"\5\20\u03a3\n\20\3\20\5\20\u03a6\n\20\3\20\3\20\3\20\5\20\u03ab\n\20\3"+
		"\20\3\20\3\20\3\20\7\20\u03b1\n\20\f\20\16\20\u03b4\13\20\3\20\3\20\5"+
		"\20\u03b8\n\20\3\20\3\20\3\20\5\20\u03bd\n\20\3\20\7\20\u03c0\n\20\f\20"+
		"\16\20\u03c3\13\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u03ce"+
		"\n\21\3\21\5\21\u03d1\n\21\3\21\3\21\5\21\u03d5\n\21\3\21\5\21\u03d8\n"+
		"\21\3\21\3\21\5\21\u03dc\n\21\3\21\5\21\u03df\n\21\3\21\3\21\5\21\u03e3"+
		"\n\21\3\21\5\21\u03e6\n\21\3\21\5\21\u03e9\n\21\3\21\3\21\5\21\u03ed\n"+
		"\21\3\21\5\21\u03f0\n\21\3\21\3\21\5\21\u03f4\n\21\3\21\3\21\3\22\3\22"+
		"\5\22\u03fa\n\22\3\22\3\22\3\22\3\22\5\22\u0400\n\22\3\22\3\22\7\22\u0404"+
		"\n\22\f\22\16\22\u0407\13\22\3\22\3\22\7\22\u040b\n\22\f\22\16\22\u040e"+
		"\13\22\3\22\3\22\3\23\3\23\5\23\u0414\n\23\3\23\5\23\u0417\n\23\3\23\3"+
		"\23\5\23\u041b\n\23\3\23\3\23\3\23\5\23\u0420\n\23\3\23\3\23\7\23\u0424"+
		"\n\23\f\23\16\23\u0427\13\23\3\23\3\23\3\23\3\23\7\23\u042d\n\23\f\23"+
		"\16\23\u0430\13\23\3\23\3\23\5\23\u0434\n\23\3\24\3\24\3\24\5\24\u0439"+
		"\n\24\3\24\3\24\3\24\7\24\u043e\n\24\f\24\16\24\u0441\13\24\3\25\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25\u044f\n\25\f\25"+
		"\16\25\u0452\13\25\3\25\3\25\3\26\3\26\5\26\u0458\n\26\3\26\3\26\5\26"+
		"\u045c\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0466\n\26\3"+
		"\26\3\26\5\26\u046a\n\26\3\26\3\26\5\26\u046e\n\26\3\26\3\26\5\26\u0472"+
		"\n\26\3\26\3\26\5\26\u0476\n\26\3\26\7\26\u0479\n\26\f\26\16\26\u047c"+
		"\13\26\5\26\u047e\n\26\3\26\5\26\u0481\n\26\3\26\5\26\u0484\n\26\3\26"+
		"\5\26\u0487\n\26\3\26\3\26\3\26\3\26\5\26\u048d\n\26\3\26\3\26\5\26\u0491"+
		"\n\26\3\26\3\26\3\26\3\26\5\26\u0497\n\26\3\26\7\26\u049a\n\26\f\26\16"+
		"\26\u049d\13\26\5\26\u049f\n\26\3\26\5\26\u04a2\n\26\5\26\u04a4\n\26\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u04af\n\27\3\27\3\27"+
		"\5\27\u04b3\n\27\3\27\5\27\u04b6\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3"+
		"\30\3\30\3\30\3\30\3\30\3\30\5\30\u04c4\n\30\3\30\5\30\u04c7\n\30\3\30"+
		"\3\30\5\30\u04cb\n\30\3\30\5\30\u04ce\n\30\3\30\3\30\5\30\u04d2\n\30\3"+
		"\30\5\30\u04d5\n\30\3\30\3\30\5\30\u04d9\n\30\3\30\5\30\u04dc\n\30\3\30"+
		"\3\30\5\30\u04e0\n\30\3\30\5\30\u04e3\n\30\3\30\5\30\u04e6\n\30\3\30\3"+
		"\30\5\30\u04ea\n\30\3\30\5\30\u04ed\n\30\3\30\3\30\5\30\u04f1\n\30\3\30"+
		"\3\30\3\31\3\31\5\31\u04f7\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\3\31\5\31\u0504\n\31\3\31\3\31\3\32\3\32\5\32\u050a\n\32\3"+
		"\32\3\32\3\33\3\33\3\33\3\33\3\33\7\33\u0513\n\33\f\33\16\33\u0516\13"+
		"\33\3\33\3\33\5\33\u051a\n\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0522"+
		"\n\33\3\34\3\34\3\35\3\35\3\36\3\36\5\36\u052a\n\36\3\36\3\36\3\36\5\36"+
		"\u052f\n\36\3\36\5\36\u0532\n\36\3\36\3\36\3\36\5\36\u0537\n\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\5\36\u053f\n\36\3\36\3\36\3\36\5\36\u0544\n\36"+
		"\3\36\3\36\3\36\3\36\5\36\u054a\n\36\3\36\3\36\3\36\5\36\u054f\n\36\3"+
		"\36\3\36\5\36\u0553\n\36\5\36\u0555\n\36\3\37\5\37\u0558\n\37\3\37\3\37"+
		"\5\37\u055c\n\37\3\37\3\37\5\37\u0560\n\37\3\37\5\37\u0563\n\37\3\37\3"+
		"\37\5\37\u0567\n\37\3\37\3\37\5\37\u056b\n\37\3\37\3\37\5\37\u056f\n\37"+
		"\3\37\3\37\3\37\3\37\5\37\u0575\n\37\3\37\5\37\u0578\n\37\3 \3 \3 \3 "+
		"\3 \5 \u057f\n \3!\3!\3!\3!\3!\3!\5!\u0587\n!\5!\u0589\n!\3\"\3\"\3\""+
		"\7\"\u058e\n\"\f\"\16\"\u0591\13\"\3\"\3\"\3\"\5\"\u0596\n\"\3\"\3\"\3"+
		"\"\3\"\7\"\u059c\n\"\f\"\16\"\u059f\13\"\5\"\u05a1\n\"\3\"\3\"\3\"\7\""+
		"\u05a6\n\"\f\"\16\"\u05a9\13\"\5\"\u05ab\n\"\5\"\u05ad\n\"\3#\3#\3#\3"+
		"#\5#\u05b3\n#\3$\3$\3$\3$\5$\u05b9\n$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3"+
		"%\3%\3%\3%\3%\5%\u05ca\n%\3&\3&\3&\3&\3&\5&\u05d1\n&\3\'\3\'\3\'\3(\3"+
		"(\5(\u05d8\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u05e4\n(\3(\3(\3(\5(\u05e9"+
		"\n(\3(\5(\u05ec\n(\3)\5)\u05ef\n)\3)\3)\3)\3*\3*\3*\3+\3+\3+\3+\3+\5+"+
		"\u05fc\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0609\n+\3+\3+\3+\5+\u060e"+
		"\n+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u061e\n,\3-\3-\3-\3-"+
		"\7-\u0624\n-\f-\16-\u0627\13-\3-\3-\3.\3.\3.\3.\3.\5.\u0630\n.\3.\5.\u0633"+
		"\n.\3.\5.\u0636\n.\3/\3/\7/\u063a\n/\f/\16/\u063d\13/\3/\5/\u0640\n/\3"+
		"/\5/\u0643\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u064e"+
		"\n\60\3\60\5\60\u0651\n\60\3\60\3\60\3\60\5\60\u0656\n\60\3\60\3\60\3"+
		"\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0663\n\60\3\60\3\60"+
		"\3\60\3\60\3\60\5\60\u066a\n\60\3\60\3\60\3\60\3\60\3\60\5\60\u0671\n"+
		"\60\5\60\u0673\n\60\3\60\3\60\3\60\3\60\3\60\5\60\u067a\n\60\3\61\3\61"+
		"\5\61\u067e\n\61\5\61\u0680\n\61\3\61\3\61\3\61\5\61\u0685\n\61\3\61\5"+
		"\61\u0688\n\61\3\61\3\61\7\61\u068c\n\61\f\61\16\61\u068f\13\61\3\61\3"+
		"\61\5\61\u0693\n\61\5\61\u0695\n\61\3\61\3\61\5\61\u0699\n\61\3\61\5\61"+
		"\u069c\n\61\3\61\5\61\u069f\n\61\3\61\3\61\7\61\u06a3\n\61\f\61\16\61"+
		"\u06a6\13\61\3\61\3\61\5\61\u06aa\n\61\5\61\u06ac\n\61\3\61\3\61\3\61"+
		"\5\61\u06b1\n\61\3\61\3\61\3\61\3\61\3\61\5\61\u06b8\n\61\5\61\u06ba\n"+
		"\61\3\61\3\61\3\61\3\61\3\61\5\61\u06c1\n\61\3\62\3\62\3\62\5\62\u06c6"+
		"\n\62\3\62\3\62\5\62\u06ca\n\62\3\62\5\62\u06cd\n\62\3\63\3\63\3\63\3"+
		"\63\3\63\3\63\5\63\u06d5\n\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u06dd"+
		"\n\63\5\63\u06df\n\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u06e9"+
		"\n\64\3\65\3\65\5\65\u06ed\n\65\3\65\5\65\u06f0\n\65\3\65\3\65\7\65\u06f4"+
		"\n\65\f\65\16\65\u06f7\13\65\3\65\3\65\5\65\u06fb\n\65\3\65\5\65\u06fe"+
		"\n\65\3\65\3\65\7\65\u0702\n\65\f\65\16\65\u0705\13\65\5\65\u0707\n\65"+
		"\3\66\3\66\5\66\u070b\n\66\3\66\5\66\u070e\n\66\3\66\3\66\5\66\u0712\n"+
		"\66\3\66\3\66\3\66\5\66\u0717\n\66\3\66\3\66\3\66\5\66\u071c\n\66\3\66"+
		"\3\66\3\66\5\66\u0721\n\66\3\66\3\66\5\66\u0725\n\66\3\66\3\66\5\66\u0729"+
		"\n\66\3\66\3\66\5\66\u072d\n\66\3\66\3\66\5\66\u0731\n\66\3\66\3\66\5"+
		"\66\u0735\n\66\3\66\3\66\5\66\u0739\n\66\3\66\3\66\3\66\5\66\u073e\n\66"+
		"\3\66\3\66\3\66\5\66\u0743\n\66\3\66\3\66\3\66\5\66\u0748\n\66\3\66\3"+
		"\66\3\66\3\66\5\66\u074e\n\66\3\66\3\66\3\66\5\66\u0753\n\66\3\66\3\66"+
		"\3\66\5\66\u0758\n\66\3\66\3\66\3\66\5\66\u075d\n\66\3\66\3\66\3\66\5"+
		"\66\u0762\n\66\3\66\3\66\3\66\5\66\u0767\n\66\3\66\3\66\3\66\3\66\5\66"+
		"\u076d\n\66\3\66\3\66\3\66\5\66\u0772\n\66\3\66\3\66\3\66\5\66\u0777\n"+
		"\66\3\66\3\66\3\66\5\66\u077c\n\66\3\66\3\66\3\66\5\66\u0781\n\66\3\66"+
		"\3\66\3\66\5\66\u0786\n\66\3\66\3\66\3\66\5\66\u078b\n\66\3\66\3\66\3"+
		"\66\5\66\u0790\n\66\3\66\3\66\3\66\3\66\3\66\5\66\u0797\n\66\3\66\3\66"+
		"\3\66\5\66\u079c\n\66\3\66\3\66\3\66\5\66\u07a1\n\66\3\66\3\66\3\66\5"+
		"\66\u07a6\n\66\3\66\3\66\5\66\u07aa\n\66\3\66\3\66\3\66\5\66\u07af\n\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u07b7\n\66\3\66\3\66\3\66\5\66\u07bc"+
		"\n\66\3\66\3\66\3\66\3\66\5\66\u07c2\n\66\3\67\3\67\38\38\38\39\39\39"+
		"\39\39\59\u07ce\n9\39\39\39\39\39\59\u07d5\n9\59\u07d7\n9\39\39\39\39"+
		"\79\u07dd\n9\f9\169\u07e0\139\39\39\59\u07e4\n9\3:\5:\u07e7\n:\3:\3:\3"+
		":\3:\3:\3:\5:\u07ef\n:\3:\3:\3:\3:\5:\u07f5\n:\3:\3:\5:\u07f9\n:\3:\3"+
		":\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u0806\n:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3"+
		":\5:\u0812\n:\5:\u0814\n:\3;\5;\u0817\n;\3;\3;\3;\3;\3;\3;\5;\u081f\n"+
		";\3;\3;\3;\3;\5;\u0825\n;\3;\3;\3;\3;\5;\u082b\n;\3<\3<\3<\3<\3<\3<\3"+
		"<\3<\3<\7<\u0836\n<\f<\16<\u0839\13<\3<\3<\7<\u083d\n<\f<\16<\u0840\13"+
		"<\3<\3<\3<\3<\7<\u0846\n<\f<\16<\u0849\13<\3<\3<\5<\u084d\n<\3<\3<\3<"+
		"\3<\3<\3<\3<\7<\u0856\n<\f<\16<\u0859\13<\3<\3<\3<\3<\7<\u085f\n<\f<\16"+
		"<\u0862\13<\3<\3<\5<\u0866\n<\3<\3<\3<\3<\3<\3<\3<\3<\7<\u0870\n<\f<\16"+
		"<\u0873\13<\3<\3<\7<\u0877\n<\f<\16<\u087a\13<\3<\3<\3<\3<\7<\u0880\n"+
		"<\f<\16<\u0883\13<\3<\3<\5<\u0887\n<\3<\3<\3<\3<\3<\3<\3<\3<\7<\u0891"+
		"\n<\f<\16<\u0894\13<\3<\3<\7<\u0898\n<\f<\16<\u089b\13<\3<\3<\3<\3<\7"+
		"<\u08a1\n<\f<\16<\u08a4\13<\3<\3<\5<\u08a8\n<\3<\3<\3<\7<\u08ad\n<\f<"+
		"\16<\u08b0\13<\3<\3<\3<\3<\7<\u08b6\n<\f<\16<\u08b9\13<\3<\3<\5<\u08bd"+
		"\n<\5<\u08bf\n<\3=\3=\3=\5=\u08c4\n=\3>\3>\3>\3>\6>\u08ca\n>\r>\16>\u08cb"+
		"\3>\3>\3?\3?\3?\7?\u08d3\n?\f?\16?\u08d6\13?\3@\5@\u08d9\n@\3@\5@\u08dc"+
		"\n@\3@\3@\5@\u08e0\n@\3@\3@\3@\5@\u08e5\n@\3@\3@\3@\3@\5@\u08eb\n@\3@"+
		"\3@\3@\3@\5@\u08f1\n@\3@\3@\3@\5@\u08f6\n@\3@\3@\3@\5@\u08fb\n@\3@\3@"+
		"\3@\5@\u0900\n@\3@\3@\3@\5@\u0905\n@\3@\5@\u0908\n@\3A\3A\3A\5A\u090d"+
		"\nA\3A\6A\u0910\nA\rA\16A\u0911\3A\3A\3A\3A\3A\3A\3A\3A\5A\u091c\nA\3"+
		"B\3B\5B\u0920\nB\3B\3B\3B\3B\3B\5B\u0927\nB\3B\3B\3B\5B\u092c\nB\3B\5"+
		"B\u092f\nB\3B\3B\3B\5B\u0934\nB\3B\5B\u0937\nB\3B\3B\5B\u093b\nB\3B\3"+
		"B\5B\u093f\nB\3C\3C\3C\3C\7C\u0945\nC\fC\16C\u0948\13C\3D\3D\3D\3D\3D"+
		"\3D\3D\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u095a\nE\3E\5E\u095d\nE\3E\5E\u0960"+
		"\nE\3E\3E\5E\u0964\nE\3E\3E\3F\3F\3F\3F\7F\u096c\nF\fF\16F\u096f\13F\3"+
		"G\3G\3G\3G\3G\3G\3G\3G\7G\u0979\nG\fG\16G\u097c\13G\3G\3G\3H\3H\5H\u0982"+
		"\nH\3H\5H\u0985\nH\3H\3H\3H\5H\u098a\nH\3H\3H\3H\7H\u098f\nH\fH\16H\u0992"+
		"\13H\5H\u0994\nH\3H\5H\u0997\nH\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u09a2\n"+
		"I\3I\5I\u09a5\nI\3I\3I\5I\u09a9\nI\3I\3I\3J\3J\3J\3J\5J\u09b1\nJ\3J\5"+
		"J\u09b4\nJ\3J\3J\3J\5J\u09b9\nJ\3J\3J\3J\3J\3J\3J\5J\u09c1\nJ\3J\3J\3"+
		"J\3J\5J\u09c7\nJ\3J\3J\5J\u09cb\nJ\3K\3K\5K\u09cf\nK\3K\7K\u09d2\nK\f"+
		"K\16K\u09d5\13K\3K\3K\5K\u09d9\nK\3K\3K\3K\3K\3K\5K\u09e0\nK\3K\3K\5K"+
		"\u09e4\nK\3K\3K\3K\3K\3K\3K\3K\7K\u09ed\nK\fK\16K\u09f0\13K\3K\3K\3K\3"+
		"K\3K\5K\u09f7\nK\3K\5K\u09fa\nK\3K\3K\7K\u09fe\nK\fK\16K\u0a01\13K\3K"+
		"\3K\3K\5K\u0a06\nK\5K\u0a08\nK\3K\3K\3K\5K\u0a0d\nK\3K\5K\u0a10\nK\3K"+
		"\3K\7K\u0a14\nK\fK\16K\u0a17\13K\3K\3K\3K\5K\u0a1c\nK\5K\u0a1e\nK\3K\3"+
		"K\5K\u0a22\nK\3K\5K\u0a25\nK\3K\5K\u0a28\nK\3K\3K\7K\u0a2c\nK\fK\16K\u0a2f"+
		"\13K\3K\3K\3K\5K\u0a34\nK\3K\5K\u0a37\nK\3K\3K\7K\u0a3b\nK\fK\16K\u0a3e"+
		"\13K\3K\3K\3K\5K\u0a43\nK\5K\u0a45\nK\3K\3K\3K\5K\u0a4a\nK\3K\3K\3K\3"+
		"K\3K\3K\5K\u0a52\nK\5K\u0a54\nK\3K\3K\3K\3K\3K\3K\3K\5K\u0a5d\nK\3K\5"+
		"K\u0a60\nK\3K\5K\u0a63\nK\3K\3K\3K\5K\u0a68\nK\5K\u0a6a\nK\3K\3K\3K\3"+
		"K\3K\3K\3K\5K\u0a73\nK\3K\5K\u0a76\nK\3K\5K\u0a79\nK\3K\3K\3K\5K\u0a7e"+
		"\nK\5K\u0a80\nK\3K\3K\3K\3K\3K\3K\3K\5K\u0a89\nK\3K\3K\3K\5K\u0a8e\nK"+
		"\3K\3K\3K\3K\3K\3K\5K\u0a96\nK\3K\3K\5K\u0a9a\nK\3K\3K\3K\3K\3K\3K\5K"+
		"\u0aa2\nK\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0aac\nK\3K\3K\3K\5K\u0ab1\nK\3K"+
		"\3K\3K\3K\3K\5K\u0ab8\nK\3K\3K\5K\u0abc\nK\3K\3K\5K\u0ac0\nK\3K\3K\3K"+
		"\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0ad3\nK\3K\3K\3K\3K\3K"+
		"\3K\3K\3K\5K\u0add\nK\3K\3K\3K\3K\5K\u0ae3\nK\3K\3K\3K\3K\3K\3K\3K\3K"+
		"\3K\3K\3K\3K\3K\3K\3K\5K\u0af4\nK\3K\3K\5K\u0af8\nK\3K\3K\3K\3K\3K\3K"+
		"\3K\3K\5K\u0b02\nK\3K\3K\3K\5K\u0b07\nK\3K\5K\u0b0a\nK\3K\3K\3K\3K\3K"+
		"\3K\3K\5K\u0b13\nK\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\7K\u0b22\nK"+
		"\fK\16K\u0b25\13K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0b30\nK\3K\3K\3K\3K\3"+
		"K\5K\u0b37\nK\3K\3K\3K\3K\3K\5K\u0b3e\nK\3K\3K\3K\3K\3K\3K\3K\3K\3K\3"+
		"K\3K\7K\u0b4b\nK\fK\16K\u0b4e\13K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0b5a"+
		"\nK\3K\3K\3K\3K\5K\u0b60\nK\3K\3K\3K\3K\5K\u0b66\nK\3K\3K\3K\3K\5K\u0b6c"+
		"\nK\3K\3K\3K\3K\5K\u0b72\nK\3K\3K\3K\3K\5K\u0b78\nK\3K\3K\3K\3K\3K\3K"+
		"\5K\u0b80\nK\3K\3K\3K\3K\7K\u0b86\nK\fK\16K\u0b89\13K\3K\3K\5K\u0b8d\n"+
		"K\3L\3L\3L\5L\u0b92\nL\3L\3L\3M\3M\3M\5M\u0b99\nM\3M\3M\3N\3N\3N\5N\u0ba0"+
		"\nN\3N\3N\3N\3N\3N\5N\u0ba7\nN\3N\3N\3N\5N\u0bac\nN\3N\7N\u0baf\nN\fN"+
		"\16N\u0bb2\13N\3O\3O\3O\3O\3O\3O\3O\3O\3P\3P\3P\5P\u0bbf\nP\3P\3P\3Q\3"+
		"Q\3Q\5Q\u0bc6\nQ\3Q\3Q\3R\3R\3R\5R\u0bcd\nR\3R\3R\3S\3S\5S\u0bd3\nS\3"+
		"S\3S\5S\u0bd7\nS\3S\3S\5S\u0bdb\nS\3T\3T\3T\3T\3T\5T\u0be2\nT\3T\5T\u0be5"+
		"\nT\3U\3U\3U\5U\u0bea\nU\3U\3U\3V\3V\3V\5V\u0bf1\nV\3V\3V\3V\7V\u0bf6"+
		"\nV\fV\16V\u0bf9\13V\3V\5V\u0bfc\nV\3W\3W\3W\5W\u0c01\nW\3W\3W\3W\7W\u0c06"+
		"\nW\fW\16W\u0c09\13W\3X\3X\3X\3X\3X\3X\3X\3X\7X\u0c13\nX\fX\16X\u0c16"+
		"\13X\5X\u0c18\nX\3X\3X\3X\5X\u0c1d\nX\3X\3X\3X\5X\u0c22\nX\7X\u0c24\n"+
		"X\fX\16X\u0c27\13X\3X\3X\3X\5X\u0c2c\nX\3Y\3Y\3Y\3Y\3Y\7Y\u0c33\nY\fY"+
		"\16Y\u0c36\13Y\3Z\3Z\3Z\3Z\3[\3[\5[\u0c3e\n[\3[\3[\3\\\3\\\3\\\3\\\3\\"+
		"\5\\\u0c47\n\\\3\\\5\\\u0c4a\n\\\3]\3]\5]\u0c4e\n]\3^\3^\3^\3_\3_\3_\3"+
		"_\5_\u0c57\n_\3`\3`\5`\u0c5b\n`\3`\5`\u0c5e\n`\3`\5`\u0c61\n`\3`\3`\3"+
		"`\3`\5`\u0c67\n`\3`\5`\u0c6a\n`\3`\3`\3`\3`\5`\u0c70\n`\3`\3`\3`\3`\3"+
		"`\7`\u0c77\n`\f`\16`\u0c7a\13`\5`\u0c7c\n`\3`\3`\3`\3`\3`\3`\3`\7`\u0c85"+
		"\n`\f`\16`\u0c88\13`\5`\u0c8a\n`\3a\3a\3a\5a\u0c8f\na\3a\5a\u0c92\na\3"+
		"a\3a\3a\5a\u0c97\na\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0ca1\na\3a\3a\3a\5a\u0ca6"+
		"\na\3a\3a\6a\u0caa\na\ra\16a\u0cab\5a\u0cae\na\3a\3a\6a\u0cb2\na\ra\16"+
		"a\u0cb3\5a\u0cb6\na\3a\3a\3a\3a\5a\u0cbc\na\3a\3a\3a\3a\7a\u0cc2\na\f"+
		"a\16a\u0cc5\13a\3a\3a\5a\u0cc9\na\3a\3a\3a\3a\7a\u0ccf\na\fa\16a\u0cd2"+
		"\13a\5a\u0cd4\na\3b\3b\3b\5b\u0cd9\nb\3b\5b\u0cdc\nb\3b\3b\3b\5b\u0ce1"+
		"\nb\3b\3b\3b\3b\3b\3b\5b\u0ce9\nb\3b\3b\3b\3b\3b\3b\5b\u0cf1\nb\3b\3b"+
		"\3b\3b\5b\u0cf7\nb\3b\3b\3b\3b\7b\u0cfd\nb\fb\16b\u0d00\13b\3b\3b\5b\u0d04"+
		"\nb\3b\3b\3b\3b\7b\u0d0a\nb\fb\16b\u0d0d\13b\5b\u0d0f\nb\3c\3c\5c\u0d13"+
		"\nc\3c\5c\u0d16\nc\3c\3c\3c\3c\3c\3c\5c\u0d1e\nc\3c\3c\3c\3c\5c\u0d24"+
		"\nc\3c\3c\3c\3c\3c\7c\u0d2b\nc\fc\16c\u0d2e\13c\5c\u0d30\nc\3d\3d\5d\u0d34"+
		"\nd\3d\3d\5d\u0d38\nd\3d\3d\6d\u0d3c\nd\rd\16d\u0d3d\3d\3d\5d\u0d42\n"+
		"d\3d\3d\5d\u0d46\nd\5d\u0d48\nd\3d\5d\u0d4b\nd\3d\5d\u0d4e\nd\3d\5d\u0d51"+
		"\nd\3d\3d\6d\u0d55\nd\rd\16d\u0d56\3d\3d\5d\u0d5b\nd\3d\5d\u0d5e\nd\3"+
		"d\5d\u0d61\nd\3d\5d\u0d64\nd\3d\5d\u0d67\nd\3d\3d\3d\6d\u0d6c\nd\rd\16"+
		"d\u0d6d\5d\u0d70\nd\3e\3e\5e\u0d74\ne\3f\3f\3f\5f\u0d79\nf\3f\3f\3f\3"+
		"f\5f\u0d7f\nf\3f\7f\u0d82\nf\ff\16f\u0d85\13f\3g\3g\3g\3g\5g\u0d8b\ng"+
		"\3g\3g\3g\3g\5g\u0d91\ng\3g\7g\u0d94\ng\fg\16g\u0d97\13g\5g\u0d99\ng\3"+
		"h\3h\3h\3h\5h\u0d9f\nh\3i\3i\5i\u0da3\ni\3j\3j\3j\3j\3j\3j\5j\u0dab\n"+
		"j\3k\3k\5k\u0daf\nk\3k\5k\u0db2\nk\3k\5k\u0db5\nk\3k\3k\3k\5k\u0dba\n"+
		"k\3k\5k\u0dbd\nk\3k\3k\3k\3k\3k\5k\u0dc4\nk\3k\3k\5k\u0dc8\nk\3k\5k\u0dcb"+
		"\nk\3k\3k\5k\u0dcf\nk\3l\3l\5l\u0dd3\nl\3l\5l\u0dd6\nl\3l\5l\u0dd9\nl"+
		"\3l\3l\3l\5l\u0dde\nl\3l\3l\3l\3l\5l\u0de4\nl\7l\u0de6\nl\fl\16l\u0de9"+
		"\13l\3l\3l\3l\3l\3l\3l\3l\5l\u0df2\nl\3l\3l\3l\3l\5l\u0df8\nl\7l\u0dfa"+
		"\nl\fl\16l\u0dfd\13l\3l\3l\3l\5l\u0e02\nl\3l\3l\5l\u0e06\nl\3m\3m\3m\3"+
		"m\5m\u0e0c\nm\3m\5m\u0e0f\nm\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\5n\u0e1b\n"+
		"n\3n\3n\5n\u0e1f\nn\3n\3n\5n\u0e23\nn\3o\3o\3o\3o\3o\3o\5o\u0e2b\no\3"+
		"o\3o\5o\u0e2f\no\3p\3p\3p\3p\3q\3q\5q\u0e37\nq\3q\5q\u0e3a\nq\3q\3q\5"+
		"q\u0e3e\nq\3q\5q\u0e41\nq\3q\3q\3q\3q\7q\u0e47\nq\fq\16q\u0e4a\13q\3q"+
		"\3q\5q\u0e4e\nq\3q\5q\u0e51\nq\3q\5q\u0e54\nq\3r\3r\5r\u0e58\nr\3r\5r"+
		"\u0e5b\nr\3r\3r\3r\3r\3r\7r\u0e62\nr\fr\16r\u0e65\13r\3r\3r\5r\u0e69\n"+
		"r\3s\3s\3s\3s\3s\7s\u0e70\ns\fs\16s\u0e73\13s\3t\3t\5t\u0e77\nt\3u\3u"+
		"\3u\7u\u0e7c\nu\fu\16u\u0e7f\13u\3v\3v\7v\u0e83\nv\fv\16v\u0e86\13v\3"+
		"v\3v\3v\7v\u0e8b\nv\fv\16v\u0e8e\13v\3v\3v\3v\5v\u0e93\nv\3w\3w\3w\3w"+
		"\3w\3w\5w\u0e9b\nw\3w\5w\u0e9e\nw\3w\5w\u0ea1\nw\3w\3w\3w\7w\u0ea6\nw"+
		"\fw\16w\u0ea9\13w\5w\u0eab\nw\3w\3w\3w\3w\3w\5w\u0eb2\nw\3w\5w\u0eb5\n"+
		"w\3w\3w\3w\3w\3w\3w\5w\u0ebd\nw\3x\3x\3x\3x\5x\u0ec3\nx\3x\3x\3x\3x\3"+
		"y\3y\3y\3y\3y\5y\u0ece\ny\3z\5z\u0ed1\nz\3z\3z\5z\u0ed5\nz\3z\3z\3z\3"+
		"z\3z\3z\3z\3z\5z\u0edf\nz\3z\3z\3z\3z\5z\u0ee5\nz\3z\3z\5z\u0ee9\nz\3"+
		"z\3z\5z\u0eed\nz\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0ef7\nz\3z\3z\3z\5z\u0efc"+
		"\nz\5z\u0efe\nz\3z\3z\5z\u0f02\nz\3{\3{\3{\3{\3{\3{\3{\3{\5{\u0f0c\n{"+
		"\3|\3|\3|\3|\3|\3|\3|\3|\5|\u0f16\n|\3}\3}\7}\u0f1a\n}\f}\16}\u0f1d\13"+
		"}\3}\3}\5}\u0f21\n}\3}\3}\5}\u0f25\n}\3}\5}\u0f28\n}\3}\5}\u0f2b\n}\3"+
		"}\5}\u0f2e\n}\3}\5}\u0f31\n}\3}\3}\7}\u0f35\n}\f}\16}\u0f38\13}\3}\3}"+
		"\3}\5}\u0f3d\n}\3}\5}\u0f40\n}\3}\5}\u0f43\n}\3}\5}\u0f46\n}\3}\5}\u0f49"+
		"\n}\3}\5}\u0f4c\n}\5}\u0f4e\n}\3~\3~\7~\u0f52\n~\f~\16~\u0f55\13~\3~\3"+
		"~\3~\5~\u0f5a\n~\3~\5~\u0f5d\n~\3~\5~\u0f60\n~\3~\5~\u0f63\n~\3~\5~\u0f66"+
		"\n~\3\177\3\177\5\177\u0f6a\n\177\3\177\3\177\3\u0080\3\u0080\5\u0080"+
		"\u0f70\n\u0080\3\u0080\3\u0080\5\u0080\u0f74\n\u0080\3\u0081\3\u0081\3"+
		"\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0f7c\n\u0081\3\u0081\3\u0081\5"+
		"\u0081\u0f80\n\u0081\3\u0081\5\u0081\u0f83\n\u0081\5\u0081\u0f85\n\u0081"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\5\u0082\u0f92\n\u0082\3\u0082\5\u0082\u0f95\n\u0082\3"+
		"\u0083\3\u0083\3\u0083\7\u0083\u0f9a\n\u0083\f\u0083\16\u0083\u0f9d\13"+
		"\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084"+
		"\u0fa6\n\u0084\3\u0084\5\u0084\u0fa9\n\u0084\3\u0084\3\u0084\3\u0084\5"+
		"\u0084\u0fae\n\u0084\5\u0084\u0fb0\n\u0084\3\u0084\3\u0084\5\u0084\u0fb4"+
		"\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0fbc"+
		"\n\u0084\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0fc2\n\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0fcb\n\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u0fd8\n\u0087\3\u0088\3\u0088\5\u0088\u0fdc\n"+
		"\u0088\3\u0088\3\u0088\7\u0088\u0fe0\n\u0088\f\u0088\16\u0088\u0fe3\13"+
		"\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0feb\n"+
		"\u0089\3\u0089\5\u0089\u0fee\n\u0089\3\u0089\3\u0089\5\u0089\u0ff2\n\u0089"+
		"\3\u0089\5\u0089\u0ff5\n\u0089\3\u0089\3\u0089\5\u0089\u0ff9\n\u0089\3"+
		"\u0089\3\u0089\5\u0089\u0ffd\n\u0089\3\u0089\5\u0089\u1000\n\u0089\5\u0089"+
		"\u1002\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a\u1008\n\u008a\f"+
		"\u008a\16\u008a\u100b\13\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u1016\n\u008a\3\u008a\3\u008a"+
		"\6\u008a\u101a\n\u008a\r\u008a\16\u008a\u101b\5\u008a\u101e\n\u008a\3"+
		"\u008a\3\u008a\6\u008a\u1022\n\u008a\r\u008a\16\u008a\u1023\5\u008a\u1026"+
		"\n\u008a\5\u008a\u1028\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b"+
		"\u102e\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b"+
		"\u1036\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c"+
		"\u103e\n\u008c\3\u008d\3\u008d\5\u008d\u1042\n\u008d\3\u008d\3\u008d\5"+
		"\u008d\u1046\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\7\u008e\u104d"+
		"\n\u008e\f\u008e\16\u008e\u1050\13\u008e\3\u008e\3\u008e\5\u008e\u1054"+
		"\n\u008e\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\7\u0090"+
		"\u1066\n\u0090\f\u0090\16\u0090\u1069\13\u0090\3\u0091\3\u0091\5\u0091"+
		"\u106d\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u1073\n\u0092\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u107a\n\u0092\3\u0093\3"+
		"\u0093\3\u0093\5\u0093\u107f\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3"+
		"\u0094\7\u0094\u1086\n\u0094\f\u0094\16\u0094\u1089\13\u0094\5\u0094\u108b"+
		"\n\u0094\3\u0095\3\u0095\5\u0095\u108f\n\u0095\3\u0096\3\u0096\5\u0096"+
		"\u1093\n\u0096\3\u0096\3\u0096\5\u0096\u1097\n\u0096\3\u0096\5\u0096\u109a"+
		"\n\u0096\3\u0096\5\u0096\u109d\n\u0096\3\u0096\5\u0096\u10a0\n\u0096\3"+
		"\u0097\3\u0097\5\u0097\u10a4\n\u0097\3\u0097\3\u0097\5\u0097\u10a8\n\u0097"+
		"\3\u0097\5\u0097\u10ab\n\u0097\3\u0097\5\u0097\u10ae\n\u0097\3\u0097\5"+
		"\u0097\u10b1\n\u0097\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\5\u0099\u10b8"+
		"\n\u0099\3\u0099\3\u0099\5\u0099\u10bc\n\u0099\3\u0099\3\u0099\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\7\u009b"+
		"\u10c9\n\u009b\f\u009b\16\u009b\u10cc\13\u009b\3\u009b\5\u009b\u10cf\n"+
		"\u009b\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009e\3\u009e\5\u009e\u10db\n\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\7\u009e\u10e1\n\u009e\f\u009e\16\u009e\u10e4\13\u009e\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u10ed\n\u009f\3\u00a0"+
		"\3\u00a0\5\u00a0\u10f1\n\u00a0\3\u00a0\5\u00a0\u10f4\n\u00a0\3\u00a0\3"+
		"\u00a0\3\u00a1\3\u00a1\5\u00a1\u10fa\n\u00a1\3\u00a1\5\u00a1\u10fd\n\u00a1"+
		"\3\u00a1\5\u00a1\u1100\n\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\5\u00a2\u1109\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u1112\n\u00a3\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\7\u00a4\u111a\n\u00a4\f\u00a4\16\u00a4\u111d"+
		"\13\u00a4\3\u00a4\5\u00a4\u1120\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\3\u00a5\7\u00a5\u1128\n\u00a5\f\u00a5\16\u00a5\u112b\13\u00a5"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u1134"+
		"\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u113c"+
		"\n\u00a8\3\u00a8\5\u00a8\u113f\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\7\u00a9\u1146\n\u00a9\f\u00a9\16\u00a9\u1149\13\u00a9\5\u00a9"+
		"\u114b\n\u00a9\3\u00a9\3\u00a9\5\u00a9\u114f\n\u00a9\3\u00a9\7\u00a9\u1152"+
		"\n\u00a9\f\u00a9\16\u00a9\u1155\13\u00a9\3\u00a9\5\u00a9\u1158\n\u00a9"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u115f\n\u00aa\f\u00aa"+
		"\16\u00aa\u1162\13\u00aa\5\u00aa\u1164\n\u00aa\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\7\u00ad\u1181\n\u00ad"+
		"\f\u00ad\16\u00ad\u1184\13\u00ad\5\u00ad\u1186\n\u00ad\3\u00ad\5\u00ad"+
		"\u1189\n\u00ad\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\7\u00b2\u11bf\n\u00b2\f\u00b2\16\u00b2\u11c2\13\u00b2\3\u00b2\3\u00b2"+
		"\5\u00b2\u11c6\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\5\u00b5\u11e2\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6"+
		"\u11f0\n\u00b6\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u11f5\n\u00b7\f\u00b7\16"+
		"\u00b7\u11f8\13\u00b7\3\u00b7\5\u00b7\u11fb\n\u00b7\3\u00b8\3\u00b8\3"+
		"\u00b8\3\u00b8\5\u00b8\u1201\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3"+
		"\u00b9\3\u00b9\5\u00b9\u1209\n\u00b9\5\u00b9\u120b\n\u00b9\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1216"+
		"\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\5\u00bd\u1220\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be"+
		"\u1227\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u122d\n\u00bf\3"+
		"\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\5\u00c1\u1235\n\u00c1\3"+
		"\u00c2\3\u00c2\3\u00c2\5\u00c2\u123a\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3"+
		"\u00c2\7\u00c2\u1240\n\u00c2\f\u00c2\16\u00c2\u1243\13\u00c2\3\u00c2\3"+
		"\u00c2\3\u00c2\7\u00c2\u1248\n\u00c2\f\u00c2\16\u00c2\u124b\13\u00c2\3"+
		"\u00c2\3\u00c2\3\u00c2\7\u00c2\u1250\n\u00c2\f\u00c2\16\u00c2\u1253\13"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u1258\n\u00c2\f\u00c2\16\u00c2"+
		"\u125b\13\u00c2\3\u00c2\7\u00c2\u125e\n\u00c2\f\u00c2\16\u00c2\u1261\13"+
		"\u00c2\3\u00c2\3\u00c2\5\u00c2\u1265\n\u00c2\3\u00c3\3\u00c3\3\u00c3\5"+
		"\u00c3\u126a\n\u00c3\3\u00c3\6\u00c3\u126d\n\u00c3\r\u00c3\16\u00c3\u126e"+
		"\3\u00c3\3\u00c3\6\u00c3\u1273\n\u00c3\r\u00c3\16\u00c3\u1274\5\u00c3"+
		"\u1277\n\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\6\u00c4\u1280\n\u00c4\r\u00c4\16\u00c4\u1281\3\u00c4\7\u00c4\u1285\n"+
		"\u00c4\f\u00c4\16\u00c4\u1288\13\u00c4\3\u00c4\3\u00c4\6\u00c4\u128c\n"+
		"\u00c4\r\u00c4\16\u00c4\u128d\5\u00c4\u1290\n\u00c4\3\u00c4\3\u00c4\3"+
		"\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7"+
		"\3\u00c7\5\u00c7\u129e\n\u00c7\3\u00c7\3\u00c7\6\u00c7\u12a2\n\u00c7\r"+
		"\u00c7\16\u00c7\u12a3\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u12a9\n\u00c7\3"+
		"\u00c8\3\u00c8\3\u00c8\5\u00c8\u12ae\n\u00c8\3\u00c8\3\u00c8\6\u00c8\u12b2"+
		"\n\u00c8\r\u00c8\16\u00c8\u12b3\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u12bb\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca"+
		"\5\u00ca\u12c3\n\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\6\u00ca\u12c9\n"+
		"\u00ca\r\u00ca\16\u00ca\u12ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u12d0\n"+
		"\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u12d6\n\u00cb\3\u00cb\5"+
		"\u00cb\u12d9\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5"+
		"\u00cb\u12e1\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u12e8"+
		"\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd"+
		"\u12f1\n\u00cd\3\u00cd\5\u00cd\u12f4\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\7\u00cf\u1303\n\u00cf\f\u00cf\16\u00cf\u1306\13\u00cf\3\u00cf"+
		"\3\u00cf\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u130d\n\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1315\n\u00d0\3\u00d1\3\u00d1"+
		"\5\u00d1\u1319\n\u00d1\3\u00d1\3\u00d1\3\u00d2\3\u00d2\3\u00d2\5\u00d2"+
		"\u1320\n\u00d2\3\u00d2\3\u00d2\6\u00d2\u1324\n\u00d2\r\u00d2\16\u00d2"+
		"\u1325\3\u00d3\3\u00d3\3\u00d3\3\u00d3\6\u00d3\u132c\n\u00d3\r\u00d3\16"+
		"\u00d3\u132d\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u1335\n\u00d4"+
		"\f\u00d4\16\u00d4\u1338\13\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u133d"+
		"\n\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u1342\n\u00d4\f\u00d4\16\u00d4"+
		"\u1345\13\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u134b\n\u00d4"+
		"\3\u00d4\7\u00d4\u134e\n\u00d4\f\u00d4\16\u00d4\u1351\13\u00d4\5\u00d4"+
		"\u1353\n\u00d4\5\u00d4\u1355\n\u00d4\3\u00d4\3\u00d4\6\u00d4\u1359\n\u00d4"+
		"\r\u00d4\16\u00d4\u135a\5\u00d4\u135d\n\u00d4\3\u00d4\3\u00d4\7\u00d4"+
		"\u1361\n\u00d4\f\u00d4\16\u00d4\u1364\13\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\5\u00d4\u136a\n\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u136f\n"+
		"\u00d4\3\u00d4\3\u00d4\5\u00d4\u1373\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3"+
		"\u00d4\5\u00d4\u1379\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7"+
		"\u00d5\u1380\n\u00d5\f\u00d5\16\u00d5\u1383\13\u00d5\3\u00d5\3\u00d5\3"+
		"\u00d5\5\u00d5\u1388\n\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u138d\n\u00d5"+
		"\f\u00d5\16\u00d5\u1390\13\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1395"+
		"\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u139b\n\u00d5\3\u00d5"+
		"\7\u00d5\u139e\n\u00d5\f\u00d5\16\u00d5\u13a1\13\u00d5\5\u00d5\u13a3\n"+
		"\u00d5\5\u00d5\u13a5\n\u00d5\3\u00d5\3\u00d5\6\u00d5\u13a9\n\u00d5\r\u00d5"+
		"\16\u00d5\u13aa\5\u00d5\u13ad\n\u00d5\3\u00d5\3\u00d5\7\u00d5\u13b1\n"+
		"\u00d5\f\u00d5\16\u00d5\u13b4\13\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\5\u00d5\u13ba\n\u00d5\5\u00d5\u13bc\n\u00d5\3\u00d6\3\u00d6\3\u00d6\5"+
		"\u00d6\u13c1\n\u00d6\3\u00d6\3\u00d6\3\u00d6\7\u00d6\u13c6\n\u00d6\f\u00d6"+
		"\16\u00d6\u13c9\13\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u13cf"+
		"\n\u00d7\f\u00d7\16\u00d7\u13d2\13\u00d7\3\u00d7\3\u00d7\5\u00d7\u13d6"+
		"\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u13dd\n\u00d7"+
		"\f\u00d7\16\u00d7\u13e0\13\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7"+
		"\u13e6\n\u00d7\3\u00d7\7\u00d7\u13e9\n\u00d7\f\u00d7\16\u00d7\u13ec\13"+
		"\u00d7\5\u00d7\u13ee\n\u00d7\5\u00d7\u13f0\n\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\7\u00d7\u13f6\n\u00d7\f\u00d7\16\u00d7\u13f9\13\u00d7\5\u00d7"+
		"\u13fb\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7"+
		"\u1403\n\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1408\n\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\5\u00d7\u140d\n\u00d7\7\u00d7\u140f\n\u00d7\f\u00d7\16"+
		"\u00d7\u1412\13\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1417\n\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\5\u00d7\u141c\n\u00d7\7\u00d7\u141e\n\u00d7\f\u00d7"+
		"\16\u00d7\u1421\13\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1426\n\u00d7"+
		"\5\u00d7\u1428\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\7\u00d8\u1431\n\u00d8\f\u00d8\16\u00d8\u1434\13\u00d8\5\u00d8"+
		"\u1436\n\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u143b\n\u00d8\f\u00d8\16"+
		"\u00d8\u143e\13\u00d8\5\u00d8\u1440\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u144a\n\u00d9\f\u00d9\16"+
		"\u00d9\u144d\13\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1452\n\u00d9\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da\u1459\n\u00da\f\u00da\16"+
		"\u00da\u145c\13\u00da\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u1462\n"+
		"\u00db\f\u00db\16\u00db\u1465\13\u00db\3\u00db\3\u00db\5\u00db\u1469\n"+
		"\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u1470\n\u00db\f"+
		"\u00db\16\u00db\u1473\13\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u1478\n"+
		"\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db"+
		"\u1481\n\u00db\f\u00db\16\u00db\u1484\13\u00db\3\u00db\3\u00db\3\u00db"+
		"\5\u00db\u1489\n\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u148e\n\u00db\7"+
		"\u00db\u1490\n\u00db\f\u00db\16\u00db\u1493\13\u00db\3\u00db\3\u00db\3"+
		"\u00db\5\u00db\u1498\n\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u149d\n\u00db"+
		"\7\u00db\u149f\n\u00db\f\u00db\16\u00db\u14a2\13\u00db\5\u00db\u14a4\n"+
		"\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\7\u00dc\u14ae\n\u00dc\f\u00dc\16\u00dc\u14b1\13\u00dc\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\5\u00dd\u14b7\n\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u14bc\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\5\u00df\u14ce\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\5\u00df\u14d6\n\u00df\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u14db\n\u00e0\3"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u14e1\n\u00e0\3\u00e1\3\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u14eb\n\u00e1\3"+
		"\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u14f5\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\5\u00e3\u14ff\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3"+
		"\u1505\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\5\u00e3\u150e\n\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1514\n"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u151b\n\u00e3\5"+
		"\u00e3\u151d\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e5\5\u00e5\u1527\n\u00e5\3\u00e6\3\u00e6\5\u00e6\u152b\n\u00e6"+
		"\3\u00e6\3\u00e6\5\u00e6\u152f\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u1539\n\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\5\u00e6\u153e\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\5\u00e6\u1585\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\5\u00e7\u1597\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e9\3\u00e9\5\u00e9\u159f\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u15a9\n\u00e9\f\u00e9\16\u00e9"+
		"\u15ac\13\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u15b2\n\u00e9"+
		"\5\u00e9\u15b4\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\7\u00e9\u15bc\n\u00e9\f\u00e9\16\u00e9\u15bf\13\u00e9\5\u00e9\u15c1\n"+
		"\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\7\u00ea\u15c7\n\u00ea\f\u00ea\16"+
		"\u00ea\u15ca\13\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u15d0\n"+
		"\u00eb\3\u00ec\3\u00ec\5\u00ec\u15d4\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3"+
		"\u00ed\3\u00ed\5\u00ed\u15db\n\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u15e0"+
		"\n\u00ed\3\u00ed\5\u00ed\u15e3\n\u00ed\3\u00ed\5\u00ed\u15e6\n\u00ed\3"+
		"\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u15ef\n"+
		"\u00ee\3\u00ef\3\u00ef\5\u00ef\u15f3\n\u00ef\3\u00ef\3\u00ef\5\u00ef\u15f7"+
		"\n\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u160e\n\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1615\n\u00f2\7\u00f2\u1617\n\u00f2\f"+
		"\u00f2\16\u00f2\u161a\13\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2"+
		"\u1620\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1627\n"+
		"\u00f2\3\u00f2\5\u00f2\u162a\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3"+
		"\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2"+
		"\u1638\n\u00f2\f\u00f2\16\u00f2\u163b\13\u00f2\5\u00f2\u163d\n\u00f2\3"+
		"\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3"+
		"\u1647\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u164b\n\u00f3\3\u00f3\3\u00f3\3"+
		"\u00f3\3\u00f3\5\u00f3\u1651\n\u00f3\3\u00f3\5\u00f3\u1654\n\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\5\u00f3\u1659\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u165d\n"+
		"\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1664\n\u00f3\3"+
		"\u00f3\5\u00f3\u1667\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u166d"+
		"\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1685\n\u00f3\3\u00f3"+
		"\5\u00f3\u1688\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1694\n\u00f3\3\u00f3\5\u00f3"+
		"\u1697\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\5\u00f3\u16a1\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\5\u00f3\u16a9\n\u00f3\3\u00f3\3\u00f3\5\u00f3\u16ad\n\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u16b4\n\u00f3\3\u00f3\5"+
		"\u00f3\u16b7\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\7\u00f3\u16be"+
		"\n\u00f3\f\u00f3\16\u00f3\u16c1\13\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3"+
		"\u16c6\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u16cc\n\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3"+
		"\u16d6\n\u00f3\5\u00f3\u16d8\n\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5"+
		"\u00f4\u16de\n\u00f4\3\u00f4\5\u00f4\u16e1\n\u00f4\3\u00f4\5\u00f4\u16e4"+
		"\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\5\u00f5\u16f0\n\u00f5\3\u00f5\5\u00f5\u16f3\n\u00f5\3"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u16f9\n\u00f6\3\u00f7\5\u00f7\u16fc"+
		"\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1704"+
		"\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u170c"+
		"\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1712\n\u00f8\3\u00f8"+
		"\3\u00f8\5\u00f8\u1716\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1724"+
		"\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\7\u00fb\u172e\n\u00fb\f\u00fb\16\u00fb\u1731\13\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\5\u00fb\u1737\n\u00fb\3\u00fb\5\u00fb\u173a\n\u00fb\3"+
		"\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc\5\u00fc\u1741\n\u00fc\3\u00fc\3"+
		"\u00fc\3\u00fc\7\u00fc\u1746\n\u00fc\f\u00fc\16\u00fc\u1749\13\u00fc\3"+
		"\u00fd\3\u00fd\5\u00fd\u174d\n\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3"+
		"\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u1758\n\u00fe\f\u00fe\16"+
		"\u00fe\u175b\13\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100"+
		"\3\u0101\3\u0101\5\u0101\u1765\n\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\5\u0101\u176b\n\u0101\3\u0102\3\u0102\3\u0102\5\u0102\u1770\n\u0102\3"+
		"\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\5\u0102\u177d\n\u0102\5\u0102\u177f\n\u0102\3\u0102\3"+
		"\u0102\3\u0102\5\u0102\u1784\n\u0102\3\u0102\3\u0102\5\u0102\u1788\n\u0102"+
		"\3\u0102\5\u0102\u178b\n\u0102\5\u0102\u178d\n\u0102\3\u0103\3\u0103\3"+
		"\u0103\3\u0103\3\u0103\5\u0103\u1794\n\u0103\3\u0104\3\u0104\3\u0104\3"+
		"\u0104\3\u0104\5\u0104\u179b\n\u0104\3\u0104\5\u0104\u179e\n\u0104\3\u0104"+
		"\5\u0104\u17a1\n\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u17a7\n"+
		"\u0104\3\u0104\3\u0104\5\u0104\u17ab\n\u0104\3\u0105\3\u0105\3\u0105\3"+
		"\u0105\5\u0105\u17b1\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u17b7"+
		"\n\u0106\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108"+
		"\3\u0109\3\u0109\3\u0109\5\u0109\u17c4\n\u0109\3\u0109\3\u0109\3\u0109"+
		"\5\u0109\u17c9\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109\7\u0109\u17cf\n"+
		"\u0109\f\u0109\16\u0109\u17d2\13\u0109\5\u0109\u17d4\n\u0109\3\u010a\3"+
		"\u010a\3\u010a\5\u010a\u17d9\n\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u17de"+
		"\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a\u17e4\n\u010a\f\u010a"+
		"\16\u010a\u17e7\13\u010a\5\u010a\u17e9\n\u010a\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\5\u010b\u17f1\n\u010b\3\u010c\3\u010c\5\u010c"+
		"\u17f5\n\u010c\3\u010c\3\u010c\3\u010c\7\u010c\u17fa\n\u010c\f\u010c\16"+
		"\u010c\u17fd\13\u010c\3\u010d\3\u010d\5\u010d\u1801\n\u010d\3\u010d\3"+
		"\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\7\u010d"+
		"\u180c\n\u010d\f\u010d\16\u010d\u180f\13\u010d\3\u010d\3\u010d\3\u010d"+
		"\5\u010d\u1814\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\7\u010d\u181e\n\u010d\f\u010d\16\u010d\u1821\13\u010d"+
		"\5\u010d\u1823\n\u010d\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\5\u010f\u182c\n\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u1831\n"+
		"\u010f\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u1837\n\u0110\3\u0111\3"+
		"\u0111\3\u0112\3\u0112\5\u0112\u183d\n\u0112\3\u0113\3\u0113\3\u0113\5"+
		"\u0113\u1842\n\u0113\5\u0113\u1844\n\u0113\3\u0113\5\u0113\u1847\n\u0113"+
		"\3\u0113\3\u0113\5\u0113\u184b\n\u0113\5\u0113\u184d\n\u0113\3\u0114\3"+
		"\u0114\5\u0114\u1851\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1857"+
		"\n\u0114\3\u0114\5\u0114\u185a\n\u0114\3\u0114\5\u0114\u185d\n\u0114\3"+
		"\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1864\n\u0115\3\u0116\3"+
		"\u0116\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u186c\n\u0117\3\u0118\3"+
		"\u0118\5\u0118\u1870\n\u0118\3\u0119\3\u0119\3\u011a\3\u011a\3\u011a\3"+
		"\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\6\u011a\u1882\n\u011a\r\u011a\16\u011a\u1883\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u188b\n\u011b\5\u011b\u188d\n"+
		"\u011b\3\u011c\3\u011c\3\u011c\6\u011c\u1892\n\u011c\r\u011c\16\u011c"+
		"\u1893\5\u011c\u1896\n\u011c\3\u011d\3\u011d\5\u011d\u189a\n\u011d\3\u011e"+
		"\3\u011e\3\u011e\5\u011e\u189f\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u18aa\n\u011f\3\u0120"+
		"\3\u0120\3\u0120\5\u0120\u18af\n\u0120\3\u0121\3\u0121\3\u0122\3\u0122"+
		"\5\u0122\u18b5\n\u0122\3\u0123\5\u0123\u18b8\n\u0123\3\u0123\3\u0123\5"+
		"\u0123\u18bc\n\u0123\3\u0123\6\u0123\u18bf\n\u0123\r\u0123\16\u0123\u18c0"+
		"\3\u0123\5\u0123\u18c4\n\u0123\3\u0123\3\u0123\5\u0123\u18c8\n\u0123\3"+
		"\u0123\3\u0123\5\u0123\u18cc\n\u0123\5\u0123\u18ce\n\u0123\3\u0124\3\u0124"+
		"\3\u0125\5\u0125\u18d3\n\u0125\3\u0125\3\u0125\3\u0126\5\u0126\u18d8\n"+
		"\u0126\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\5\u0127\u18e5\n\u0127\3\u0127\5\u0127\u18e8\n"+
		"\u0127\3\u0128\3\u0128\5\u0128\u18ec\n\u0128\3\u0128\5\u0128\u18ef\n\u0128"+
		"\3\u0128\5\u0128\u18f2\n\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u18f7\n"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u18fc\n\u0128\3\u0128\3\u0128\3"+
		"\u0128\3\u0128\5\u0128\u1902\n\u0128\3\u0128\5\u0128\u1905\n\u0128\3\u0128"+
		"\3\u0128\3\u0128\5\u0128\u190a\n\u0128\3\u0128\5\u0128\u190d\n\u0128\3"+
		"\u0128\3\u0128\3\u0128\5\u0128\u1912\n\u0128\3\u0128\5\u0128\u1915\n\u0128"+
		"\3\u0128\3\u0128\5\u0128\u1919\n\u0128\3\u0128\7\u0128\u191c\n\u0128\f"+
		"\u0128\16\u0128\u191f\13\u0128\3\u0128\3\u0128\5\u0128\u1923\n\u0128\3"+
		"\u0128\7\u0128\u1926\n\u0128\f\u0128\16\u0128\u1929\13\u0128\3\u0128\3"+
		"\u0128\5\u0128\u192d\n\u0128\3\u0128\5\u0128\u1930\n\u0128\3\u0128\7\u0128"+
		"\u1933\n\u0128\f\u0128\16\u0128\u1936\13\u0128\3\u0128\3\u0128\5\u0128"+
		"\u193a\n\u0128\3\u0128\7\u0128\u193d\n\u0128\f\u0128\16\u0128\u1940\13"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1945\n\u0128\3\u0128\3\u0128\3"+
		"\u0128\5\u0128\u194a\n\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u194f\n\u0128"+
		"\3\u0128\3\u0128\3\u0128\5\u0128\u1954\n\u0128\3\u0128\3\u0128\5\u0128"+
		"\u1958\n\u0128\3\u0128\5\u0128\u195b\n\u0128\3\u0128\3\u0128\3\u0128\5"+
		"\u0128\u1960\n\u0128\3\u0128\3\u0128\5\u0128\u1964\n\u0128\3\u0128\3\u0128"+
		"\5\u0128\u1968\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129\7\u0129\u196e\n"+
		"\u0129\f\u0129\16\u0129\u1971\13\u0129\3\u0129\3\u0129\3\u012a\3\u012a"+
		"\5\u012a\u1977\n\u012a\3\u012a\3\u012a\5\u012a\u197b\n\u012a\3\u012a\3"+
		"\u012a\3\u012a\5\u012a\u1980\n\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1985"+
		"\n\u012a\3\u012a\3\u012a\5\u012a\u1989\n\u012a\5\u012a\u198b\n\u012a\3"+
		"\u012a\5\u012a\u198e\n\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\5\u012d\u199e\n\u012d\3\u012d\3\u012d\3\u012e\3\u012e\3\u012e\7\u012e"+
		"\u19a5\n\u012e\f\u012e\16\u012e\u19a8\13\u012e\3\u012f\3\u012f\3\u012f"+
		"\7\u012f\u19ad\n\u012f\f\u012f\16\u012f\u19b0\13\u012f\3\u0130\3\u0130"+
		"\3\u0130\7\u0130\u19b5\n\u0130\f\u0130\16\u0130\u19b8\13\u0130\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\7\u0131\u19be\n\u0131\f\u0131\16\u0131\u19c1"+
		"\13\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132\7\u0132\u19c8\n\u0132"+
		"\f\u0132\16\u0132\u19cb\13\u0132\3\u0133\3\u0133\3\u0133\7\u0133\u19d0"+
		"\n\u0133\f\u0133\16\u0133\u19d3\13\u0133\3\u0134\3\u0134\3\u0134\7\u0134"+
		"\u19d8\n\u0134\f\u0134\16\u0134\u19db\13\u0134\3\u0135\3\u0135\3\u0135"+
		"\7\u0135\u19e0\n\u0135\f\u0135\16\u0135\u19e3\13\u0135\3\u0136\3\u0136"+
		"\3\u0136\7\u0136\u19e8\n\u0136\f\u0136\16\u0136\u19eb\13\u0136\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137"+
		"\u19f6\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u19fd\n"+
		"\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\5\u0137\u1a07\n\u0137\3\u0138\3\u0138\3\u0138\5\u0138\u1a0c\n\u0138\3"+
		"\u0138\5\u0138\u1a0f\n\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u1a14\n\u0138"+
		"\3\u0138\5\u0138\u1a17\n\u0138\3\u0139\3\u0139\5\u0139\u1a1b\n\u0139\3"+
		"\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013c\3\u013c"+
		"\3\u013c\3\u013d\3\u013d\3\u013d\5\u013d\u1a2a\n\u013d\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1a32\n\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\5\u013e\u1a39\n\u013e\3\u013e\3\u013e\3\u013e"+
		"\5\u013e\u1a3e\n\u013e\3\u013f\3\u013f\3\u013f\5\u013f\u1a43\n\u013f\3"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\6\u013f\u1a62\n\u013f\r\u013f\16\u013f\u1a63\3\u013f"+
		"\3\u013f\5\u013f\u1a68\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\6\u013f"+
		"\u1a6e\n\u013f\r\u013f\16\u013f\u1a6f\3\u013f\3\u013f\5\u013f\u1a74\n"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f"+
		"\u1a7d\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f"+
		"\u1a85\n\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1a8a\n\u013f\3\u013f\3"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1a92\n\u013f\3\u013f\3"+
		"\u013f\3\u013f\5\u013f\u1a97\n\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1a9c"+
		"\n\u013f\5\u013f\u1a9e\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\5\u013f\u1aa7\n\u013f\3\u013f\3\u013f\3\u013f\5\u013f"+
		"\u1aac\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f"+
		"\u1ab4\n\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1ab9\n\u013f\3\u013f\3"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1ac1\n\u013f\3\u013f\3"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1ac9\n\u013f\3\u013f\5"+
		"\u013f\u1acc\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3"+
		"\u013f\3\u013f\5\u013f\u1ad6\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\5\u013f\u1ae8\n\u013f\3\u013f\5\u013f\u1aeb\n"+
		"\u013f\3\u013f\5\u013f\u1aee\n\u013f\3\u013f\3\u013f\5\u013f\u1af2\n\u013f"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\7\u0141\u1afd\n\u0141\f\u0141\16\u0141\u1b00\13\u0141\3\u0141\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\5\u0141\u1b07\n\u0141\3\u0142\3\u0142\5\u0142"+
		"\u1b0b\n\u0142\3\u0143\3\u0143\3\u0143\5\u0143\u1b10\n\u0143\3\u0143\3"+
		"\u0143\3\u0143\5\u0143\u1b15\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5"+
		"\u0143\u1b1b\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1b20\n\u0143\3\u0143"+
		"\3\u0143\5\u0143\u1b24\n\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1b29\n"+
		"\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1b2e\n\u0143\3\u0143\3\u0143\3"+
		"\u0143\5\u0143\u1b33\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\3"+
		"\u0143\7\u0143\u1b3b\n\u0143\f\u0143\16\u0143\u1b3e\13\u0143\5\u0143\u1b40"+
		"\n\u0143\3\u0143\3\u0143\5\u0143\u1b44\n\u0143\3\u0143\3\u0143\5\u0143"+
		"\u1b48\n\u0143\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1b4f\n"+
		"\u0144\3\u0144\3\u0144\5\u0144\u1b53\n\u0144\3\u0144\3\u0144\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u1b70\n\u0144"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1b78\n\u0145"+
		"\3\u0146\5\u0146\u1b7b\n\u0146\3\u0146\5\u0146\u1b7e\n\u0146\3\u0146\5"+
		"\u0146\u1b81\n\u0146\3\u0146\5\u0146\u1b84\n\u0146\3\u0147\3\u0147\3\u0148"+
		"\3\u0148\3\u0148\3\u0149\3\u0149\3\u014a\3\u014a\5\u014a\u1b8f\n\u014a"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\5\u014c\u1b9d\n\u014c\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\3\u014d\7\u014d\u1ba4\n\u014d\f\u014d\16\u014d\u1ba7\13\u014d"+
		"\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e"+
		"\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e"+
		"\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u1bc0\n\u014e\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\3\u014f\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150"+
		"\u1bcb\n\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u1bd2\n"+
		"\u0150\7\u0150\u1bd4\n\u0150\f\u0150\16\u0150\u1bd7\13\u0150\3\u0151\3"+
		"\u0151\3\u0151\3\u0151\5\u0151\u1bdd\n\u0151\3\u0152\3\u0152\3\u0152\3"+
		"\u0152\3\u0152\3\u0152\5\u0152\u1be5\n\u0152\3\u0152\3\u0152\3\u0152\5"+
		"\u0152\u1bea\n\u0152\3\u0152\3\u0152\3\u0152\3\u0152\7\u0152\u1bf0\n\u0152"+
		"\f\u0152\16\u0152\u1bf3\13\u0152\3\u0153\3\u0153\3\u0153\5\u0153\u1bf8"+
		"\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\5\u0153\u1c02\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u1c0f\n\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\5\u0153\u1c15\n\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\5\u0153\u1c1b\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153"+
		"\5\u0153\u1c2b\n\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u1c31\n"+
		"\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\7\u0153"+
		"\u1c3a\n\u0153\f\u0153\16\u0153\u1c3d\13\u0153\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\7\u0154\u1c4d\n\u0154\f\u0154\16\u0154\u1c50\13\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\6\u0154\u1c59"+
		"\n\u0154\r\u0154\16\u0154\u1c5a\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\5\u0154\u1c6c\n\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\7\u0154\u1c7d\n\u0154\f\u0154\16\u0154\u1c80\13\u0154\3\u0155"+
		"\3\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u1c92\n\u0156"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u1c9b"+
		"\n\u0157\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158"+
		"\u1ca4\n\u0158\3\u0159\3\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\5\u015a\u1cad\n\u015a\3\u015b\3\u015b\3\u015c\3\u015c\3\u015d\3\u015d"+
		"\3\u015e\3\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161"+
		"\2\5\u02a2\u02a4\u02a6\u0162\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \""+
		"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234"+
		"\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c"+
		"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264"+
		"\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c"+
		"\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294"+
		"\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac"+
		"\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\2\u008e\4"+
		"\2))\u0098\u0098\4\2\u0215\u0215\u021b\u021b\5\2GG\u00a1\u00a1\u00b7\u00b7"+
		"\5\2,,\u0182\u0182\u01c8\u01c8\6\2,,\u01a5\u01a5\u0213\u0213\u0265\u0265"+
		"\4\2\u0204\u0204\u047c\u047c\4\2PP\u008f\u008f\4\2\21\21\u0150\u0150\5"+
		"\2..WW\u00ba\u00ba\4\2\u01b4\u01b4\u0230\u0230\5\2\u01fc\u01fc\u028c\u028c"+
		"\u0294\u0294\4\2\u018a\u018a\u01ce\u01ce\4\2\u0162\u0162\u01dc\u01dc\4"+
		"\2,,\u0472\u0473\4\2\u0160\u0160\u01bd\u01bd\4\2\u01cd\u01cd\u02a3\u02a3"+
		"\5\2RRVV\177\177\5\2,,\u0194\u0194\u01b1\u01b1\5\2,,\u0190\u0190\u0319"+
		"\u0319\4\2\u027f\u027f\u02a2\u02a2\4\2SS]]\5\2\u01b6\u01b6\u0226\u0226"+
		"\u0267\u0267\4\2GG\u00a1\u00a1\3\2\u0166\u0167\3\2\u0472\u0473\4\2\u047c"+
		"\u047c\u0484\u0484\4\2SS\u0186\u0186\4\2\u0223\u0223\u047c\u047c\4\2\u0224"+
		"\u0224\u047c\u047c\5\2\u01b0\u01b0\u01d7\u01d7\u020b\u020b\t\2,,\u0174"+
		"\u0174\u0176\u0176\u0194\u0194\u01b1\u01b1\u023f\u023f\u0484\u0484\4\2"+
		"\u0204\u0204\u0214\u0214\3\2\u0473\u0474\4\2\7\7\65\65\6\2,,\u0182\u0182"+
		"\u01c8\u01c8\u01cc\u01cc\4\2\34\34  \4\2\16\16\u00b1\u00b1\4\2\u00c2\u00c2"+
		"\u02a7\u02a7\4\2\27\27\u0092\u0092\5\2--MMll\4\2ll\u0178\u0178\4\2\u016f"+
		"\u016f\u01ad\u01ad\4\2gg\u025b\u025b\4\2--ll\4\2\b\b\63\63\4\2\u00be\u00be"+
		"\u029f\u029f\6\2\u01b0\u01b0\u01d7\u01d7\u020a\u020a\u0234\u0234\4\2\u01b0"+
		"\u01b0\u020a\u020a\4\2\17\17//\5\2DDPP\u00bc\u00bc\4\2$$UU\4\2cc\u0096"+
		"\u0096\4\2\b\b\63\64\3\2\u0274\u0275\4\2\u00ae\u00ae\u02e7\u02e7\4\2\u01b9"+
		"\u01b9\u0263\u0263\4\2\u00e4\u00e4\u01df\u01df\7\2mm\u01e4\u01e5\u01e7"+
		"\u01e7\u01eb\u01f3\u0241\u0241\6\2\u01e1\u01e2\u01e6\u01e6\u01e8\u01e9"+
		"\u0242\u0242\5\2nn\u01e0\u01e0\u01ea\u01ea\4\2\u01d0\u01d0\u0276\u0276"+
		"\4\2\u0270\u0270\u0272\u0272\4\2\u015a\u015a\u0277\u0277\4\2\\\\\u0251"+
		"\u0251\4\2\65\65\u0188\u0188\5\2!!??\u00b5\u00b5\5\2\u0085\u0085\u00ae"+
		"\u00ae\u01b7\u01b7\5\2\16\16\25\25\u00bd\u00bd\4\2,,{{\4\2ii\u00b8\u00b8"+
		"\4\2\u016a\u016a\u0268\u0268\4\2**\u02a1\u02a1\4\2uu\u01dc\u01dc\4\2\u01a8"+
		"\u01a8\u023a\u023a\6\2\u00d0\u00d0\u00d2\u00d2\u00d8\u00d8\u0280\u0280"+
		"\4\2\u0454\u0454\u0464\u0464\4\2\u015b\u015b\u0243\u0243\4\2FFRR\b\2\u0085"+
		"\u0085\u00ae\u00ae\u00b3\u00b3\u01a1\u01a1\u01b7\u01b7\u02a1\u02a1\4\2"+
		"\u0203\u0203\u027c\u027c\4\2\u019e\u019e\u02a5\u02a5\4\2\u0085\u0085\u01b7"+
		"\u01b7\5\2SS^^\u01c6\u01c6\5\2\u01b9\u01b9\u01dc\u01dc\u0263\u0263\4\2"+
		"\u027c\u027c\u02a0\u02a0\4\2\u017a\u017a\u0239\u0239\b\2\u00e4\u00e4\u019b"+
		"\u019b\u019d\u019d\u01b8\u01b8\u0240\u0240\u0269\u0269\4\2/\60@@\5\2\u01a8"+
		"\u01a8\u0228\u0228\u0376\u0376\4\2\u01d4\u01d4\u028e\u028e\f\2\u0169\u0169"+
		"\u0171\u0171\u017c\u017e\u0185\u0185\u01fd\u01fd\u0205\u0205\u0281\u0281"+
		"\u0288\u0288\u0345\u0345\u03ed\u03ed\4\2%%\u00aa\u00aa\4\2ww\u03e4\u03e4"+
		"\r\2\u0169\u0169\u0171\u0171\u017c\u017e\u0185\u0185\u01fd\u01fd\u0205"+
		"\u0205\u0252\u0252\u0281\u0281\u0288\u0288\u0345\u0345\u03ed\u03ed\3\2"+
		"\u0488\u0489\6\2\u0179\u0179\u0314\u031f\u047c\u047c\u0484\u0485\5\2\u0472"+
		"\u0474\u047d\u047d\u047f\u047f\4\2AA\u00b4\u00b4\4\2vv\u0480\u0480\7\2"+
		"\33\33\u00e0\u00e2\u00e9\u00e9\u00eb\u00ee\u0208\u0208\4\2\33\33\u00e0"+
		"\u00e0\4\2\33\33\u00e0\u00e1\3\2\u00c6\u00d1\5\2\u00b9\u00b9\u00c5\u00c5"+
		"\u0266\u0266\4\2\u00d5\u00da\u01b1\u01b1\b\2\u00db\u00db\u00e6\u00e6\u00e8"+
		"\u00e8\u00ea\u00ea\u00f1\u00f1\u015e\u015f\6\2\u00dc\u00df\u00e4\u00e5"+
		"\u00e7\u00e7\u015c\u015c\4\2\u009b\u009b\u00ef\u00ef\4\2\u01d4\u01d4\u0324"+
		"\u032c\4\2\u00e4\u00e4\u0208\u0208\7\2\u00ca\u00ca\u00d0\u00d0\u00db\u00dc"+
		"\u00de\u00de\u01d4\u01d4\4\2\u00b9\u00b9\u0266\u0266\4\2\u013d\u013e\u0144"+
		"\u0144\6\2\'\'\u0098\u0098\u013b\u013e\u014d\u014d\3\2\u0147\u0148\5\2"+
		"\23\23aa\u00b2\u00b2\4\2\u00e0\u00e0\u00e4\u00e4\4\2\u00db\u00dc\u00de"+
		"\u00de\5\2\17\17//\u03e2\u03e2\5\2\u0120\u0120\u012c\u012d\u0137\u0137"+
		"\5\2\u0121\u0123\u0133\u0136\u0138\u013a\4\2\u0129\u0129\u012b\u012b\4"+
		"\2\u0127\u0127\u012a\u012a\4\2\u0125\u0126\u0130\u0132\4\2\u0087\u0087"+
		"\u025b\u025b\4\2\u01b3\u01b3\u0231\u0231\4\2\u0219\u0219\u0229\u0229\4"+
		"\2tt\u0467\u0467\5\2AA\u00b4\u00b4\u0298\u0298\4\2\u008b\u008b\u0097\u0097"+
		"\5\2\b\b\u0153\u0153\u026c\u026c\5\2tt\u0460\u0461\u0467\u0468\3\2\u045d"+
		"\u0463\4\2\u00e4\u00e4\u02eb\u0313\3\2\u0320\u0323\7\2\u02c5\u02c6\u02d6"+
		"\u02d8\u02de\u02de\u02e4\u02e5\u02e7\u02e7\3\2\u02b3\u02ba\5\2\u00db\u00df"+
		"\u00ec\u00ec\u00ef\u00ef<\2\20\20\24\24\37\37%%\'\',,\62\6299;;==KKQQ"+
		"``ww{{~~\u0084\u0084\u00a0\u00a0\u00aa\u00aa\u00f1\u00f1\u011d\u0124\u0128"+
		"\u0128\u012c\u012d\u0133\u013a\u014e\u0183\u0185\u0195\u0197\u0197\u0199"+
		"\u01b2\u01b4\u01c4\u01c6\u01cc\u01ce\u020b\u020d\u020d\u0211\u0222\u0225"+
		"\u0230\u0232\u024f\u0251\u0252\u0254\u0260\u0262\u027e\u0280\u02a2\u02a4"+
		"\u02a5\u02a7\u02ac\u02ae\u02b2\u02bb\u02bb\u02bd\u02c4\u02c7\u02c9\u02ce"+
		"\u02cf\u02d1\u02d5\u02d9\u02dd\u02df\u02df\u02e1\u02e3\u02e6\u02e6\u02e8"+
		"\u02ea\u0319\u0319\u0345\u0345\u036c\u036c\u03e8\u03e8\u03ed\u03ed\u0440"+
		"\u0440\31\2))cc\u0096\u0096\u0098\u0098\u00db\u00dd\u00df\u00df\u00fd"+
		"\u011c\u0124\u0127\u0129\u012b\u012e\u0132\u0146\u0146\u01cd\u01cd\u02a3"+
		"\u02a3\u02b3\u02ba\u02e1\u02e1\u0324\u0324\u0327\u0344\u0346\u036b\u036d"+
		"\u03e7\u03e9\u03ec\u03ee\u043f\u0441\u0453\u0463\u0463\2\u21db\2\u02c3"+
		"\3\2\2\2\4\u02d6\3\2\2\2\6\u02eb\3\2\2\2\b\u02ed\3\2\2\2\n\u0315\3\2\2"+
		"\2\f\u0323\3\2\2\2\16\u032e\3\2\2\2\20\u033f\3\2\2\2\22\u0344\3\2\2\2"+
		"\24\u0350\3\2\2\2\26\u036b\3\2\2\2\30\u0374\3\2\2\2\32\u0376\3\2\2\2\34"+
		"\u0382\3\2\2\2\36\u03a0\3\2\2\2 \u03c4\3\2\2\2\"\u03f7\3\2\2\2$\u0411"+
		"\3\2\2\2&\u0435\3\2\2\2(\u0442\3\2\2\2*\u04a3\3\2\2\2,\u04a5\3\2\2\2."+
		"\u04b7\3\2\2\2\60\u04f4\3\2\2\2\62\u0507\3\2\2\2\64\u050d\3\2\2\2\66\u0523"+
		"\3\2\2\28\u0525\3\2\2\2:\u0527\3\2\2\2<\u0577\3\2\2\2>\u057e\3\2\2\2@"+
		"\u0580\3\2\2\2B\u05ac\3\2\2\2D\u05b2\3\2\2\2F\u05b4\3\2\2\2H\u05c9\3\2"+
		"\2\2J\u05d0\3\2\2\2L\u05d2\3\2\2\2N\u05eb\3\2\2\2P\u05ee\3\2\2\2R\u05f3"+
		"\3\2\2\2T\u060d\3\2\2\2V\u061d\3\2\2\2X\u061f\3\2\2\2Z\u0635\3\2\2\2\\"+
		"\u0637\3\2\2\2^\u0679\3\2\2\2`\u06c0\3\2\2\2b\u06c2\3\2\2\2d\u06de\3\2"+
		"\2\2f\u06e8\3\2\2\2h\u0706\3\2\2\2j\u07c1\3\2\2\2l\u07c3\3\2\2\2n\u07c5"+
		"\3\2\2\2p\u07c8\3\2\2\2r\u0813\3\2\2\2t\u082a\3\2\2\2v\u08be\3\2\2\2x"+
		"\u08c3\3\2\2\2z\u08c5\3\2\2\2|\u08cf\3\2\2\2~\u0907\3\2\2\2\u0080\u091b"+
		"\3\2\2\2\u0082\u091d\3\2\2\2\u0084\u0940\3\2\2\2\u0086\u0949\3\2\2\2\u0088"+
		"\u0950\3\2\2\2\u008a\u0967\3\2\2\2\u008c\u0970\3\2\2\2\u008e\u097f\3\2"+
		"\2\2\u0090\u0998\3\2\2\2\u0092\u09ac\3\2\2\2\u0094\u0b8c\3\2\2\2\u0096"+
		"\u0b8e\3\2\2\2\u0098\u0b95\3\2\2\2\u009a\u0b9c\3\2\2\2\u009c\u0bb3\3\2"+
		"\2\2\u009e\u0bbb\3\2\2\2\u00a0\u0bc2\3\2\2\2\u00a2\u0bc9\3\2\2\2\u00a4"+
		"\u0bd0\3\2\2\2\u00a6\u0bdc\3\2\2\2\u00a8\u0be6\3\2\2\2\u00aa\u0bed\3\2"+
		"\2\2\u00ac\u0bfd\3\2\2\2\u00ae\u0c2b\3\2\2\2\u00b0\u0c2d\3\2\2\2\u00b2"+
		"\u0c37\3\2\2\2\u00b4\u0c3b\3\2\2\2\u00b6\u0c41\3\2\2\2\u00b8\u0c4d\3\2"+
		"\2\2\u00ba\u0c4f\3\2\2\2\u00bc\u0c56\3\2\2\2\u00be\u0c58\3\2\2\2\u00c0"+
		"\u0c8b\3\2\2\2\u00c2\u0cd5\3\2\2\2\u00c4\u0d10\3\2\2\2\u00c6\u0d6f\3\2"+
		"\2\2\u00c8\u0d73\3\2\2\2\u00ca\u0d75\3\2\2\2\u00cc\u0d98\3\2\2\2\u00ce"+
		"\u0d9a\3\2\2\2\u00d0\u0da2\3\2\2\2\u00d2\u0daa\3\2\2\2\u00d4\u0dac\3\2"+
		"\2\2\u00d6\u0dd0\3\2\2\2\u00d8\u0e07\3\2\2\2\u00da\u0e10\3\2\2\2\u00dc"+
		"\u0e24\3\2\2\2\u00de\u0e30\3\2\2\2\u00e0\u0e34\3\2\2\2\u00e2\u0e55\3\2"+
		"\2\2\u00e4\u0e6a\3\2\2\2\u00e6\u0e74\3\2\2\2\u00e8\u0e78\3\2\2\2\u00ea"+
		"\u0e92\3\2\2\2\u00ec\u0ebc\3\2\2\2\u00ee\u0ebe\3\2\2\2\u00f0\u0ecd\3\2"+
		"\2\2\u00f2\u0f01\3\2\2\2\u00f4\u0f0b\3\2\2\2\u00f6\u0f15\3\2\2\2\u00f8"+
		"\u0f4d\3\2\2\2\u00fa\u0f4f\3\2\2\2\u00fc\u0f67\3\2\2\2\u00fe\u0f6d\3\2"+
		"\2\2\u0100\u0f75\3\2\2\2\u0102\u0f86\3\2\2\2\u0104\u0f96\3\2\2\2\u0106"+
		"\u0fbb\3\2\2\2\u0108\u0fc1\3\2\2\2\u010a\u0fca\3\2\2\2\u010c\u0fd7\3\2"+
		"\2\2\u010e\u0fdb\3\2\2\2\u0110\u1001\3\2\2\2\u0112\u1027\3\2\2\2\u0114"+
		"\u1035\3\2\2\2\u0116\u103d\3\2\2\2\u0118\u1041\3\2\2\2\u011a\u1047\3\2"+
		"\2\2\u011c\u1055\3\2\2\2\u011e\u1058\3\2\2\2\u0120\u106a\3\2\2\2\u0122"+
		"\u106e\3\2\2\2\u0124\u107e\3\2\2\2\u0126\u1080\3\2\2\2\u0128\u108c\3\2"+
		"\2\2\u012a\u1090\3\2\2\2\u012c\u10a1\3\2\2\2\u012e\u10b2\3\2\2\2\u0130"+
		"\u10b5\3\2\2\2\u0132\u10bf\3\2\2\2\u0134\u10c3\3\2\2\2\u0136\u10d0\3\2"+
		"\2\2\u0138\u10d3\3\2\2\2\u013a\u10d8\3\2\2\2\u013c\u10ec\3\2\2\2\u013e"+
		"\u10ee\3\2\2\2\u0140\u10ff\3\2\2\2\u0142\u1108\3\2\2\2\u0144\u1111\3\2"+
		"\2\2\u0146\u1113\3\2\2\2\u0148\u1121\3\2\2\2\u014a\u112c\3\2\2\2\u014c"+
		"\u1135\3\2\2\2\u014e\u1138\3\2\2\2\u0150\u1140\3\2\2\2\u0152\u1159\3\2"+
		"\2\2\u0154\u1165\3\2\2\2\u0156\u1168\3\2\2\2\u0158\u1188\3\2\2\2\u015a"+
		"\u118a\3\2\2\2\u015c\u118c\3\2\2\2\u015e\u118e\3\2\2\2\u0160\u1190\3\2"+
		"\2\2\u0162\u11c5\3\2\2\2\u0164\u11c7\3\2\2\2\u0166\u11cd\3\2\2\2\u0168"+
		"\u11e1\3\2\2\2\u016a\u11ef\3\2\2\2\u016c\u11fa\3\2\2\2\u016e\u11fc\3\2"+
		"\2\2\u0170\u1202\3\2\2\2\u0172\u120c\3\2\2\2\u0174\u1210\3\2\2\2\u0176"+
		"\u1217\3\2\2\2\u0178\u121b\3\2\2\2\u017a\u1221\3\2\2\2\u017c\u1228\3\2"+
		"\2\2\u017e\u122e\3\2\2\2\u0180\u1234\3\2\2\2\u0182\u1239\3\2\2\2\u0184"+
		"\u1266\3\2\2\2\u0186\u127b\3\2\2\2\u0188\u1294\3\2\2\2\u018a\u1297\3\2"+
		"\2\2\u018c\u129d\3\2\2\2\u018e\u12ad\3\2\2\2\u0190\u12bc\3\2\2\2\u0192"+
		"\u12c2\3\2\2\2\u0194\u12e0\3\2\2\2\u0196\u12e2\3\2\2\2\u0198\u12e9\3\2"+
		"\2\2\u019a\u12f5\3\2\2\2\u019c\u12fb\3\2\2\2\u019e\u1314\3\2\2\2\u01a0"+
		"\u1318\3\2\2\2\u01a2\u131c\3\2\2\2\u01a4\u1327\3\2\2\2\u01a6\u1378\3\2"+
		"\2\2\u01a8\u13bb\3\2\2\2\u01aa\u13bd\3\2\2\2\u01ac\u1427\3\2\2\2\u01ae"+
		"\u143f\3\2\2\2\u01b0\u1441\3\2\2\2\u01b2\u1453\3\2\2\2\u01b4\u14a3\3\2"+
		"\2\2\u01b6\u14a5\3\2\2\2\u01b8\u14b2\3\2\2\2\u01ba\u14bd\3\2\2\2\u01bc"+
		"\u14d5\3\2\2\2\u01be\u14e0\3\2\2\2\u01c0\u14ea\3\2\2\2\u01c2\u14f4\3\2"+
		"\2\2\u01c4\u151c\3\2\2\2\u01c6\u151e\3\2\2\2\u01c8\u1521\3\2\2\2\u01ca"+
		"\u1584\3\2\2\2\u01cc\u1596\3\2\2\2\u01ce\u1598\3\2\2\2\u01d0\u159c\3\2"+
		"\2\2\u01d2\u15c2\3\2\2\2\u01d4\u15cb\3\2\2\2\u01d6\u15d1\3\2\2\2\u01d8"+
		"\u15d8\3\2\2\2\u01da\u15ee\3\2\2\2\u01dc\u15f0\3\2\2\2\u01de\u15fe\3\2"+
		"\2\2\u01e0\u1604\3\2\2\2\u01e2\u163c\3\2\2\2\u01e4\u16d7\3\2\2\2\u01e6"+
		"\u16e3\3\2\2\2\u01e8\u16f2\3\2\2\2\u01ea\u16f8\3\2\2\2\u01ec\u170b\3\2"+
		"\2\2\u01ee\u1715\3\2\2\2\u01f0\u1723\3\2\2\2\u01f2\u1725\3\2\2\2\u01f4"+
		"\u1728\3\2\2\2\u01f6\u173e\3\2\2\2\u01f8\u174a\3\2\2\2\u01fa\u1750\3\2"+
		"\2\2\u01fc\u175c\3\2\2\2\u01fe\u1760\3\2\2\2\u0200\u1762\3\2\2\2\u0202"+
		"\u178c\3\2\2\2\u0204\u1793\3\2\2\2\u0206\u1795\3\2\2\2\u0208\u17ac\3\2"+
		"\2\2\u020a\u17b2\3\2\2\2\u020c\u17ba\3\2\2\2\u020e\u17bd\3\2\2\2\u0210"+
		"\u17c0\3\2\2\2\u0212\u17d5\3\2\2\2\u0214\u17ea\3\2\2\2\u0216\u17f2\3\2"+
		"\2\2\u0218\u17fe\3\2\2\2\u021a\u1824\3\2\2\2\u021c\u1830\3\2\2\2\u021e"+
		"\u1832\3\2\2\2\u0220\u1838\3\2\2\2\u0222\u183c\3\2\2\2\u0224\u184c\3\2"+
		"\2\2\u0226\u1859\3\2\2\2\u0228\u1863\3\2\2\2\u022a\u1865\3\2\2\2\u022c"+
		"\u186b\3\2\2\2\u022e\u186f\3\2\2\2\u0230\u1871\3\2\2\2\u0232\u1873\3\2"+
		"\2\2\u0234\u1885\3\2\2\2\u0236\u1895\3\2\2\2\u0238\u1899\3\2\2\2\u023a"+
		"\u189e\3\2\2\2\u023c\u18a9\3\2\2\2\u023e\u18ae\3\2\2\2\u0240\u18b0\3\2"+
		"\2\2\u0242\u18b4\3\2\2\2\u0244\u18cd\3\2\2\2\u0246\u18cf\3\2\2\2\u0248"+
		"\u18d2\3\2\2\2\u024a\u18d7\3\2\2\2\u024c\u18e7\3\2\2\2\u024e\u1967\3\2"+
		"\2\2\u0250\u1969\3\2\2\2\u0252\u198a\3\2\2\2\u0254\u198f\3\2\2\2\u0256"+
		"\u1993\3\2\2\2\u0258\u1999\3\2\2\2\u025a\u19a1\3\2\2\2\u025c\u19a9\3\2"+
		"\2\2\u025e\u19b1\3\2\2\2\u0260\u19b9\3\2\2\2\u0262\u19c4\3\2\2\2\u0264"+
		"\u19cc\3\2\2\2\u0266\u19d4\3\2\2\2\u0268\u19dc\3\2\2\2\u026a\u19e4\3\2"+
		"\2\2\u026c\u1a06\3\2\2\2\u026e\u1a16\3\2\2\2\u0270\u1a1a\3\2\2\2\u0272"+
		"\u1a1c\3\2\2\2\u0274\u1a1f\3\2\2\2\u0276\u1a23\3\2\2\2\u0278\u1a29\3\2"+
		"\2\2\u027a\u1a3d\3\2\2\2\u027c\u1af1\3\2\2\2\u027e\u1af3\3\2\2\2\u0280"+
		"\u1b06\3\2\2\2\u0282\u1b08\3\2\2\2\u0284\u1b47\3\2\2\2\u0286\u1b6f\3\2"+
		"\2\2\u0288\u1b71\3\2\2\2\u028a\u1b7a\3\2\2\2\u028c\u1b85\3\2\2\2\u028e"+
		"\u1b87\3\2\2\2\u0290\u1b8a\3\2\2\2\u0292\u1b8e\3\2\2\2\u0294\u1b90\3\2"+
		"\2\2\u0296\u1b9c\3\2\2\2\u0298\u1b9e\3\2\2\2\u029a\u1bbf\3\2\2\2\u029c"+
		"\u1bc1\3\2\2\2\u029e\u1bca\3\2\2\2\u02a0\u1bdc\3\2\2\2\u02a2\u1be9\3\2"+
		"\2\2\u02a4\u1bf4\3\2\2\2\u02a6\u1c6b\3\2\2\2\u02a8\u1c81\3\2\2\2\u02aa"+
		"\u1c91\3\2\2\2\u02ac\u1c9a\3\2\2\2\u02ae\u1ca3\3\2\2\2\u02b0\u1ca5\3\2"+
		"\2\2\u02b2\u1cac\3\2\2\2\u02b4\u1cae\3\2\2\2\u02b6\u1cb0\3\2\2\2\u02b8"+
		"\u1cb2\3\2\2\2\u02ba\u1cb4\3\2\2\2\u02bc\u1cb6\3\2\2\2\u02be\u1cb8\3\2"+
		"\2\2\u02c0\u1cba\3\2\2\2\u02c2\u02c4\5\4\3\2\u02c3\u02c2\3\2\2\2\u02c3"+
		"\u02c4\3\2\2\2\u02c4\u02c7\3\2\2\2\u02c5\u02c6\7\u0461\2\2\u02c6\u02c8"+
		"\7\u0461\2\2\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02c9\3\2\2"+
		"\2\u02c9\u02ca\7\2\2\3\u02ca\3\3\2\2\2\u02cb\u02ce\5\6\4\2\u02cc\u02cd"+
		"\7\u0461\2\2\u02cd\u02cf\7\u0461\2\2\u02ce\u02cc\3\2\2\2\u02ce\u02cf\3"+
		"\2\2\2\u02cf\u02d1\3\2\2\2\u02d0\u02d2\7\u0470\2\2\u02d1\u02d0\3\2\2\2"+
		"\u02d1\u02d2\3\2\2\2\u02d2\u02d5\3\2\2\2\u02d3\u02d5\5\b\5\2\u02d4\u02cb"+
		"\3\2\2\2\u02d4\u02d3\3\2\2\2\u02d5\u02d8\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6"+
		"\u02d7\3\2\2\2\u02d7\u02e2\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d9\u02df\5\6"+
		"\4\2\u02da\u02db\7\u0461\2\2\u02db\u02dd\7\u0461\2\2\u02dc\u02da\3\2\2"+
		"\2\u02dc\u02dd\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02e0\7\u0470\2\2\u02df"+
		"\u02dc\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02e3\5\b"+
		"\5\2\u02e2\u02d9\3\2\2\2\u02e2\u02e1\3\2\2\2\u02e3\5\3\2\2\2\u02e4\u02ec"+
		"\5\n\6\2\u02e5\u02ec\5\f\7\2\u02e6\u02ec\5\16\b\2\u02e7\u02ec\5\20\t\2"+
		"\u02e8\u02ec\5\22\n\2\u02e9\u02ec\5\26\f\2\u02ea\u02ec\5\30\r\2\u02eb"+
		"\u02e4\3\2\2\2\u02eb\u02e5\3\2\2\2\u02eb\u02e6\3\2\2\2\u02eb\u02e7\3\2"+
		"\2\2\u02eb\u02e8\3\2\2\2\u02eb\u02e9\3\2\2\2\u02eb\u02ea\3\2\2\2\u02ec"+
		"\7\3\2\2\2\u02ed\u02ee\7\u0470\2\2\u02ee\t\3\2\2\2\u02ef\u0316\5\32\16"+
		"\2\u02f0\u0316\5\34\17\2\u02f1\u0316\5\36\20\2\u02f2\u0316\5 \21\2\u02f3"+
		"\u0316\5\"\22\2\u02f4\u0316\5$\23\2\u02f5\u0316\5(\25\2\u02f6\u0316\5"+
		"*\26\2\u02f7\u0316\5,\27\2\u02f8\u0316\5.\30\2\u02f9\u0316\5\60\31\2\u02fa"+
		"\u0316\5:\36\2\u02fb\u0316\5&\24\2\u02fc\u0316\5\u0080A\2\u02fd\u0316"+
		"\5\u0082B\2\u02fe\u0316\5\u0084C\2\u02ff\u0316\5\u0086D\2\u0300\u0316"+
		"\5\u0088E\2\u0301\u0316\5\u008aF\2\u0302\u0316\5\u008cG\2\u0303\u0316"+
		"\5\u008eH\2\u0304\u0316\5\u0090I\2\u0305\u0316\5\u0092J\2\u0306\u0316"+
		"\5\u0096L\2\u0307\u0316\5\u0098M\2\u0308\u0316\5\u009aN\2\u0309\u0316"+
		"\5\u009cO\2\u030a\u0316\5\u009eP\2\u030b\u0316\5\u00a0Q\2\u030c\u0316"+
		"\5\u00a2R\2\u030d\u0316\5\u00a4S\2\u030e\u0316\5\u00a6T\2\u030f\u0316"+
		"\5\u00a8U\2\u0310\u0316\5\u00aaV\2\u0311\u0316\5\u00acW\2\u0312\u0316"+
		"\5\u00aeX\2\u0313\u0316\5\u00b0Y\2\u0314\u0316\5\u00b4[\2\u0315\u02ef"+
		"\3\2\2\2\u0315\u02f0\3\2\2\2\u0315\u02f1\3\2\2\2\u0315\u02f2\3\2\2\2\u0315"+
		"\u02f3\3\2\2\2\u0315\u02f4\3\2\2\2\u0315\u02f5\3\2\2\2\u0315\u02f6\3\2"+
		"\2\2\u0315\u02f7\3\2\2\2\u0315\u02f8\3\2\2\2\u0315\u02f9\3\2\2\2\u0315"+
		"\u02fa\3\2\2\2\u0315\u02fb\3\2\2\2\u0315\u02fc\3\2\2\2\u0315\u02fd\3\2"+
		"\2\2\u0315\u02fe\3\2\2\2\u0315\u02ff\3\2\2\2\u0315\u0300\3\2\2\2\u0315"+
		"\u0301\3\2\2\2\u0315\u0302\3\2\2\2\u0315\u0303\3\2\2\2\u0315\u0304\3\2"+
		"\2\2\u0315\u0305\3\2\2\2\u0315\u0306\3\2\2\2\u0315\u0307\3\2\2\2\u0315"+
		"\u0308\3\2\2\2\u0315\u0309\3\2\2\2\u0315\u030a\3\2\2\2\u0315\u030b\3\2"+
		"\2\2\u0315\u030c\3\2\2\2\u0315\u030d\3\2\2\2\u0315\u030e\3\2\2\2\u0315"+
		"\u030f\3\2\2\2\u0315\u0310\3\2\2\2\u0315\u0311\3\2\2\2\u0315\u0312\3\2"+
		"\2\2\u0315\u0313\3\2\2\2\u0315\u0314\3\2\2\2\u0316\13\3\2\2\2\u0317\u0324"+
		"\5\u00c6d\2\u0318\u0324\5\u00be`\2\u0319\u0324\5\u00c8e\2\u031a\u0324"+
		"\5\u00b8]\2\u031b\u0324\5\u00c4c\2\u031c\u0324\5\u00b6\\\2\u031d\u0324"+
		"\5\u00c0a\2\u031e\u0324\5\u00c2b\2\u031f\u0324\5\u00ba^\2\u0320\u0324"+
		"\5\u00bc_\2\u0321\u0324\5\u00caf\2\u0322\u0324\5\u0216\u010c\2\u0323\u0317"+
		"\3\2\2\2\u0323\u0318\3\2\2\2\u0323\u0319\3\2\2\2\u0323\u031a\3\2\2\2\u0323"+
		"\u031b\3\2\2\2\u0323\u031c\3\2\2\2\u0323\u031d\3\2\2\2\u0323\u031e\3\2"+
		"\2\2\u0323\u031f\3\2\2\2\u0323\u0320\3\2\2\2\u0323\u0321\3\2\2\2\u0323"+
		"\u0322\3\2\2\2\u0324\r\3\2\2\2\u0325\u032f\5\u0126\u0094\2\u0326\u032f"+
		"\5\u0128\u0095\2\u0327\u032f\5\u012a\u0096\2\u0328\u032f\5\u012c\u0097"+
		"\2\u0329\u032f\5\u012e\u0098\2\u032a\u032f\5\u0130\u0099\2\u032b\u032f"+
		"\5\u0132\u009a\2\u032c\u032f\5\u0134\u009b\2\u032d\u032f\5\u0136\u009c"+
		"\2\u032e\u0325\3\2\2\2\u032e\u0326\3\2\2\2\u032e\u0327\3\2\2\2\u032e\u0328"+
		"\3\2\2\2\u032e\u0329\3\2\2\2\u032e\u032a\3\2\2\2\u032e\u032b\3\2\2\2\u032e"+
		"\u032c\3\2\2\2\u032e\u032d\3\2\2\2\u032f\17\3\2\2\2\u0330\u0340\5\u0146"+
		"\u00a4\2\u0331\u0340\5\u0148\u00a5\2\u0332\u0340\5\u014a\u00a6\2\u0333"+
		"\u0340\5\u014c\u00a7\2\u0334\u0340\5\u014e\u00a8\2\u0335\u0340\5\u0150"+
		"\u00a9\2\u0336\u0340\5\u0152\u00aa\2\u0337\u0340\5\u0154\u00ab\2\u0338"+
		"\u0340\5\u0156\u00ac\2\u0339\u0340\5\u016e\u00b8\2\u033a\u0340\5\u0170"+
		"\u00b9\2\u033b\u0340\5\u0172\u00ba\2\u033c\u0340\5\u0174\u00bb\2\u033d"+
		"\u0340\5\u0176\u00bc\2\u033e\u0340\5\u0178\u00bd\2\u033f\u0330\3\2\2\2"+
		"\u033f\u0331\3\2\2\2\u033f\u0332\3\2\2\2\u033f\u0333\3\2\2\2\u033f\u0334"+
		"\3\2\2\2\u033f\u0335\3\2\2\2\u033f\u0336\3\2\2\2\u033f\u0337\3\2\2\2\u033f"+
		"\u0338\3\2\2\2\u033f\u0339\3\2\2\2\u033f\u033a\3\2\2\2\u033f\u033b\3\2"+
		"\2\2\u033f\u033c\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u033e\3\2\2\2\u0340"+
		"\21\3\2\2\2\u0341\u0345\5\u017a\u00be\2\u0342\u0345\5\u017c\u00bf\2\u0343"+
		"\u0345\5\u017e\u00c0\2\u0344\u0341\3\2\2\2\u0344\u0342\3\2\2\2\u0344\u0343"+
		"\3\2\2\2\u0345\23\3\2\2\2\u0346\u0351\5\u0182\u00c2\2\u0347\u0351\5\u0184"+
		"\u00c3\2\u0348\u0351\5\u0186\u00c4\2\u0349\u0351\5\u018a\u00c6\2\u034a"+
		"\u0351\5\u018c\u00c7\2\u034b\u0351\5\u018e\u00c8\2\u034c\u0351\5\u0192"+
		"\u00ca\2\u034d\u0351\5\u0188\u00c5\2\u034e\u0351\5\u0190\u00c9\2\u034f"+
		"\u0351\5\u0194\u00cb\2\u0350\u0346\3\2\2\2\u0350\u0347\3\2\2\2\u0350\u0348"+
		"\3\2\2\2\u0350\u0349\3\2\2\2\u0350\u034a\3\2\2\2\u0350\u034b\3\2\2\2\u0350"+
		"\u034c\3\2\2\2\u0350\u034d\3\2\2\2\u0350\u034e\3\2\2\2\u0350\u034f\3\2"+
		"\2\2\u0351\25\3\2\2\2\u0352\u036c\5\u01a6\u00d4\2\u0353\u036c\5\u01a8"+
		"\u00d5\2\u0354\u036c\5\u01aa\u00d6\2\u0355\u036c\5\u01ac\u00d7\2\u0356"+
		"\u036c\5\u01b0\u00d9\2\u0357\u036c\5\u01b2\u00da\2\u0358\u036c\5\u01b4"+
		"\u00db\2\u0359\u036c\5\u01b6\u00dc\2\u035a\u036c\5\u01d0\u00e9\2\u035b"+
		"\u036c\5\u01d2\u00ea\2\u035c\u036c\5\u01d4\u00eb\2\u035d\u036c\5\u01d6"+
		"\u00ec\2\u035e\u036c\5\u01d8\u00ed\2\u035f\u036c\5\u01dc\u00ef\2\u0360"+
		"\u036c\5\u01de\u00f0\2\u0361\u036c\5\u01e0\u00f1\2\u0362\u036c\5\u01e2"+
		"\u00f2\2\u0363\u036c\5\u01e4\u00f3\2\u0364\u036c\5\u01f2\u00fa\2\u0365"+
		"\u036c\5\u01f4\u00fb\2\u0366\u036c\5\u01f6\u00fc\2\u0367\u036c\5\u01f8"+
		"\u00fd\2\u0368\u036c\5\u01fa\u00fe\2\u0369\u036c\5\u01fc\u00ff\2\u036a"+
		"\u036c\5\u01fe\u0100\2\u036b\u0352\3\2\2\2\u036b\u0353\3\2\2\2\u036b\u0354"+
		"\3\2\2\2\u036b\u0355\3\2\2\2\u036b\u0356\3\2\2\2\u036b\u0357\3\2\2\2\u036b"+
		"\u0358\3\2\2\2\u036b\u0359\3\2\2\2\u036b\u035a\3\2\2\2\u036b\u035b\3\2"+
		"\2\2\u036b\u035c\3\2\2\2\u036b\u035d\3\2\2\2\u036b\u035e\3\2\2\2\u036b"+
		"\u035f\3\2\2\2\u036b\u0360\3\2\2\2\u036b\u0361\3\2\2\2\u036b\u0362\3\2"+
		"\2\2\u036b\u0363\3\2\2\2\u036b\u0364\3\2\2\2\u036b\u0365\3\2\2\2\u036b"+
		"\u0366\3\2\2\2\u036b\u0367\3\2\2\2\u036b\u0368\3\2\2\2\u036b\u0369\3\2"+
		"\2\2\u036b\u036a\3\2\2\2\u036c\27\3\2\2\2\u036d\u0375\5\u0208\u0105\2"+
		"\u036e\u0375\5\u020a\u0106\2\u036f\u0375\5\u020c\u0107\2\u0370\u0375\5"+
		"\u020e\u0108\2\u0371\u0375\5\u0210\u0109\2\u0372\u0375\5\u0212\u010a\2"+
		"\u0373\u0375\5\u0218\u010d\2\u0374\u036d\3\2\2\2\u0374\u036e\3\2\2\2\u0374"+
		"\u036f\3\2\2\2\u0374\u0370\3\2\2\2\u0374\u0371\3\2\2\2\u0374\u0372\3\2"+
		"\2\2\u0374\u0373\3\2\2\2\u0375\31\3\2\2\2\u0376\u0377\7#\2\2\u0377\u0379"+
		"\t\2\2\2\u0378\u037a\5\u0274\u013b\2\u0379\u0378\3\2\2\2\u0379\u037a\3"+
		"\2\2\2\u037a\u037b\3\2\2\2\u037b\u037f\5\u023a\u011e\2\u037c\u037e\5<"+
		"\37\2\u037d\u037c\3\2\2\2\u037e\u0381\3\2\2\2\u037f\u037d\3\2\2\2\u037f"+
		"\u0380\3\2\2\2\u0380\33\3\2\2\2\u0381\u037f\3\2\2\2\u0382\u0384\7#\2\2"+
		"\u0383\u0385\5@!\2\u0384\u0383\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386"+
		"\3\2\2\2\u0386\u0388\7\u01a1\2\2\u0387\u0389\5\u0274\u013b\2\u0388\u0387"+
		"\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b\5\u021e\u0110"+
		"\2\u038b\u038c\7x\2\2\u038c\u038d\7\u025f\2\2\u038d\u0394\5B\"\2\u038e"+
		"\u038f\7x\2\2\u038f\u0391\7\u0175\2\2\u0390\u0392\7t\2\2\u0391\u0390\3"+
		"\2\2\2\u0391\u0392\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0395\7\u0233\2\2"+
		"\u0394\u038e\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0397\3\2\2\2\u0396\u0398"+
		"\5J&\2\u0397\u0396\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039b\3\2\2\2\u0399"+
		"\u039a\7\u0172\2\2\u039a\u039c\7\u047c\2\2\u039b\u0399\3\2\2\2\u039b\u039c"+
		"\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039e\7\u0191\2\2\u039e\u039f\5\u0180"+
		"\u00c1\2\u039f\35\3\2\2\2\u03a0\u03a2\7#\2\2\u03a1\u03a3\t\3\2\2\u03a2"+
		"\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a5\3\2\2\2\u03a4\u03a6\t\4"+
		"\2\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7"+
		"\u03a8\7S\2\2\u03a8\u03aa\5\u023a\u011e\2\u03a9\u03ab\5L\'\2\u03aa\u03a9"+
		"\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ad\7x\2\2\u03ad"+
		"\u03ae\5\u0220\u0111\2\u03ae\u03b2\5\u0260";
	private static final String _serializedATNSegment1 =
		"\u0131\2\u03af\u03b1\5N(\2\u03b0\u03af\3\2\2\2\u03b1\u03b4\3\2\2\2\u03b2"+
		"\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03c1\3\2\2\2\u03b4\u03b2\3\2"+
		"\2\2\u03b5\u03b7\7\u0152\2\2\u03b6\u03b8\7\u0464\2\2\u03b7\u03b6\3\2\2"+
		"\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03c0\t\5\2\2\u03ba\u03bc"+
		"\7i\2\2\u03bb\u03bd\7\u0464\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2"+
		"\2\u03bd\u03be\3\2\2\2\u03be\u03c0\t\6\2\2\u03bf\u03b5\3\2\2\2\u03bf\u03ba"+
		"\3\2\2\2\u03c0\u03c3\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2"+
		"\37\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u03c5\7#\2\2\u03c5\u03c6\7\u01dd"+
		"\2\2\u03c6\u03c7\7K\2\2\u03c7\u03c8\5\u023a\u011e\2\u03c8\u03c9\7\7\2"+
		"\2\u03c9\u03ca\7\u0295\2\2\u03ca\u03d0\7\u047c\2\2\u03cb\u03cd\7\u01c7"+
		"\2\2\u03cc\u03ce\7\u0464\2\2\u03cd\u03cc\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce"+
		"\u03cf\3\2\2\2\u03cf\u03d1\5\u0242\u0122\2\u03d0\u03cb\3\2\2\2\u03d0\u03d1"+
		"\3\2\2\2\u03d1\u03d7\3\2\2\2\u03d2\u03d4\7\u0296\2\2\u03d3\u03d5\7\u0464"+
		"\2\2\u03d4\u03d3\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6"+
		"\u03d8\5\u0242\u0122\2\u03d7\u03d2\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03de"+
		"\3\2\2\2\u03d9\u03db\7\u023e\2\2\u03da\u03dc\7\u0464\2\2\u03db\u03da\3"+
		"\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03df\5\u0242\u0122"+
		"\2\u03de\u03d9\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e5\3\2\2\2\u03e0\u03e2"+
		"\7\u0212\2\2\u03e1\u03e3\7\u0464\2\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3\3"+
		"\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e6\5\u023a\u011e\2\u03e5\u03e0\3\2"+
		"\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8\3\2\2\2\u03e7\u03e9\7\u02a4\2\2\u03e8"+
		"\u03e7\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ef\3\2\2\2\u03ea\u03ec\7\u0172"+
		"\2\2\u03eb\u03ed\7\u0464\2\2\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed"+
		"\u03ee\3\2\2\2\u03ee\u03f0\7\u047c\2\2\u03ef\u03ea\3\2\2\2\u03ef\u03f0"+
		"\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f3\7\u019b\2\2\u03f2\u03f4\7\u0464"+
		"\2\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5"+
		"\u03f6\5\u0230\u0119\2\u03f6!\3\2\2\2\u03f7\u03f9\7#\2\2\u03f8\u03fa\5"+
		"@!\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb"+
		"\u03fc\7\u0085\2\2\u03fc\u03fd\5\u021e\u0110\2\u03fd\u03ff\7\u046d\2\2"+
		"\u03fe\u0400\5P)\2\u03ff\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0405"+
		"\3\2\2\2\u0401\u0402\7\u046f\2\2\u0402\u0404\5P)\2\u0403\u0401\3\2\2\2"+
		"\u0404\u0407\3\2\2\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408"+
		"\3\2\2\2\u0407\u0405\3\2\2\2\u0408\u040c\7\u046e\2\2\u0409\u040b\5T+\2"+
		"\u040a\u0409\3\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a\3\2\2\2\u040c\u040d"+
		"\3\2\2\2\u040d\u040f\3\2\2\2\u040e\u040c\3\2\2\2\u040f\u0410\5\u0180\u00c1"+
		"\2\u0410#\3\2\2\2\u0411\u0413\7#\2\2\u0412\u0414\5@!\2\u0413\u0412\3\2"+
		"\2\2\u0413\u0414\3\2\2\2\u0414\u0416\3\2\2\2\u0415\u0417\7\u0151\2\2\u0416"+
		"\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\7\u01b7"+
		"\2\2\u0419\u041b\5\u0274\u013b\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2"+
		"\2\u041b\u041c\3\2\2\2\u041c\u041d\5\u021e\u0110\2\u041d\u041f\7\u046d"+
		"\2\2\u041e\u0420\5R*\2\u041f\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0425"+
		"\3\2\2\2\u0421\u0422\7\u046f\2\2\u0422\u0424\5R*\2\u0423\u0421\3\2\2\2"+
		"\u0424\u0427\3\2\2\2\u0425\u0423\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0428"+
		"\3\2\2\2\u0427\u0425\3\2\2\2\u0428\u0429\7\u046e\2\2\u0429\u042a\7\u0254"+
		"\2\2\u042a\u042e\5\u024e\u0128\2\u042b\u042d\5T+\2\u042c\u042b\3\2\2\2"+
		"\u042d\u0430\3\2\2\2\u042e\u042c\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0433"+
		"\3\2\2\2\u0430\u042e\3\2\2\2\u0431\u0434\5\u0180\u00c1\2\u0432\u0434\5"+
		"\u0190\u00c9\2\u0433\u0431\3\2\2\2\u0433\u0432\3\2\2\2\u0434%\3\2\2\2"+
		"\u0435\u0436\7#\2\2\u0436\u0438\7\u0256\2\2\u0437\u0439\5\u0274\u013b"+
		"\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043f"+
		"\5\u0222\u0112\2\u043b\u043c\7\u046f\2\2\u043c\u043e\5\u0222\u0112\2\u043d"+
		"\u043b\3\2\2\2\u043e\u0441\3\2\2\2\u043f\u043d\3\2\2\2\u043f\u0440\3\2"+
		"\2\2\u0440\'\3\2\2\2\u0441\u043f\3\2\2\2\u0442\u0443\7#\2\2\u0443\u0444"+
		"\7\u0262\2\2\u0444\u0445\5\u023a\u011e\2\u0445\u0446\7E\2\2\u0446\u0447"+
		"\7\u0186\2\2\u0447\u0448\7\u02a9\2\2\u0448\u0449\t\7\2\2\u0449\u044a\7"+
		"\u021f\2\2\u044a\u044b\7\u046d\2\2\u044b\u0450\5V,\2\u044c\u044d\7\u046f"+
		"\2\2\u044d\u044f\5V,\2\u044e\u044c\3\2\2\2\u044f\u0452\3\2\2\2\u0450\u044e"+
		"\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0453\3\2\2\2\u0452\u0450\3\2\2\2\u0453"+
		"\u0454\7\u046e\2\2\u0454)\3\2\2\2\u0455\u0457\7#\2\2\u0456\u0458\7\u028b"+
		"\2\2\u0457\u0456\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u0459\3\2\2\2\u0459"+
		"\u045b\7\u00ae\2\2\u045a\u045c\5\u0274\u013b\2\u045b\u045a\3\2\2\2\u045b"+
		"\u045c\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u0465\5\u0220\u0111\2\u045e\u045f"+
		"\7d\2\2\u045f\u0466\5\u0220\u0111\2\u0460\u0461\7\u046d\2\2\u0461\u0462"+
		"\7d\2\2\u0462\u0463\5\u0220\u0111\2\u0463\u0464\7\u046e\2\2\u0464\u0466"+
		"\3\2\2\2\u0465\u045e\3\2\2\2\u0465\u0460\3\2\2\2\u0466\u04a4\3\2\2\2\u0467"+
		"\u0469\7#\2\2\u0468\u046a\7\u028b\2\2\u0469\u0468\3\2\2\2\u0469\u046a"+
		"\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046d\7\u00ae\2\2\u046c\u046e\5\u0274"+
		"\u013b\2\u046d\u046c\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f\3\2\2\2\u046f"+
		"\u0471\5\u0220\u0111\2\u0470\u0472\5X-\2\u0471\u0470\3\2\2\2\u0471\u0472"+
		"\3\2\2\2\u0472\u047d\3\2\2\2\u0473\u047a\5j\66\2\u0474\u0476\7\u046f\2"+
		"\2\u0475\u0474\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0477\3\2\2\2\u0477\u0479"+
		"\5j\66\2\u0478\u0475\3\2\2\2\u0479\u047c\3\2\2\2\u047a\u0478\3\2\2\2\u047a"+
		"\u047b\3\2\2\2\u047b\u047e\3\2\2\2\u047c\u047a\3\2\2\2\u047d\u0473\3\2"+
		"\2\2\u047d\u047e\3\2\2\2\u047e\u0480\3\2\2\2\u047f\u0481\5p9\2\u0480\u047f"+
		"\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0483\3\2\2\2\u0482\u0484\t\b\2\2\u0483"+
		"\u0482\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\3\2\2\2\u0485\u0487\7\16"+
		"\2\2\u0486\u0485\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488\3\2\2\2\u0488"+
		"\u0489\5\u00c6d\2\u0489\u04a4\3\2\2\2\u048a\u048c\7#\2\2\u048b\u048d\7"+
		"\u028b\2\2\u048c\u048b\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\3\2\2\2"+
		"\u048e\u0490\7\u00ae\2\2\u048f\u0491\5\u0274\u013b\2\u0490\u048f\3\2\2"+
		"\2\u0490\u0491\3\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493\5\u0220\u0111\2"+
		"\u0493\u049e\5X-\2\u0494\u049b\5j\66\2\u0495\u0497\7\u046f\2\2\u0496\u0495"+
		"\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049a\5j\66\2\u0499"+
		"\u0496\3\2\2\2\u049a\u049d\3\2\2\2\u049b\u0499\3\2\2\2\u049b\u049c\3\2"+
		"\2\2\u049c\u049f\3\2\2\2\u049d\u049b\3\2\2\2\u049e\u0494\3\2\2\2\u049e"+
		"\u049f\3\2\2\2\u049f\u04a1\3\2\2\2\u04a0\u04a2\5p9\2\u04a1\u04a0\3\2\2"+
		"\2\u04a1\u04a2\3\2\2\2\u04a2\u04a4\3\2\2\2\u04a3\u0455\3\2\2\2\u04a3\u0467"+
		"\3\2\2\2\u04a3\u048a\3\2\2\2\u04a4+\3\2\2\2\u04a5\u04a6\7#\2\2\u04a6\u04a7"+
		"\7\u0289\2\2\u04a7\u04a8\5\u023a\u011e\2\u04a8\u04a9\7\7\2\2\u04a9\u04aa"+
		"\7\u0187\2\2\u04aa\u04ae\7\u047c\2\2\u04ab\u04ac\7\u01ae\2\2\u04ac\u04ad"+
		"\7\u0464\2\2\u04ad\u04af\5\u0242\u0122\2\u04ae\u04ab\3\2\2\2\u04ae\u04af"+
		"\3\2\2\2\u04af\u04b5\3\2\2\2\u04b0\u04b2\7\u019b\2\2\u04b1\u04b3\7\u0464"+
		"\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4"+
		"\u04b6\5\u0230\u0119\2\u04b5\u04b0\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6-"+
		"\3\2\2\2\u04b7\u04b8\7#\2\2\u04b8\u04b9\7\u0289\2\2\u04b9\u04ba\5\u023a"+
		"\u011e\2\u04ba\u04bb\7\7\2\2\u04bb\u04bc\7\u0187\2\2\u04bc\u04bd\7\u047c"+
		"\2\2\u04bd\u04be\7\u00bc\2\2\u04be\u04bf\7\u01dd\2\2\u04bf\u04c0\7K\2"+
		"\2\u04c0\u04c6\5\u023a\u011e\2\u04c1\u04c3\7\u01a9\2\2\u04c2\u04c4\7\u0464"+
		"\2\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5"+
		"\u04c7\5\u0242\u0122\2\u04c6\u04c1\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04cd"+
		"\3\2\2\2\u04c8\u04ca\7\u01c7\2\2\u04c9\u04cb\7\u0464\2\2\u04ca\u04c9\3"+
		"\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04ce\5\u0242\u0122"+
		"\2\u04cd\u04c8\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04d4\3\2\2\2\u04cf\u04d1"+
		"\7\u0157\2\2\u04d0\u04d2\7\u0464\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2\3"+
		"\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d5\5\u0242\u0122\2\u04d4\u04cf\3\2"+
		"\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04db\3\2\2\2\u04d6\u04d8\7\u01f7\2\2\u04d7"+
		"\u04d9\7\u0464\2\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04da"+
		"\3\2\2\2\u04da\u04dc\5\u0242\u0122\2\u04db\u04d6\3\2\2\2\u04db\u04dc\3"+
		"\2\2\2\u04dc\u04e2\3\2\2\2\u04dd\u04df\7\u0212\2\2\u04de\u04e0\7\u0464"+
		"\2\2\u04df\u04de\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1"+
		"\u04e3\5\u023a\u011e\2\u04e2\u04dd\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e5"+
		"\3\2\2\2\u04e4\u04e6\7\u02a4\2\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6\3\2\2"+
		"\2\u04e6\u04ec\3\2\2\2\u04e7\u04e9\7\u0172\2\2\u04e8\u04ea\7\u0464\2\2"+
		"\u04e9\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ed"+
		"\7\u047c\2\2\u04ec\u04e7\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\3\2\2"+
		"\2\u04ee\u04f0\7\u019b\2\2\u04ef\u04f1\7\u0464\2\2\u04f0\u04ef\3\2\2\2"+
		"\u04f0\u04f1\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3\5\u0230\u0119\2\u04f3"+
		"/\3\2\2\2\u04f4\u04f6\7#\2\2\u04f5\u04f7\5@!\2\u04f6\u04f5\3\2\2\2\u04f6"+
		"\u04f7\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04f9\7\u00b3\2\2\u04f9\u04fa"+
		"\5\u021e\u0110\2\u04fa\u04fb\t\t\2\2\u04fb\u04fc\t\n\2\2\u04fc\u04fd\7"+
		"x\2\2\u04fd\u04fe\5\u0220\u0111\2\u04fe\u04ff\7C\2\2\u04ff\u0500\7\66"+
		"\2\2\u0500\u0503\7\u025a\2\2\u0501\u0502\t\13\2\2\u0502\u0504\5\u021e"+
		"\u0110\2\u0503\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0505\3\2\2\2\u0505"+
		"\u0506\5\u0180\u00c1\2\u0506\61\3\2\2\2\u0507\u0509\7\u00c2\2\2\u0508"+
		"\u050a\7\u023d\2\2\u0509\u0508\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050b"+
		"\3\2\2\2\u050b\u050c\5\64\33\2\u050c\63\3\2\2\2\u050d\u0519\5\66\34\2"+
		"\u050e\u050f\7\u046d\2\2\u050f\u0514\58\35\2\u0510\u0511\7\u046f\2\2\u0511"+
		"\u0513\58\35\2\u0512\u0510\3\2\2\2\u0513\u0516\3\2\2\2\u0514\u0512\3\2"+
		"\2\2\u0514\u0515\3\2\2\2\u0515\u0517\3\2\2\2\u0516\u0514\3\2\2\2\u0517"+
		"\u0518\7\u046e\2\2\u0518\u051a\3\2\2\2\u0519\u050e\3\2\2\2\u0519\u051a"+
		"\3\2\2\2\u051a\u051b\3\2\2\2\u051b\u051c\7\16\2\2\u051c\u051d\7\u046d"+
		"\2\2\u051d\u051e\5\f\7\2\u051e\u0521\7\u046e\2\2\u051f\u0520\7\u046f\2"+
		"\2\u0520\u0522\5\64\33\2\u0521\u051f\3\2\2\2\u0521\u0522\3\2\2\2\u0522"+
		"\65\3\2\2\2\u0523\u0524\5\u023a\u011e\2\u0524\67\3\2\2\2\u0525\u0526\5"+
		"\u023a\u011e\2\u05269\3\2\2\2\u0527\u0529\7#\2\2\u0528\u052a\5\u0276\u013c"+
		"\2\u0529\u0528\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052e\3\2\2\2\u052b\u052c"+
		"\7\u0152\2\2\u052c\u052d\7\u0464\2\2\u052d\u052f\t\f\2\2\u052e\u052b\3"+
		"\2\2\2\u052e\u052f\3\2\2\2\u052f\u0531\3\2\2\2\u0530\u0532\5@!\2\u0531"+
		"\u0530\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0536\3\2\2\2\u0533\u0534\7\u00a2"+
		"\2\2\u0534\u0535\7\u0260\2\2\u0535\u0537\t\r\2\2\u0536\u0533\3\2\2\2\u0536"+
		"\u0537\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u0539\7\u02a1\2\2\u0539\u053e"+
		"\5\u021e\u0110\2\u053a\u053b\7\u046d\2\2\u053b\u053c\5\u025a\u012e\2\u053c"+
		"\u053d\7\u046e\2\2\u053d\u053f\3\2\2\2\u053e\u053a\3\2\2\2\u053e\u053f"+
		"\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0554\7\16\2\2\u0541\u0543\7\u046d"+
		"\2\2\u0542\u0544\5\62\32\2\u0543\u0542\3\2\2\2\u0543\u0544\3\2\2\2\u0544"+
		"\u0545\3\2\2\2\u0545\u0546\5\u00c6d\2\u0546\u0547\7\u046e\2\2\u0547\u0555"+
		"\3\2\2\2\u0548\u054a\5\62\32\2\u0549\u0548\3\2\2\2\u0549\u054a\3\2\2\2"+
		"\u054a\u054b\3\2\2\2\u054b\u0552\5\u00c6d\2\u054c\u054e\7\u00c2\2\2\u054d"+
		"\u054f\t\16\2\2\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\3"+
		"\2\2\2\u0550\u0551\7\34\2\2\u0551\u0553\7z\2\2\u0552\u054c\3\2\2\2\u0552"+
		"\u0553\3\2\2\2\u0553\u0555\3\2\2\2\u0554\u0541\3\2\2\2\u0554\u0549\3\2"+
		"\2\2\u0555;\3\2\2\2\u0556\u0558\7,\2\2\u0557\u0556\3\2\2\2\u0557\u0558"+
		"\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u055b\5> \2\u055a\u055c\7\u0464\2\2"+
		"\u055b\u055a\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055f\3\2\2\2\u055d\u0560"+
		"\5\u022c\u0117\2\u055e\u0560\7,\2\2\u055f\u055d\3\2\2\2\u055f\u055e\3"+
		"\2\2\2\u0560\u0578\3\2\2\2\u0561\u0563\7,\2\2\u0562\u0561\3\2\2\2\u0562"+
		"\u0563\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u0566\7\35\2\2\u0565\u0567\7"+
		"\u0464\2\2\u0566\u0565\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0568\3\2\2\2"+
		"\u0568\u0578\5\u022e\u0118\2\u0569\u056b\7,\2\2\u056a\u0569\3\2\2\2\u056a"+
		"\u056b\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056e\7\u0197\2\2\u056d\u056f"+
		"\7\u0464\2\2\u056e\u056d\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0570\3\2\2"+
		"\2\u0570\u0578\7\u047c\2\2\u0571\u0572\7\u0088\2\2\u0572\u0574\7\u021c"+
		"\2\2\u0573\u0575\7\u0464\2\2\u0574\u0573\3\2\2\2\u0574\u0575\3\2\2\2\u0575"+
		"\u0576\3\2\2\2\u0576\u0578\t\17\2\2\u0577\u0557\3\2\2\2\u0577\u0562\3"+
		"\2\2\2\u0577\u056a\3\2\2\2\u0577\u0571\3\2\2\2\u0578=\3\2\2\2\u0579\u057a"+
		"\7\33\2\2\u057a\u057f\7\u009b\2\2\u057b\u057f\7\u034a\2\2\u057c\u057d"+
		"\7\u00e0\2\2\u057d\u057f\7\u009b\2\2\u057e\u0579\3\2\2\2\u057e\u057b\3"+
		"\2\2\2\u057e\u057c\3\2\2\2\u057f?\3\2\2\2\u0580\u0581\7\u018a\2\2\u0581"+
		"\u0588\7\u0464\2\2\u0582\u0589\5\u0228\u0115\2\u0583\u0586\7\'\2\2\u0584"+
		"\u0585\7\u046d\2\2\u0585\u0587\7\u046e\2\2\u0586\u0584\3\2\2\2\u0586\u0587"+
		"\3\2\2\2\u0587\u0589\3\2\2\2\u0588\u0582\3\2\2\2\u0588\u0583\3\2\2\2\u0589"+
		"A\3\2\2\2\u058a\u058b\7\u0154\2\2\u058b\u058f\5D#\2\u058c\u058e\5F$\2"+
		"\u058d\u058c\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u058d\3\2\2\2\u058f\u0590"+
		"\3\2\2\2\u0590\u05ad\3\2\2\2\u0591\u058f\3\2\2\2\u0592\u0595\7\u01a3\2"+
		"\2\u0593\u0596\5\u0240\u0121\2\u0594\u0596\5\u02a2\u0152\2\u0595\u0593"+
		"\3\2\2\2\u0595\u0594\3\2\2\2\u0596\u0597\3\2\2\2\u0597\u05a0\5H%\2\u0598"+
		"\u0599\7\u0278\2\2\u0599\u059d\5D#\2\u059a\u059c\5F$\2\u059b\u059a\3\2"+
		"\2\2\u059c\u059f\3\2\2\2\u059d\u059b\3\2\2\2\u059d\u059e\3\2\2\2\u059e"+
		"\u05a1\3\2\2\2\u059f\u059d\3\2\2\2\u05a0\u0598\3\2\2\2\u05a0\u05a1\3\2"+
		"\2\2\u05a1\u05aa\3\2\2\2\u05a2\u05a3\7\u019a\2\2\u05a3\u05a7\5D#\2\u05a4"+
		"\u05a6\5F$\2\u05a5\u05a4\3\2\2\2\u05a6\u05a9\3\2\2\2\u05a7\u05a5\3\2\2"+
		"\2\u05a7\u05a8\3\2\2\2\u05a8\u05ab\3\2\2\2\u05a9\u05a7\3\2\2\2\u05aa\u05a2"+
		"\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ad\3\2\2\2\u05ac\u058a\3\2\2\2\u05ac"+
		"\u0592\3\2\2\2\u05adC\3\2\2\2\u05ae\u05b3\7\u013d\2\2\u05af\u05b3\5\u0244"+
		"\u0123\2\u05b0\u05b3\5\u0240\u0121\2\u05b1\u05b3\5\u02a2\u0152\2\u05b2"+
		"\u05ae\3\2\2\2\u05b2\u05af\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b2\u05b1\3\2"+
		"\2\2\u05b3E\3\2\2\2\u05b4\u05b5\7\u0460\2\2\u05b5\u05b8\7X\2\2\u05b6\u05b9"+
		"\5\u0240\u0121\2\u05b7\u05b9\5\u02a2\u0152\2\u05b8\u05b6\3\2\2\2\u05b8"+
		"\u05b7\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bb\5H%\2\u05bbG\3\2\2\2\u05bc"+
		"\u05ca\5\u02ba\u015e\2\u05bd\u05ca\7\u00df\2\2\u05be\u05ca\7\u00f2\2\2"+
		"\u05bf\u05ca\7\u00f3\2\2\u05c0\u05ca\7\u00f4\2\2\u05c1\u05ca\7\u00f5\2"+
		"\2\u05c2\u05ca\7\u00f6\2\2\u05c3\u05ca\7\u00f7\2\2\u05c4\u05ca\7\u00f8"+
		"\2\2\u05c5\u05ca\7\u00f9\2\2\u05c6\u05ca\7\u00fa\2\2\u05c7\u05ca\7\u00fb"+
		"\2\2\u05c8\u05ca\7\u00fc\2\2\u05c9\u05bc\3\2\2\2\u05c9\u05bd\3\2\2\2\u05c9"+
		"\u05be\3\2\2\2\u05c9\u05bf\3\2\2\2\u05c9\u05c0\3\2\2\2\u05c9\u05c1\3\2"+
		"\2\2\u05c9\u05c2\3\2\2\2\u05c9\u05c3\3\2\2\2\u05c9\u05c4\3\2\2\2\u05c9"+
		"\u05c5\3\2\2\2\u05c9\u05c6\3\2\2\2\u05c9\u05c7\3\2\2\2\u05c9\u05c8\3\2"+
		"\2\2\u05caI\3\2\2\2\u05cb\u05d1\7\u0195\2\2\u05cc\u05d1\7\u018e\2\2\u05cd"+
		"\u05ce\7\u018e\2\2\u05ce\u05cf\7x\2\2\u05cf\u05d1\7\u0268\2\2\u05d0\u05cb"+
		"\3\2\2\2\u05d0\u05cc\3\2\2\2\u05d0\u05cd\3\2\2\2\u05d1K\3\2\2\2\u05d2"+
		"\u05d3\7\u00bd\2\2\u05d3\u05d4\t\20\2\2\u05d4M\3\2\2\2\u05d5\u05d7\7\u01d5"+
		"\2\2\u05d6\u05d8\7\u0464\2\2\u05d7\u05d6\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8"+
		"\u05d9\3\2\2\2\u05d9\u05ec\5\u0242\u0122\2\u05da\u05ec\5L\'\2\u05db\u05dc"+
		"\7\u00c2\2\2\u05dc\u05dd\7\u0225\2\2\u05dd\u05ec\5\u023a\u011e\2\u05de"+
		"\u05df\7\u0172\2\2\u05df\u05ec\7\u047c\2\2\u05e0\u05ec\t\21\2\2\u05e1"+
		"\u05e3\7\u036c\2\2\u05e2\u05e4\7\u0464\2\2\u05e3\u05e2\3\2\2\2\u05e3\u05e4"+
		"\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05ec\7\u047c\2\2\u05e6\u05e8\7\u03e8"+
		"\2\2\u05e7\u05e9\7\u0464\2\2\u05e8\u05e7\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9"+
		"\u05ea\3\2\2\2\u05ea\u05ec\7\u047c\2\2\u05eb\u05d5\3\2\2\2\u05eb\u05da"+
		"\3\2\2\2\u05eb\u05db\3\2\2\2\u05eb\u05de\3\2\2\2\u05eb\u05e0\3\2\2\2\u05eb"+
		"\u05e1\3\2\2\2\u05eb\u05e6\3\2\2\2\u05ecO\3\2\2\2\u05ed\u05ef\t\22\2\2"+
		"\u05ee\u05ed\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f1"+
		"\5\u023a\u011e\2\u05f1\u05f2\5\u024e\u0128\2\u05f2Q\3\2\2\2\u05f3\u05f4"+
		"\5\u023a\u011e\2\u05f4\u05f5\5\u024e\u0128\2\u05f5S\3\2\2\2\u05f6\u05f7"+
		"\7\u0172\2\2\u05f7\u060e\7\u047c\2\2\u05f8\u05f9\7\u01d6\2\2\u05f9\u060e"+
		"\7\u00a2\2\2\u05fa\u05fc\7t\2\2\u05fb\u05fa\3\2\2\2\u05fb\u05fc\3\2\2"+
		"\2\u05fc\u05fd\3\2\2\2\u05fd\u060e\7\61\2\2\u05fe\u05ff\7\u017f\2\2\u05ff"+
		"\u0609\7\u00a2\2\2\u0600\u0601\7\u020b\2\2\u0601\u0609\7\u00a2\2\2\u0602"+
		"\u0603\7\u0089\2\2\u0603\u0604\7\u00a2\2\2\u0604\u0609\7\u0186\2\2\u0605"+
		"\u0606\7r\2\2\u0606\u0607\7\u00a2\2\2\u0607\u0609\7\u0186\2\2\u0608\u05fe"+
		"\3\2\2\2\u0608\u0600\3\2\2\2\u0608\u0602\3\2\2\2\u0608\u0605\3\2\2\2\u0609"+
		"\u060e\3\2\2\2\u060a\u060b\7\u00a2\2\2\u060b\u060c\7\u0260\2\2\u060c\u060e"+
		"\t\r\2\2\u060d\u05f6\3\2\2\2\u060d\u05f8\3\2\2\2\u060d\u05fb\3\2\2\2\u060d"+
		"\u0608\3\2\2\2\u060d\u060a\3\2\2\2\u060eU\3\2\2\2\u060f\u0610\7\u01c0"+
		"\2\2\u0610\u061e\7\u047c\2\2\u0611\u0612\7)\2\2\u0612\u061e\7\u047c\2"+
		"\2\u0613\u0614\7\u029b\2\2\u0614\u061e\7\u047c\2\2\u0615\u0616\7\u0229"+
		"\2\2\u0616\u061e\7\u047c\2\2\u0617\u0618\7\u026b\2\2\u0618\u061e\7\u047c"+
		"\2\2\u0619\u061a\7\u0220\2\2\u061a\u061e\7\u047c\2\2\u061b\u061c\7\u022f"+
		"\2\2\u061c\u061e\5\u0240\u0121\2\u061d\u060f\3\2\2\2\u061d\u0611\3\2\2"+
		"\2\u061d\u0613\3\2\2\2\u061d\u0615\3\2\2\2\u061d\u0617\3\2\2\2\u061d\u0619"+
		"\3\2\2\2\u061d\u061b\3\2\2\2\u061eW\3\2\2\2\u061f\u0620\7\u046d\2\2\u0620"+
		"\u0625\5Z.\2\u0621\u0622\7\u046f\2\2\u0622\u0624\5Z.\2\u0623\u0621\3\2"+
		"\2\2\u0624\u0627\3\2\2\2\u0625\u0623\3\2\2\2\u0625\u0626\3\2\2\2\u0626"+
		"\u0628\3\2\2\2\u0627\u0625\3\2\2\2\u0628\u0629\7\u046e\2\2\u0629Y\3\2"+
		"\2\2\u062a\u062b\5\u0224\u0113\2\u062b\u062c\5\\/\2\u062c\u0636\3\2\2"+
		"\2\u062d\u062f\5`\61\2\u062e\u0630\7t\2\2\u062f\u062e\3\2\2\2\u062f\u0630"+
		"\3\2\2\2\u0630\u0632\3\2\2\2\u0631\u0633\7;\2\2\u0632\u0631\3\2\2\2\u0632"+
		"\u0633\3\2\2\2\u0633\u0636\3\2\2\2\u0634\u0636\5h\65\2\u0635\u062a\3\2"+
		"\2\2\u0635\u062d\3\2\2\2\u0635\u0634\3\2\2\2\u0636[\3\2\2\2\u0637\u063b"+
		"\5\u024e\u0128\2\u0638\u063a\5^\60\2\u0639\u0638\3\2\2\2\u063a\u063d\3"+
		"\2\2\2\u063b\u0639\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063f\3\2\2\2\u063d"+
		"\u063b\3\2\2\2\u063e\u0640\7t\2\2\u063f\u063e\3\2\2\2\u063f\u0640\3\2"+
		"\2\2\u0640\u0642\3\2\2\2\u0641\u0643\7;\2\2\u0642\u0641\3\2\2\2\u0642"+
		"\u0643\3\2\2\2\u0643]\3\2\2\2\u0644\u067a\5\u024a\u0126\2\u0645\u0646"+
		"\7,\2\2\u0646\u067a\5\u026c\u0137\2\u0647\u067a\7\u02a3\2\2\u0648\u067a"+
		"\7\u01cd\2\2\u0649\u064e\7\u0158\2\2\u064a\u064b\7x\2\2\u064b\u064c\7"+
		"\u00ba\2\2\u064c\u064e\5\u026e\u0138\2\u064d\u0649\3\2\2\2\u064d\u064a"+
		"\3\2\2\2\u064e\u067a\3\2\2\2\u064f\u0651\7\u0084\2\2\u0650\u064f\3\2\2"+
		"\2\u0650\u0651\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u067a\7]\2\2\u0653\u0655"+
		"\7\u00b7\2\2\u0654\u0656\7]\2\2\u0655\u0654\3\2\2\2\u0655\u0656\3\2\2"+
		"\2\u0656\u067a\3\2\2\2\u0657\u0658\7\u0172\2\2\u0658\u067a\7\u047c\2\2"+
		"\u0659\u065a\7\u0170\2\2\u065a\u067a\t\23\2\2\u065b\u065c\7\u027e\2\2"+
		"\u065c\u067a\t\24\2\2\u065d\u067a\5b\62\2\u065e\u065f\7\35\2\2\u065f\u067a"+
		"\5\u022e\u0118\2\u0660\u0661\7H\2\2\u0661\u0663\7\n\2\2\u0662\u0660\3"+
		"\2\2\2\u0662\u0663\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u0665\7\16\2\2\u0665"+
		"\u0666\7\u046d\2\2\u0666\u0667\5\u02a2\u0152\2\u0667\u0669\7\u046e\2\2"+
		"\u0668\u066a\t\25\2\2\u0669\u0668\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u067a"+
		"\3\2\2\2\u066b\u066c\7\u00f1\2\2\u066c\u066d\7,\2\2\u066d\u067a\7\u029f"+
		"\2\2\u066e\u0670\7 \2\2\u066f\u0671\5\u023a\u011e\2\u0670\u066f\3\2\2"+
		"\2\u0670\u0671\3\2\2\2\u0671\u0673\3\2\2\2\u0672\u066e\3\2\2\2\u0672\u0673"+
		"\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0675\7\34\2\2\u0675\u0676\7\u046d"+
		"\2\2\u0676\u0677\5\u02a2\u0152\2\u0677\u0678\7\u046e\2\2\u0678\u067a\3"+
		"\2\2\2\u0679\u0644\3\2\2\2\u0679\u0645\3\2\2\2\u0679\u0647\3\2\2\2\u0679"+
		"\u0648\3\2\2\2\u0679\u064d\3\2\2\2\u0679\u0650\3\2\2\2\u0679\u0653\3\2"+
		"\2\2\u0679\u0657\3\2\2\2\u0679\u0659\3\2\2\2\u0679\u065b\3\2\2\2\u0679"+
		"\u065d\3\2\2\2\u0679\u065e\3\2\2\2\u0679\u0662\3\2\2\2\u0679\u066b\3\2"+
		"\2\2\u0679\u0672\3\2\2\2\u067a_\3\2\2\2\u067b\u067d\7 \2\2\u067c\u067e"+
		"\5\u023a\u011e\2\u067d\u067c\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u0680\3"+
		"\2\2\2\u067f\u067b\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0681\3\2\2\2\u0681"+
		"\u0682\7\u0084\2\2\u0682\u0684\7]\2\2\u0683\u0685\5\u023a\u011e\2\u0684"+
		"\u0683\3\2\2\2\u0684\u0685\3\2\2\2\u0685\u0687\3\2\2\2\u0686\u0688\5L"+
		"\'\2\u0687\u0686\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u0689\3\2\2\2\u0689"+
		"\u068d\5\u0260\u0131\2\u068a\u068c\5N(\2\u068b\u068a\3\2\2\2\u068c\u068f"+
		"\3\2\2\2\u068d\u068b\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u06c1\3\2\2\2\u068f"+
		"\u068d\3\2\2\2\u0690\u0692\7 \2\2\u0691\u0693\5\u023a\u011e\2\u0692\u0691"+
		"\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0695\3\2\2\2\u0694\u0690\3\2\2\2\u0694"+
		"\u0695\3\2\2\2\u0695\u0696\3\2\2\2\u0696\u0698\7\u00b7\2\2\u0697\u0699"+
		"\t\26\2\2\u0698\u0697\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069b\3\2\2\2"+
		"\u069a\u069c\5\u023a\u011e\2\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c"+
		"\u069e\3\2\2\2\u069d\u069f\5L\'\2\u069e\u069d\3\2\2\2\u069e\u069f\3\2"+
		"\2\2\u069f\u06a0\3\2\2\2\u06a0\u06a4\5\u0260\u0131\2\u06a1\u06a3\5N(\2"+
		"\u06a2\u06a1\3\2\2\2\u06a3\u06a6\3\2\2\2\u06a4\u06a2\3\2\2\2\u06a4\u06a5"+
		"\3\2\2\2\u06a5\u06c1\3\2\2\2\u06a6\u06a4\3\2\2\2\u06a7\u06a9\7 \2\2\u06a8"+
		"\u06aa\5\u023a\u011e\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ac"+
		"\3\2\2\2\u06ab\u06a7\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad"+
		"\u06ae\7E\2\2\u06ae\u06b0\7]\2\2\u06af\u06b1\5\u023a\u011e\2\u06b0\u06af"+
		"\3\2\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b3\5\u0260\u0131"+
		"\2\u06b3\u06b4\5b\62\2\u06b4\u06c1\3\2\2\2\u06b5\u06b7\7 \2\2\u06b6\u06b8"+
		"\5\u023a\u011e\2\u06b7\u06b6\3\2\2\2\u06b7\u06b8\3\2\2\2\u06b8\u06ba\3"+
		"\2\2\2\u06b9\u06b5\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb"+
		"\u06bc\7\34\2\2\u06bc\u06bd\7\u046d\2\2\u06bd\u06be\5\u02a2\u0152\2\u06be"+
		"\u06bf\7\u046e\2\2\u06bf\u06c1\3\2\2\2\u06c0\u067f\3\2\2\2\u06c0\u0694"+
		"\3\2\2\2\u06c0\u06ab\3\2\2\2\u06c0\u06b9\3\2\2\2\u06c1a\3\2\2\2\u06c2"+
		"\u06c3\7\u008a\2\2\u06c3\u06c5\5\u0220\u0111\2\u06c4\u06c6\5\u0260\u0131"+
		"\2\u06c5\u06c4\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06c9\3\2\2\2\u06c7\u06c8"+
		"\7o\2\2\u06c8\u06ca\t\27\2\2\u06c9\u06c7\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca"+
		"\u06cc\3\2\2\2\u06cb\u06cd\5d\63\2\u06cc\u06cb\3\2\2\2\u06cc\u06cd\3\2"+
		"\2\2\u06cdc\3\2\2\2\u06ce\u06cf\7x\2\2\u06cf\u06d0\7.\2\2\u06d0\u06d4"+
		"\5f\64\2\u06d1\u06d2\7x\2\2\u06d2\u06d3\7\u00ba\2\2\u06d3\u06d5\5f\64"+
		"\2\u06d4\u06d1\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5\u06df\3\2\2\2\u06d6\u06d7"+
		"\7x\2\2\u06d7\u06d8\7\u00ba\2\2\u06d8\u06dc\5f\64\2\u06d9\u06da\7x\2\2"+
		"\u06da\u06db\7.\2\2\u06db\u06dd\5f\64\2\u06dc\u06d9\3\2\2\2\u06dc\u06dd"+
		"\3\2\2\2\u06dd\u06df\3\2\2\2\u06de\u06ce\3\2\2\2\u06de\u06d6\3\2\2\2\u06df"+
		"e\3\2\2\2\u06e0\u06e9\7\u0092\2\2\u06e1\u06e9\7\27\2\2\u06e2\u06e3\7\u009b"+
		"\2\2\u06e3\u06e9\7v\2\2\u06e4\u06e5\7\u020b\2\2\u06e5\u06e9\7\u014f\2"+
		"\2\u06e6\u06e7\7\u009b\2\2\u06e7\u06e9\7,\2\2\u06e8\u06e0\3\2\2\2\u06e8"+
		"\u06e1\3\2\2\2\u06e8\u06e2\3\2\2\2\u06e8\u06e4\3\2\2\2\u06e8\u06e6\3\2"+
		"\2\2\u06e9g\3\2\2\2\u06ea\u06ec\t\26\2\2\u06eb\u06ed\5\u023a\u011e\2\u06ec"+
		"\u06eb\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ef\3\2\2\2\u06ee\u06f0\5L"+
		"\'\2\u06ef\u06ee\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1"+
		"\u06f5\5\u0260\u0131\2\u06f2\u06f4\5N(\2\u06f3\u06f2\3\2\2\2\u06f4\u06f7"+
		"\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u0707\3\2\2\2\u06f7"+
		"\u06f5\3\2\2\2\u06f8\u06fa\t\30\2\2\u06f9\u06fb\t\26\2\2\u06fa\u06f9\3"+
		"\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fd\3\2\2\2\u06fc\u06fe\5\u023a\u011e"+
		"\2\u06fd\u06fc\3\2\2\2\u06fd\u06fe\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0703"+
		"\5\u0260\u0131\2\u0700\u0702\5N(\2\u0701\u0700\3\2\2\2\u0702\u0705\3\2"+
		"\2\2\u0703\u0701\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0707\3\2\2\2\u0705"+
		"\u0703\3\2\2\2\u0706\u06ea\3\2\2\2\u0706\u06f8\3\2\2\2\u0707i\3\2\2\2"+
		"\u0708\u070a\7\u019b\2\2\u0709\u070b\7\u0464\2\2\u070a\u0709\3\2\2\2\u070a"+
		"\u070b\3\2\2\2\u070b\u070d\3\2\2\2\u070c\u070e\5\u0230\u0119\2\u070d\u070c"+
		"\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u07c2\3\2\2\2\u070f\u0711\7\u036c\2"+
		"\2\u0710\u0712\7\u0464\2\2\u0711\u0710\3\2\2\2\u0711\u0712\3\2\2\2\u0712"+
		"\u0713\3\2\2\2\u0713\u07c2\7\u047c\2\2\u0714\u0716\7\u0157\2\2\u0715\u0717"+
		"\7\u0464\2\2\u0716\u0715\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0718\3\2\2"+
		"\2\u0718\u07c2\5\u0240\u0121\2\u0719\u071b\7\u0158\2\2\u071a\u071c\7\u0464"+
		"\2\2\u071b\u071a\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071d\3\2\2\2\u071d"+
		"\u07c2\5\u0240\u0121\2\u071e\u0720\7\u0159\2\2\u071f\u0721\7\u0464\2\2"+
		"\u0720\u071f\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u0722\3\2\2\2\u0722\u07c2"+
		"\5\u0240\u0121\2\u0723\u0725\7,\2\2\u0724\u0723\3\2\2\2\u0724\u0725\3"+
		"\2\2\2\u0725\u0726\3\2\2\2\u0726\u0728\5> \2\u0727\u0729\7\u0464\2\2\u0728"+
		"\u0727\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072c\3\2\2\2\u072a\u072d\5\u022c"+
		"\u0117\2\u072b\u072d\7,\2\2\u072c\u072a\3\2\2\2\u072c\u072b\3\2\2\2\u072d"+
		"\u07c2\3\2\2\2\u072e\u0730\t\31\2\2\u072f\u0731\7\u0464\2\2\u0730\u072f"+
		"\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u07c2\t\32\2\2"+
		"\u0733\u0735\7,\2\2\u0734\u0733\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u0736"+
		"\3\2\2\2\u0736\u0738\7\35\2\2\u0737\u0739\7\u0464\2\2\u0738\u0737\3\2"+
		"\2\2\u0738\u0739\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u07c2\5\u022e\u0118"+
		"\2\u073b\u073d\7\u0172\2\2\u073c\u073e\7\u0464\2\2\u073d\u073c\3\2\2\2"+
		"\u073d\u073e\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u07c2\7\u047c\2\2\u0740"+
		"\u0742\7\u0177\2\2\u0741\u0743\7\u0464\2\2\u0742\u0741\3\2\2\2\u0742\u0743"+
		"\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u07c2\t\33\2\2\u0745\u0747\7\u017a"+
		"\2\2\u0746\u0748\7\u0464\2\2\u0747\u0746\3\2\2\2\u0747\u0748\3\2\2\2\u0748"+
		"\u0749\3\2\2\2\u0749\u07c2\7\u047c\2\2\u074a\u074b\t\34\2\2\u074b\u074d"+
		"\7\u018d\2\2\u074c\u074e\7\u0464\2\2\u074d\u074c\3\2\2\2\u074d\u074e\3"+
		"\2\2\2\u074e\u074f\3\2\2\2\u074f\u07c2\7\u047c\2\2\u0750\u0752\7\u018b"+
		"\2\2\u0751\u0753\7\u0464\2\2\u0752\u0751\3\2\2\2\u0752\u0753\3\2\2\2\u0753"+
		"\u0754\3\2\2\2\u0754\u07c2\t\32\2\2\u0755\u0757\7\u0197\2\2\u0756\u0758"+
		"\7\u0464\2\2\u0757\u0756\3\2\2\2\u0757\u0758\3\2\2\2\u0758\u0759\3\2\2"+
		"\2\u0759\u07c2\7\u047c\2\2\u075a\u075c\t\35\2\2\u075b\u075d\7\u0464\2"+
		"\2\u075c\u075b\3\2\2\2\u075c\u075d\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u07c2"+
		"\t\32\2\2\u075f\u0761\t\36\2\2\u0760\u0762\7\u0464\2\2\u0761\u0760\3\2"+
		"\2\2\u0761\u0762\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u07c2\5\u0240\u0121"+
		"\2\u0764\u0766\7\u0198\2\2\u0765\u0767\7\u0464\2\2\u0766\u0765\3\2\2\2"+
		"\u0766\u0767\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u07c2\5\u0240\u0121\2\u0769"+
		"\u076a\7S\2\2\u076a\u076c\7\u018d\2\2\u076b\u076d\7\u0464\2\2\u076c\u076b"+
		"\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u07c2\7\u047c\2"+
		"\2\u076f\u0771\7\u01c9\2\2\u0770\u0772\7\u0464\2\2\u0771\u0770\3\2\2\2"+
		"\u0771\u0772\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u07c2\t\37\2\2\u0774\u0776"+
		"\7\u01d5\2\2\u0775\u0777\7\u0464\2\2\u0776\u0775\3\2\2\2\u0776\u0777\3"+
		"\2\2\2\u0777\u0778\3\2\2\2\u0778\u07c2\5\u0242\u0122\2\u0779\u077b\7\u01f6"+
		"\2\2\u077a\u077c\7\u0464\2\2\u077b\u077a\3\2\2\2\u077b\u077c\3\2\2\2\u077c"+
		"\u077d\3\2\2\2\u077d\u07c2\5\u0240\u0121\2\u077e\u0780\7\u0200\2\2\u077f"+
		"\u0781\7\u0464\2\2\u0780\u077f\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0782"+
		"\3\2\2\2\u0782\u07c2\5\u0240\u0121\2\u0783\u0785\7\u0221\2\2\u0784\u0786"+
		"\7\u0464\2\2\u0785\u0784\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u0787\3\2\2"+
		"\2\u0787\u07c2\t\17\2\2\u0788\u078a\7\u0229\2\2\u0789\u078b\7\u0464\2"+
		"\2\u078a\u0789\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078c\3\2\2\2\u078c\u07c2"+
		"\7\u047c\2\2\u078d\u078f\7\u025c\2\2\u078e\u0790\7\u0464\2\2\u078f\u078e"+
		"\3\2\2\2\u078f\u0790\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u07c2\t \2\2\u0792"+
		"\u0793\7\u0277\2\2\u0793\u07c2\7\u028f\2\2\u0794\u0796\7\u03e8\2\2\u0795"+
		"\u0797\7\u0464\2\2\u0796\u0795\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u0798"+
		"\3\2\2\2\u0798\u07c2\7\u047c\2\2\u0799\u079b\7\u0279\2\2\u079a\u079c\7"+
		"\u0464\2\2\u079b\u079a\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u079d\3\2\2\2"+
		"\u079d\u07c2\t\17\2\2\u079e\u07a0\7\u027a\2\2\u079f\u07a1\7\u0464\2\2"+
		"\u07a0\u079f\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07c2"+
		"\t\17\2\2\u07a3\u07a5\7\u027b\2\2\u07a4\u07a6\7\u0464\2\2\u07a5\u07a4"+
		"\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a9\3\2\2\2\u07a7\u07aa\7,\2\2\u07a8"+
		"\u07aa\5\u0240\u0121\2\u07a9\u07a7\3\2\2\2\u07a9\u07a8\3\2\2\2\u07aa\u07c2"+
		"\3\2\2\2\u07ab\u07ac\7\u0289\2\2\u07ac\u07ae\5\u023a\u011e\2\u07ad\u07af"+
		"\5n8\2\u07ae\u07ad\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07c2\3\2\2\2\u07b0"+
		"\u07b1\7\u028a\2\2\u07b1\u07b2\7\u0464\2\2\u07b2\u07c2\5l\67\2\u07b3\u07c2"+
		"\5n8\2\u07b4\u07b6\7\u0290\2\2\u07b5\u07b7\7\u0464\2\2\u07b6\u07b5\3\2"+
		"\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07c2\t\32\2\2\u07b9"+
		"\u07bb\7\u00b6\2\2\u07ba\u07bc\7\u0464\2\2\u07bb\u07ba\3\2\2\2\u07bb\u07bc"+
		"\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07be\7\u046d\2\2\u07be\u07bf\5\u025e"+
		"\u0130\2\u07bf\u07c0\7\u046e\2\2\u07c0\u07c2\3\2\2\2\u07c1\u0708\3\2\2"+
		"\2\u07c1\u070f\3\2\2\2\u07c1\u0714\3\2\2\2\u07c1\u0719\3\2\2\2\u07c1\u071e"+
		"\3\2\2\2\u07c1\u0724\3\2\2\2\u07c1\u072e\3\2\2\2\u07c1\u0734\3\2\2\2\u07c1"+
		"\u073b\3\2\2\2\u07c1\u0740\3\2\2\2\u07c1\u0745\3\2\2\2\u07c1\u074a\3\2"+
		"\2\2\u07c1\u0750\3\2\2\2\u07c1\u0755\3\2\2\2\u07c1\u075a\3\2\2\2\u07c1"+
		"\u075f\3\2\2\2\u07c1\u0764\3\2\2\2\u07c1\u0769\3\2\2\2\u07c1\u076f\3\2"+
		"\2\2\u07c1\u0774\3\2\2\2\u07c1\u0779\3\2\2\2\u07c1\u077e\3\2\2\2\u07c1"+
		"\u0783\3\2\2\2\u07c1\u0788\3\2\2\2\u07c1\u078d\3\2\2\2\u07c1\u0792\3\2"+
		"\2\2\u07c1\u0794\3\2\2\2\u07c1\u0799\3\2\2\2\u07c1\u079e\3\2\2\2\u07c1"+
		"\u07a3\3\2\2\2\u07c1\u07ab\3\2\2\2\u07c1\u07b0\3\2\2\2\u07c1\u07b3\3\2"+
		"\2\2\u07c1\u07b4\3\2\2\2\u07c1\u07b9\3\2\2\2\u07c2k\3\2\2\2\u07c3\u07c4"+
		"\t!\2\2\u07c4m\3\2\2\2\u07c5\u07c6\7\u027e\2\2\u07c6\u07c7\t\24\2\2\u07c7"+
		"o\3\2\2\2\u07c8\u07c9\7\u0083\2\2\u07c9\u07ca\7\25\2\2\u07ca\u07cd\5r"+
		":\2\u07cb\u07cc\7\u0228\2\2\u07cc\u07ce\5\u0240\u0121\2\u07cd\u07cb\3"+
		"\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d6\3\2\2\2\u07cf\u07d0\7\u0283\2\2"+
		"\u07d0\u07d1\7\25\2\2\u07d1\u07d4\5t;\2\u07d2\u07d3\7\u0284\2\2\u07d3"+
		"\u07d5\5\u0240\u0121\2\u07d4\u07d2\3\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07d7"+
		"\3\2\2\2\u07d6\u07cf\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07e3\3\2\2\2\u07d8"+
		"\u07d9\7\u046d\2\2\u07d9\u07de\5v<\2\u07da\u07db\7\u046f\2\2\u07db\u07dd"+
		"\5v<\2\u07dc\u07da\3\2\2\2\u07dd\u07e0\3\2\2\2\u07de\u07dc\3\2\2\2\u07de"+
		"\u07df\3\2\2\2\u07df\u07e1\3\2\2\2\u07e0\u07de\3\2\2\2\u07e1\u07e2\7\u046e"+
		"\2\2\u07e2\u07e4\3\2\2\2\u07e3\u07d8\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4"+
		"q\3\2\2\2\u07e5\u07e7\7f\2\2\u07e6\u07e5\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7"+
		"\u07e8\3\2\2\2\u07e8\u07e9\7\u01bd\2\2\u07e9\u07ea\7\u046d\2\2\u07ea\u07eb"+
		"\5\u02a2\u0152\2\u07eb\u07ec\7\u046e\2\2\u07ec\u0814\3\2\2\2\u07ed\u07ef"+
		"\7f\2\2\u07ee\u07ed\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0"+
		"\u07f4\7]\2\2\u07f1\u07f2\7\u0152\2\2\u07f2\u07f3\7\u0464\2\2\u07f3\u07f5"+
		"\t\"\2\2\u07f4\u07f1\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f6\3\2\2\2\u07f6"+
		"\u07f8\7\u046d\2\2\u07f7\u07f9\5\u025a\u012e\2\u07f8\u07f7\3\2\2\2\u07f8"+
		"\u07f9\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u0814\7\u046e\2\2\u07fb\u0805"+
		"\7\u0087\2\2\u07fc\u07fd\7\u046d\2\2\u07fd\u07fe\5\u02a2\u0152\2\u07fe"+
		"\u07ff\7\u046e\2\2\u07ff\u0806\3\2\2\2\u0800\u0801\7\u016f\2\2\u0801\u0802"+
		"\7\u046d\2\2\u0802\u0803\5\u025a\u012e\2\u0803\u0804\7\u046e\2\2\u0804"+
		"\u0806\3\2\2\2\u0805\u07fc\3\2\2\2\u0805\u0800\3\2\2\2\u0806\u0814\3\2"+
		"\2\2\u0807\u0811\7\u01db\2\2\u0808\u0809\7\u046d\2\2\u0809\u080a\5\u02a2"+
		"\u0152\2\u080a\u080b\7\u046e\2\2\u080b\u0812\3\2\2\2\u080c\u080d\7\u016f"+
		"\2\2\u080d\u080e\7\u046d\2\2\u080e\u080f\5\u025a\u012e\2\u080f\u0810\7"+
		"\u046e\2\2\u0810\u0812\3\2\2\2\u0811\u0808\3\2\2\2\u0811\u080c\3\2\2\2"+
		"\u0812\u0814\3\2\2\2\u0813\u07e6\3\2\2\2\u0813\u07ee\3\2\2\2\u0813\u07fb"+
		"\3\2\2\2\u0813\u0807\3\2\2\2\u0814s\3\2\2\2\u0815\u0817\7f\2\2\u0816\u0815"+
		"\3\2\2\2\u0816\u0817\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u0819\7\u01bd\2"+
		"\2\u0819\u081a\7\u046d\2\2\u081a\u081b\5\u02a2\u0152\2\u081b\u081c\7\u046e"+
		"\2\2\u081c\u082b\3\2\2\2\u081d\u081f\7f\2\2\u081e\u081d\3\2\2\2\u081e"+
		"\u081f\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0824\7]\2\2\u0821\u0822\7\u0152"+
		"\2\2\u0822\u0823\7\u0464\2\2\u0823\u0825\t\"\2\2\u0824\u0821\3\2\2\2\u0824"+
		"\u0825\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u0827\7\u046d\2\2\u0827\u0828"+
		"\5\u025a\u012e\2\u0828\u0829\7\u046e\2\2\u0829\u082b\3\2\2\2\u082a\u0816"+
		"\3\2\2\2\u082a\u081e\3\2\2\2\u082bu\3\2\2\2\u082c\u082d\7\u0083\2\2\u082d"+
		"\u082e\5\u023a\u011e\2\u082e\u082f\7\u00be\2\2\u082f\u0830\7\u01d9\2\2"+
		"\u0830\u0831\7\u028d\2\2\u0831\u0832\7\u046d\2\2\u0832\u0837\5x=\2\u0833"+
		"\u0834\7\u046f\2\2\u0834\u0836\5x=\2\u0835\u0833\3\2\2\2\u0836\u0839\3"+
		"\2\2\2\u0837\u0835\3\2\2\2\u0837\u0838\3\2\2\2\u0838\u083a\3\2\2\2\u0839"+
		"\u0837\3\2\2\2\u083a\u083e\7\u046e\2\2\u083b\u083d\5~@\2\u083c\u083b\3"+
		"\2\2\2\u083d\u0840\3\2\2\2\u083e\u083c\3\2\2\2\u083e\u083f\3\2\2\2\u083f"+
		"\u084c\3\2\2\2\u0840\u083e\3\2\2\2\u0841\u0842\7\u046d\2\2\u0842\u0847"+
		"\5|?\2\u0843\u0844\7\u046f\2\2\u0844\u0846\5|?\2\u0845\u0843\3\2\2\2\u0846"+
		"\u0849\3\2\2\2\u0847\u0845\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u084a\3\2"+
		"\2\2\u0849\u0847\3\2\2\2\u084a\u084b\7\u046e\2\2\u084b\u084d\3\2\2\2\u084c"+
		"\u0841\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u08bf\3\2\2\2\u084e\u084f\7\u0083"+
		"\2\2\u084f\u0850\5\u023a\u011e\2\u0850\u0851\7\u00be\2\2\u0851\u0852\7"+
		"\u01d9\2\2\u0852\u0853\7\u028d\2\2\u0853\u0857\5x=\2\u0854\u0856\5~@\2"+
		"\u0855\u0854\3\2\2\2\u0856\u0859\3\2\2\2\u0857\u0855\3\2\2\2\u0857\u0858"+
		"\3\2\2\2\u0858\u0865\3\2\2\2\u0859\u0857\3\2\2\2\u085a\u085b\7\u046d\2"+
		"\2\u085b\u0860\5|?\2\u085c\u085d\7\u046f\2\2\u085d\u085f\5|?\2\u085e\u085c"+
		"\3\2\2\2\u085f\u0862\3\2\2\2\u0860\u085e\3\2\2\2\u0860\u0861\3\2\2\2\u0861"+
		"\u0863\3\2\2\2\u0862\u0860\3\2\2\2\u0863\u0864\7\u046e\2\2\u0864\u0866"+
		"\3\2\2\2\u0865\u085a\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u08bf\3\2\2\2\u0867"+
		"\u0868\7\u0083\2\2\u0868\u0869\5\u023a\u011e\2\u0869\u086a\7\u00be\2\2"+
		"\u086a\u086b\7R\2\2\u086b\u086c\7\u046d\2\2\u086c\u0871\5x=\2\u086d\u086e"+
		"\7\u046f\2\2\u086e\u0870\5x=\2\u086f\u086d\3\2\2\2\u0870\u0873\3\2\2\2"+
		"\u0871\u086f\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0874\3\2\2\2\u0873\u0871"+
		"\3\2\2\2\u0874\u0878\7\u046e\2\2\u0875\u0877\5~@\2\u0876\u0875\3\2\2\2"+
		"\u0877\u087a\3\2\2\2\u0878\u0876\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u0886"+
		"\3\2\2\2\u087a\u0878\3\2\2\2\u087b\u087c\7\u046d\2\2\u087c\u0881\5|?\2"+
		"\u087d\u087e\7\u046f\2\2\u087e\u0880\5|?\2\u087f\u087d\3\2\2\2\u0880\u0883"+
		"\3\2\2\2\u0881\u087f\3\2\2\2\u0881\u0882\3\2\2\2\u0882\u0884\3\2\2\2\u0883"+
		"\u0881\3\2\2\2\u0884\u0885\7\u046e\2\2\u0885\u0887\3\2\2\2\u0886\u087b"+
		"\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u08bf\3\2\2\2\u0888\u0889\7\u0083\2"+
		"\2\u0889\u088a\5\u023a\u011e\2\u088a\u088b\7\u00be\2\2\u088b\u088c\7R"+
		"\2\2\u088c\u088d\7\u046d\2\2\u088d\u0892\5z>\2\u088e\u088f\7\u046f\2\2"+
		"\u088f\u0891\5z>\2\u0890\u088e\3\2\2\2\u0891\u0894\3\2\2\2\u0892\u0890"+
		"\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0895\3\2\2\2\u0894\u0892\3\2\2\2\u0895"+
		"\u0899\7\u046e\2\2\u0896\u0898\5~@\2\u0897\u0896\3\2\2\2\u0898\u089b\3"+
		"\2\2\2\u0899\u0897\3\2\2\2\u0899\u089a\3\2\2\2\u089a\u08a7\3\2\2\2\u089b"+
		"\u0899\3\2\2\2\u089c\u089d\7\u046d\2\2\u089d\u08a2\5|?\2\u089e\u089f\7"+
		"\u046f\2\2\u089f\u08a1\5|?\2\u08a0\u089e\3\2\2\2\u08a1\u08a4\3\2\2\2\u08a2"+
		"\u08a0\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3\u08a5\3\2\2\2\u08a4\u08a2\3\2"+
		"\2\2\u08a5\u08a6\7\u046e\2\2\u08a6\u08a8\3\2\2\2\u08a7\u089c\3\2\2\2\u08a7"+
		"\u08a8\3\2\2\2\u08a8\u08bf\3\2\2\2\u08a9\u08aa\7\u0083\2\2\u08aa\u08ae"+
		"\5\u023a\u011e\2\u08ab\u08ad\5~@\2\u08ac\u08ab\3\2\2\2\u08ad\u08b0\3\2"+
		"\2\2\u08ae\u08ac\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08bc\3\2\2\2\u08b0"+
		"\u08ae\3\2\2\2\u08b1\u08b2\7\u046d\2\2\u08b2\u08b7\5|?\2\u08b3\u08b4\7"+
		"\u046f\2\2\u08b4\u08b6\5|?\2\u08b5\u08b3\3\2\2\2\u08b6\u08b9\3\2\2\2\u08b7"+
		"\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u08ba\3\2\2\2\u08b9\u08b7\3\2"+
		"\2\2\u08ba\u08bb\7\u046e\2\2\u08bb\u08bd\3\2\2\2\u08bc\u08b1\3\2\2\2\u08bc"+
		"\u08bd\3\2\2\2\u08bd\u08bf\3\2\2\2\u08be\u082c\3\2\2\2\u08be\u084e\3\2"+
		"\2\2\u08be\u0867\3\2\2\2\u08be\u0888\3\2\2\2\u08be\u08a9\3\2\2\2\u08bf"+
		"w\3\2\2\2\u08c0\u08c4\5\u024c\u0127\2\u08c1\u08c4\5\u02a2\u0152\2\u08c2"+
		"\u08c4\7p\2\2\u08c3\u08c0\3\2\2\2\u08c3\u08c1\3\2\2\2\u08c3\u08c2\3\2"+
		"\2\2\u08c4y\3\2\2\2\u08c5\u08c6\7\u046d\2\2\u08c6\u08c9\5x=\2\u08c7\u08c8"+
		"\7\u046f\2\2\u08c8\u08ca\5x=\2\u08c9\u08c7\3\2\2\2\u08ca\u08cb\3\2\2\2"+
		"\u08cb\u08c9\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08ce"+
		"\7\u046e\2\2\u08ce{\3\2\2\2\u08cf\u08d0\7\u0283\2\2\u08d0\u08d4\5\u023a"+
		"\u011e\2\u08d1\u08d3\5~@\2\u08d2\u08d1\3\2\2\2\u08d3\u08d6\3\2\2\2\u08d4"+
		"\u08d2\3\2\2\2\u08d4\u08d5\3\2\2\2\u08d5}\3\2\2\2\u08d6\u08d4\3\2\2\2"+
		"\u08d7\u08d9\7,\2\2\u08d8\u08d7\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u08db"+
		"\3\2\2\2\u08da\u08dc\7\u027e\2\2\u08db\u08da\3\2\2\2\u08db\u08dc\3\2\2"+
		"\2\u08dc\u08dd\3\2\2\2\u08dd\u08df\7\u019b\2\2\u08de\u08e0\7\u0464\2\2"+
		"\u08df\u08de\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u0908"+
		"\5\u0230\u0119\2\u08e2\u08e4\7\u0172\2\2\u08e3\u08e5\7\u0464\2\2\u08e4"+
		"\u08e3\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u0908\7\u047c"+
		"\2\2\u08e7\u08e8\7\u0186\2\2\u08e8\u08ea\7\u018d\2\2\u08e9\u08eb\7\u0464"+
		"\2\2\u08ea\u08e9\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec"+
		"\u0908\7\u047c\2\2\u08ed\u08ee\7S\2\2\u08ee\u08f0\7\u018d\2\2\u08ef\u08f1"+
		"\7\u0464\2\2\u08f0\u08ef\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08f2\3\2\2"+
		"\2\u08f2\u0908\7\u047c\2\2\u08f3\u08f5\7\u01f6\2\2\u08f4\u08f6\7\u0464"+
		"\2\2\u08f5\u08f4\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7"+
		"\u0908\5\u0240\u0121\2\u08f8\u08fa\7\u0200\2\2\u08f9\u08fb\7\u0464\2\2"+
		"\u08fa\u08f9\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u0908"+
		"\5\u0240\u0121\2\u08fd\u08ff\7\u0289\2\2\u08fe\u0900\7\u0464\2\2\u08ff"+
		"\u08fe\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0901\3\2\2\2\u0901\u0908\5\u023a"+
		"\u011e\2\u0902\u0904\7\u0212\2\2\u0903\u0905\7\u0464\2\2\u0904\u0903\3"+
		"\2\2\2\u0904\u0905\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0908\5\u023a\u011e"+
		"\2\u0907\u08d8\3\2\2\2\u0907\u08e2\3\2\2\2\u0907\u08e7\3\2\2\2\u0907\u08ed"+
		"\3\2\2\2\u0907\u08f3\3\2\2\2\u0907\u08f8\3\2\2\2\u0907\u08fd\3\2\2\2\u0907"+
		"\u0902\3\2\2\2\u0908\177\3\2\2\2\u0909\u090a\7\t\2\2\u090a\u090c\t\2\2"+
		"\2\u090b\u090d\5\u023a\u011e\2\u090c\u090b\3\2\2\2\u090c\u090d\3\2\2\2"+
		"\u090d\u090f\3\2\2\2\u090e\u0910\5<\37\2\u090f\u090e\3\2\2\2\u0910\u0911"+
		"\3\2\2\2\u0911\u090f\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u091c\3\2\2\2\u0913"+
		"\u0914\7\t\2\2\u0914\u0915\t\2\2\2\u0915\u0916\5\u023a\u011e\2\u0916\u0917"+
		"\7\u029a\2\2\u0917\u0918\7\u0186\2\2\u0918\u0919\7\u018d\2\2\u0919\u091a"+
		"\7\u0206\2\2\u091a\u091c\3\2\2\2\u091b\u0909\3\2\2\2\u091b\u0913\3\2\2"+
		"\2\u091c\u0081\3\2\2\2\u091d\u091f\7\t\2\2\u091e\u0920\5@!\2\u091f\u091e"+
		"\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0922\7\u01a1\2"+
		"\2\u0922\u0926\5\u021e\u0110\2\u0923\u0924\7x\2\2\u0924\u0925\7\u025f"+
		"\2\2\u0925\u0927\5B\"\2\u0926\u0923\3\2\2\2\u0926\u0927\3\2\2\2\u0927"+
		"\u092e\3\2\2\2\u0928\u0929\7x\2\2\u0929\u092b\7\u0175\2\2\u092a\u092c"+
		"\7t\2\2\u092b\u092a\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u092d\3\2\2\2\u092d"+
		"\u092f\7\u0233\2\2\u092e\u0928\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0933"+
		"\3\2\2\2\u0930\u0931\7\u008d\2\2\u0931\u0932\7\u00b1\2\2\u0932\u0934\5"+
		"\u021e\u0110\2\u0933\u0930\3\2\2\2\u0933\u0934\3\2\2\2\u0934\u0936\3\2"+
		"\2\2\u0935\u0937\5J&\2\u0936\u0935\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u093a"+
		"\3\2\2\2\u0938\u0939\7\u0172\2\2\u0939\u093b\7\u047c\2\2\u093a\u0938\3"+
		"\2\2\2\u093a\u093b\3\2\2\2\u093b\u093e\3\2\2\2\u093c\u093d\7\u0191\2\2"+
		"\u093d\u093f\5\u0180\u00c1\2\u093e\u093c\3\2\2\2\u093e\u093f\3\2\2\2\u093f"+
		"\u0083\3\2\2\2\u0940\u0941\7\t\2\2\u0941\u0942\7\u01b7\2\2\u0942\u0946"+
		"\5\u021e\u0110\2\u0943\u0945\5T+\2\u0944\u0943\3\2\2\2\u0945\u0948\3\2"+
		"\2\2\u0946\u0944\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0085\3\2\2\2\u0948"+
		"\u0946\3\2\2\2\u0949\u094a\7\t\2\2\u094a\u094b\7\u01cb\2\2\u094b\u094c"+
		"\7\u0259\2\2\u094c\u094d\7\u0318\2\2\u094d\u094e\7\u01df\2\2\u094e\u094f"+
		"\7]\2\2\u094f\u0087\3\2\2\2\u0950\u0951\7\t\2\2\u0951\u0952\7\u01dd\2"+
		"\2\u0952\u0953\7K\2\2\u0953\u0954\5\u023a\u011e\2\u0954\u0955\7\7\2\2"+
		"\u0955\u0956\7\u0295\2\2\u0956\u095c\7\u047c\2\2\u0957\u0959\7\u01c7\2"+
		"\2\u0958\u095a\7\u0464\2\2\u0959\u0958\3\2\2\2\u0959\u095a\3\2\2\2\u095a"+
		"\u095b\3\2\2\2\u095b\u095d\5\u0242\u0122\2\u095c\u0957\3\2\2\2\u095c\u095d"+
		"\3\2\2\2\u095d\u095f\3\2\2\2\u095e\u0960\7\u02a4\2\2\u095f\u095e\3\2\2"+
		"\2\u095f\u0960\3\2\2\2\u0960\u0961\3\2\2\2\u0961\u0963\7\u019b\2\2\u0962"+
		"\u0964\7\u0464\2\2\u0963\u0962\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u0965"+
		"\3\2\2\2\u0965\u0966\5\u0230\u0119\2\u0966\u0089\3\2\2\2\u0967\u0968\7"+
		"\t\2\2\u0968\u0969\7\u0085\2\2\u0969\u096d\5\u021e\u0110\2\u096a\u096c"+
		"\5T+\2\u096b\u096a\3\2\2\2\u096c\u096f\3\2\2\2\u096d\u096b\3\2\2\2\u096d"+
		"\u096e\3\2\2\2\u096e\u008b\3\2\2\2\u096f\u096d\3\2\2\2\u0970\u0971\7\t"+
		"\2\2\u0971\u0972\7\u0262\2\2\u0972\u0973\5\u023a\u011e\2\u0973\u0974\7"+
		"\u021f\2\2\u0974\u0975\7\u046d\2\2\u0975\u097a\5V,\2\u0976\u0977\7\u046f"+
		"\2\2\u0977\u0979\5V,\2\u0978\u0976\3\2\2\2\u0979\u097c\3\2\2\2\u097a\u0978"+
		"\3\2\2\2\u097a\u097b\3\2\2\2\u097b\u097d\3\2\2\2\u097c\u097a\3\2\2\2\u097d"+
		"\u097e\7\u046e\2\2\u097e\u008d\3\2\2\2\u097f\u0981\7\t\2\2\u0980\u0982"+
		"\t\3\2\2\u0981\u0980\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0984\3\2\2\2\u0983"+
		"\u0985\7P\2\2\u0984\u0983\3\2\2\2\u0984\u0985\3\2\2\2\u0985\u0986\3\2"+
		"\2\2\u0986\u0987\7\u00ae\2\2\u0987\u0989\5\u0220\u0111\2\u0988\u098a\5"+
		"\u0278\u013d\2\u0989\u0988\3\2\2\2\u0989\u098a\3\2\2\2\u098a\u0993\3\2"+
		"\2\2\u098b\u0990\5\u0094K\2\u098c\u098d\7\u046f\2\2\u098d\u098f\5\u0094"+
		"K\2\u098e\u098c\3\2\2\2\u098f\u0992\3\2\2\2\u0990\u098e\3\2\2\2\u0990"+
		"\u0991\3\2\2\2\u0991\u0994\3\2\2\2\u0992\u0990\3\2\2\2\u0993\u098b\3\2"+
		"\2\2\u0993\u0994\3\2\2\2\u0994\u0996\3\2\2\2\u0995\u0997\5p9\2\u0996\u0995"+
		"\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u008f\3\2\2\2\u0998\u0999\7\t\2\2\u0999"+
		"\u099a\7\u0289\2\2\u099a\u099b\5\u023a\u011e\2\u099b\u099c\t#\2\2\u099c"+
		"\u099d\7\u0187\2\2\u099d\u09a1\7\u047c\2\2\u099e\u099f\7\u01c7\2\2\u099f"+
		"\u09a0\7\u0464\2\2\u09a0\u09a2\5\u0242\u0122\2\u09a1\u099e\3\2\2\2\u09a1"+
		"\u09a2\3\2\2\2\u09a2\u09a4\3\2\2\2\u09a3\u09a5\7\u02a4\2\2\u09a4\u09a3"+
		"\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a8\7\u019b\2"+
		"\2\u09a7\u09a9\7\u0464\2\2\u09a8\u09a7\3\2\2\2\u09a8\u09a9\3\2\2\2\u09a9"+
		"\u09aa\3\2\2\2\u09aa\u09ab\5\u0230\u0119\2\u09ab\u0091\3\2\2\2\u09ac\u09b0"+
		"\7\t\2\2\u09ad\u09ae\7\u0152\2\2\u09ae\u09af\7\u0464\2\2\u09af\u09b1\t"+
		"\f\2\2\u09b0\u09ad\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b3\3\2\2\2\u09b2"+
		"\u09b4\5@!\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u09b8\3\2\2"+
		"\2\u09b5\u09b6\7\u00a2\2\2\u09b6\u09b7\7\u0260\2\2\u09b7\u09b9\t\r\2\2"+
		"\u09b8\u09b5\3\2\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bb"+
		"\7\u02a1\2\2\u09bb\u09c0\5\u021e\u0110\2\u09bc\u09bd\7\u046d\2\2\u09bd"+
		"\u09be\5\u025a\u012e\2\u09be\u09bf\7\u046e\2\2\u09bf\u09c1\3\2\2\2\u09c0"+
		"\u09bc\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\7\16"+
		"\2\2\u09c3\u09ca\5\u00c6d\2\u09c4\u09c6\7\u00c2\2\2\u09c5\u09c7\t\16\2"+
		"\2\u09c6\u09c5\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8\u09c9"+
		"\7\34\2\2\u09c9\u09cb\7z\2\2\u09ca\u09c4\3\2\2\2\u09ca\u09cb\3\2\2\2\u09cb"+
		"\u0093\3\2\2\2\u09cc\u09d3\5j\66\2\u09cd\u09cf\7\u046f\2\2\u09ce\u09cd"+
		"\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u09d2\5j\66\2\u09d1"+
		"\u09ce\3\2\2\2\u09d2\u09d5\3\2\2\2\u09d3\u09d1\3\2\2\2\u09d3\u09d4\3\2"+
		"\2\2\u09d4\u0b8d\3\2\2\2\u09d5\u09d3\3\2\2\2\u09d6\u09d8\7\7\2\2\u09d7"+
		"\u09d9\7\36\2\2\u09d8\u09d7\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09da\3"+
		"\2\2\2\u09da\u09db\5\u023a\u011e\2\u09db\u09df\5\\/\2\u09dc\u09e0\7\u01b0"+
		"\2\2\u09dd\u09de\7\u0150\2\2\u09de\u09e0\5\u023a\u011e\2\u09df\u09dc\3"+
		"\2\2\2\u09df\u09dd\3\2\2\2\u09df\u09e0\3\2\2\2\u09e0\u0b8d\3\2\2\2\u09e1"+
		"\u09e3\7\7\2\2\u09e2\u09e4\7\36\2\2\u09e3\u09e2\3\2\2\2\u09e3\u09e4\3"+
		"\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e6\7\u046d\2\2\u09e6\u09e7\5\u023a"+
		"\u011e\2\u09e7\u09ee\5\\/\2\u09e8\u09e9\7\u046f\2\2\u09e9\u09ea\5\u023a"+
		"\u011e\2\u09ea\u09eb\5\\/\2\u09eb\u09ed\3\2\2\2\u09ec\u09e8\3\2\2\2\u09ed"+
		"\u09f0\3\2\2\2\u09ee\u09ec\3\2\2\2\u09ee\u09ef\3\2\2\2\u09ef\u09f1\3\2"+
		"\2\2\u09f0\u09ee\3\2\2\2\u09f1\u09f2\7\u046e\2\2\u09f2\u0b8d\3\2\2\2\u09f3"+
		"\u09f4\7\7\2\2\u09f4\u09f6\t\26\2\2\u09f5\u09f7\5\u023a\u011e\2\u09f6"+
		"\u09f5\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09f9\3\2\2\2\u09f8\u09fa\5L"+
		"\'\2\u09f9\u09f8\3\2\2\2\u09f9\u09fa\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb"+
		"\u09ff\5\u0260\u0131\2\u09fc\u09fe\5N(\2\u09fd\u09fc\3\2\2\2\u09fe\u0a01"+
		"\3\2\2\2\u09ff\u09fd\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0b8d\3\2\2\2\u0a01"+
		"\u09ff\3\2\2\2\u0a02\u0a07\7\7\2\2\u0a03\u0a05\7 \2\2\u0a04\u0a06\5\u023a"+
		"\u011e\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a08\3\2\2\2\u0a07"+
		"\u0a03\3\2\2\2\u0a07\u0a08\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0a0a\7\u0084"+
		"\2\2\u0a0a\u0a0c\7]\2\2\u0a0b\u0a0d\5\u023a\u011e\2\u0a0c\u0a0b\3\2\2"+
		"\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a0f\3\2\2\2\u0a0e\u0a10\5L\'\2\u0a0f\u0a0e"+
		"\3\2\2\2\u0a0f\u0a10\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a15\5\u0260\u0131"+
		"\2\u0a12\u0a14\5N(\2\u0a13\u0a12\3\2\2\2\u0a14\u0a17\3\2\2\2\u0a15\u0a13"+
		"\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0b8d\3\2\2\2\u0a17\u0a15\3\2\2\2\u0a18"+
		"\u0a1d\7\7\2\2\u0a19\u0a1b\7 \2\2\u0a1a\u0a1c\5\u023a\u011e\2\u0a1b\u0a1a"+
		"\3\2\2\2\u0a1b\u0a1c\3\2\2\2\u0a1c\u0a1e\3\2\2\2\u0a1d\u0a19\3\2\2\2\u0a1d"+
		"\u0a1e\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a21\7\u00b7\2\2\u0a20\u0a22"+
		"\t\26\2\2\u0a21\u0a20\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22\u0a24\3\2\2\2"+
		"\u0a23\u0a25\5\u023a\u011e\2\u0a24\u0a23\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25"+
		"\u0a27\3\2\2\2\u0a26\u0a28\5L\'\2\u0a27\u0a26\3\2\2\2\u0a27\u0a28\3\2"+
		"\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2d\5\u0260\u0131\2\u0a2a\u0a2c\5N(\2"+
		"\u0a2b\u0a2a\3\2\2\2\u0a2c\u0a2f\3\2\2\2\u0a2d\u0a2b\3\2\2\2\u0a2d\u0a2e"+
		"\3\2\2\2\u0a2e\u0b8d\3\2\2\2\u0a2f\u0a2d\3\2\2\2\u0a30\u0a31\7\7\2\2\u0a31"+
		"\u0a33\t\30\2\2\u0a32\u0a34\t\26\2\2\u0a33\u0a32\3\2\2\2\u0a33\u0a34\3"+
		"\2\2\2\u0a34\u0a36\3\2\2\2\u0a35\u0a37\5\u023a\u011e\2\u0a36\u0a35\3\2"+
		"\2\2\u0a36\u0a37\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0a3c\5\u0260\u0131"+
		"\2\u0a39\u0a3b\5N(\2\u0a3a\u0a39\3\2\2\2\u0a3b\u0a3e\3\2\2\2\u0a3c\u0a3a"+
		"\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u0b8d\3\2\2\2\u0a3e\u0a3c\3\2\2\2\u0a3f"+
		"\u0a44\7\7\2\2\u0a40\u0a42\7 \2\2\u0a41\u0a43\5\u023a\u011e\2\u0a42\u0a41"+
		"\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0a45\3\2\2\2\u0a44\u0a40\3\2\2\2\u0a44"+
		"\u0a45\3\2\2\2\u0a45\u0a46\3\2\2\2\u0a46\u0a47\7E\2\2\u0a47\u0a49\7]\2"+
		"\2\u0a48\u0a4a\5\u023a\u011e\2\u0a49\u0a48\3\2\2\2\u0a49\u0a4a\3\2\2\2"+
		"\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a4c\5\u0260\u0131\2\u0a4c\u0a4d\5b\62\2\u0a4d"+
		"\u0b8d\3\2\2\2\u0a4e\u0a53\7\7\2\2\u0a4f\u0a51\7 \2\2\u0a50\u0a52\5\u023a"+
		"\u011e\2\u0a51\u0a50\3\2\2\2\u0a51\u0a52\3\2\2\2\u0a52\u0a54\3\2\2\2\u0a53"+
		"\u0a4f\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55\u0a5c\7\34"+
		"\2\2\u0a56\u0a5d\5\u023a\u011e\2\u0a57\u0a5d\5\u0244\u0123\2\u0a58\u0a59"+
		"\7\u046d\2\2\u0a59\u0a5a\5\u02a2\u0152\2\u0a5a\u0a5b\7\u046e\2\2\u0a5b"+
		"\u0a5d\3\2\2\2\u0a5c\u0a56\3\2\2\2\u0a5c\u0a57\3\2\2\2\u0a5c\u0a58\3\2"+
		"\2\2\u0a5d\u0a5f\3\2\2\2\u0a5e\u0a60\7t\2\2\u0a5f\u0a5e\3\2\2\2\u0a5f"+
		"\u0a60\3\2\2\2\u0a60\u0a62\3\2\2\2\u0a61\u0a63\7;\2\2\u0a62\u0a61\3\2"+
		"\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0b8d\3\2\2\2\u0a64\u0a69\7\t\2\2\u0a65"+
		"\u0a67\7 \2\2\u0a66\u0a68\5\u023a\u011e\2\u0a67\u0a66\3\2\2\2\u0a67\u0a68"+
		"\3\2\2\2\u0a68\u0a6a\3\2\2\2\u0a69\u0a65\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a"+
		"\u0a6b\3\2\2\2\u0a6b\u0a72\7\34\2\2\u0a6c\u0a73\5\u023a\u011e\2\u0a6d"+
		"\u0a73\5\u0244\u0123\2\u0a6e\u0a6f\7\u046d\2\2\u0a6f\u0a70\5\u02a2\u0152"+
		"\2\u0a70\u0a71\7\u046e\2\2\u0a71\u0a73\3\2\2\2\u0a72\u0a6c\3\2\2\2\u0a72"+
		"\u0a6d\3\2\2\2\u0a72\u0a6e\3\2\2\2\u0a73\u0a75\3\2\2\2\u0a74\u0a76\7t"+
		"\2\2\u0a75\u0a74\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a78\3\2\2\2\u0a77"+
		"\u0a79\7;\2\2\u0a78\u0a77\3\2\2\2\u0a78\u0a79\3\2\2\2\u0a79\u0b8d\3\2"+
		"\2\2\u0a7a\u0a7f\7\7\2\2\u0a7b\u0a7d\7 \2\2\u0a7c\u0a7e\5\u023a\u011e"+
		"\2\u0a7d\u0a7c\3\2\2\2\u0a7d\u0a7e\3\2\2\2\u0a7e\u0a80\3\2\2\2\u0a7f\u0a7b"+
		"\3\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81\u0a82\7\34\2\2"+
		"\u0a82\u0a83\7\u046d\2\2\u0a83\u0a84\5\u02a2\u0152\2\u0a84\u0a85\7\u046e"+
		"\2\2\u0a85\u0b8d\3\2\2\2\u0a86\u0a88\7\u0152\2\2\u0a87\u0a89\7\u0464\2"+
		"\2\u0a88\u0a87\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0b8d"+
		"\t$\2\2\u0a8b\u0a8d\7\t\2\2\u0a8c\u0a8e\7\36\2\2\u0a8d\u0a8c\3\2\2\2\u0a8d"+
		"\u0a8e\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a95\5\u023a\u011e\2\u0a90\u0a91"+
		"\7\u009b\2\2\u0a91\u0a92\7,\2\2\u0a92\u0a96\5\u026c\u0137\2\u0a93\u0a94"+
		"\7\65\2\2\u0a94\u0a96\7,\2\2\u0a95\u0a90\3\2\2\2\u0a95\u0a93\3\2\2\2\u0a96"+
		"\u0b8d\3\2\2\2\u0a97\u0a99\7\32\2\2\u0a98\u0a9a\7\36\2\2\u0a99\u0a98\3"+
		"\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u0a9c\5\u023a\u011e"+
		"\2\u0a9c\u0a9d\5\u023a\u011e\2\u0a9d\u0aa1\5\\/\2\u0a9e\u0aa2\7\u01b0"+
		"\2\2\u0a9f\u0aa0\7\u0150\2\2\u0aa0\u0aa2\5\u023a\u011e\2\u0aa1\u0a9e\3"+
		"\2\2\2\u0aa1\u0a9f\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0b8d\3\2\2\2\u0aa3"+
		"\u0aa4\7\u008d\2\2\u0aa4\u0aa5\7\36\2\2\u0aa5\u0aa6\5\u023a\u011e\2\u0aa6"+
		"\u0aa7\7\u00b1\2\2\u0aa7\u0aa8\5\u023a\u011e\2\u0aa8\u0b8d\3\2\2\2\u0aa9"+
		"\u0aab\7i\2\2\u0aaa\u0aac\7\u0464\2\2\u0aab\u0aaa\3\2\2\2\u0aab\u0aac"+
		"\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad\u0b8d\t\6\2\2\u0aae\u0ab0\7\u0202\2"+
		"\2\u0aaf\u0ab1\7\36\2\2\u0ab0\u0aaf\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1"+
		"\u0ab2\3\2\2\2\u0ab2\u0ab3\5\u023a\u011e\2\u0ab3\u0ab7\5\\/\2\u0ab4\u0ab8"+
		"\7\u01b0\2\2\u0ab5\u0ab6\7\u0150\2\2\u0ab6\u0ab8\5\u023a\u011e\2\u0ab7"+
		"\u0ab4\3\2\2\2\u0ab7\u0ab5\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0b8d\3\2"+
		"\2\2\u0ab9\u0abb\7\65\2\2\u0aba\u0abc\7\36\2\2\u0abb\u0aba\3\2\2\2\u0abb"+
		"\u0abc\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abf\5\u023a\u011e\2\u0abe\u0ac0"+
		"\7\u0092\2\2\u0abf\u0abe\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0\u0b8d\3\2\2"+
		"\2\u0ac1\u0ac2\7\65\2\2\u0ac2\u0ac3\t%\2\2\u0ac3\u0b8d\5\u023a\u011e\2"+
		"\u0ac4\u0ac5\7\65\2\2\u0ac5\u0ac6\7\u0084\2\2\u0ac6\u0b8d\7]\2\2\u0ac7"+
		"\u0ac8\7\65\2\2\u0ac8\u0ac9\t\26\2\2\u0ac9\u0b8d\5\u023a\u011e\2\u0aca"+
		"\u0acb\7\u008d\2\2\u0acb\u0acc\t\26\2\2\u0acc\u0acd\5\u023a\u011e\2\u0acd"+
		"\u0ace\7\u00b1\2\2\u0ace\u0acf\5\u023a\u011e\2\u0acf\u0b8d\3\2\2\2\u0ad0"+
		"\u0ad2\7\t\2\2\u0ad1\u0ad3\7\36\2\2\u0ad2\u0ad1\3\2\2\2\u0ad2\u0ad3\3"+
		"\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4\u0ae2\5\u023a\u011e\2\u0ad5\u0ad6\7\u009b"+
		"\2\2\u0ad6\u0adc\7,\2\2\u0ad7\u0add\5\u0244\u0123\2\u0ad8\u0ad9\7\u046d"+
		"\2\2\u0ad9\u0ada\5\u02a2\u0152\2\u0ada\u0adb\7\u046e\2\2\u0adb\u0add\3"+
		"\2\2\2\u0adc\u0ad7\3\2\2\2\u0adc\u0ad8\3\2\2\2\u0add\u0ae3\3\2\2\2\u0ade"+
		"\u0adf\7\u009b\2\2\u0adf\u0ae3\t\21\2\2\u0ae0\u0ae1\7\65\2\2\u0ae1\u0ae3"+
		"\7,\2\2\u0ae2\u0ad5\3\2\2\2\u0ae2\u0ade\3\2\2\2\u0ae2\u0ae0\3\2\2\2\u0ae3"+
		"\u0b8d\3\2\2\2\u0ae4\u0ae5\7\t\2\2\u0ae5\u0ae6\7S\2\2\u0ae6\u0ae7\5\u023a"+
		"\u011e\2\u0ae7\u0ae8\t\21\2\2\u0ae8\u0b8d\3\2\2\2\u0ae9\u0aea\7\65\2\2"+
		"\u0aea\u0aeb\7E\2\2\u0aeb\u0aec\7]\2\2\u0aec\u0b8d\5\u023a\u011e\2\u0aed"+
		"\u0aee\7\u018e\2\2\u0aee\u0b8d\7^\2\2\u0aef\u0af0\7\u0195\2\2\u0af0\u0b8d"+
		"\7^\2\2\u0af1\u0af3\7\u008d\2\2\u0af2\u0af4\t&\2\2\u0af3\u0af2\3\2\2\2"+
		"\u0af3\u0af4\3\2\2\2\u0af4\u0af7\3\2\2\2\u0af5\u0af8\5\u023a\u011e\2\u0af6"+
		"\u0af8\5\u021e\u0110\2\u0af7\u0af5\3\2\2\2\u0af7\u0af6\3\2\2\2\u0af8\u0b8d"+
		"\3\2\2\2\u0af9\u0afa\7~\2\2\u0afa\u0afb\7\25\2\2\u0afb\u0b8d\5\u025a\u012e"+
		"\2\u0afc\u0afd\7\"\2\2\u0afd\u0b01\7\u00b1\2\2\u0afe\u0b02\7\u034a\2\2"+
		"\u0aff\u0b00\7\33\2\2\u0b00\u0b02\7\u009b\2\2\u0b01\u0afe\3\2\2\2\u0b01"+
		"\u0aff\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b06\5\u022c\u0117\2\u0b04\u0b05"+
		"\7\35\2\2\u0b05\u0b07\5\u022e\u0118\2\u0b06\u0b04\3\2\2\2\u0b06\u0b07"+
		"\3\2\2\2\u0b07\u0b8d\3\2\2\2\u0b08\u0b0a\7,\2\2\u0b09\u0b08\3\2\2\2\u0b09"+
		"\u0b0a\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0c\7\33\2\2\u0b0c\u0b0d\7"+
		"\u009b\2\2\u0b0d\u0b0e\7\u0464\2\2\u0b0e\u0b12\5\u022c\u0117\2\u0b0f\u0b10"+
		"\7\35\2\2\u0b10\u0b11\7\u0464\2\2\u0b11\u0b13\5\u022e\u0118\2\u0b12\u0b0f"+
		"\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b8d\3\2\2\2\u0b14\u0b15\7\u018f\2"+
		"\2\u0b15\u0b8d\7\u0289\2\2\u0b16\u0b17\7\u01c4\2\2\u0b17\u0b8d\7\u0289"+
		"\2\2\u0b18\u0b8d\7D\2\2\u0b19\u0b1a\t\'\2\2\u0b1a\u0b8d\7\u029e\2\2\u0b1b"+
		"\u0b1c\7\7\2\2\u0b1c\u0b1d\7\u0083\2\2\u0b1d\u0b1e\7\u046d\2\2\u0b1e\u0b23"+
		"\5v<\2\u0b1f\u0b20\7\u046f\2\2\u0b20\u0b22\5v<\2\u0b21\u0b1f\3\2\2\2\u0b22"+
		"\u0b25\3\2\2\2\u0b23\u0b21\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b26\3\2"+
		"\2\2\u0b25\u0b23\3\2\2\2\u0b26\u0b27\7\u046e\2\2\u0b27\u0b8d\3\2\2\2\u0b28"+
		"\u0b29\7\65\2\2\u0b29\u0b2a\7\u0083\2\2\u0b2a\u0b8d\5\u025a\u012e\2\u0b2b"+
		"\u0b2c\7\u018f\2\2\u0b2c\u0b2f\7\u0083\2\2\u0b2d\u0b30\5\u025a\u012e\2"+
		"\u0b2e\u0b30\7\b\2\2\u0b2f\u0b2d\3\2\2\2\u0b2f\u0b2e\3\2\2\2\u0b30\u0b31"+
		"\3\2\2\2\u0b31\u0b8d\7\u0289\2\2\u0b32\u0b33\7\u01c4\2\2\u0b33\u0b36\7"+
		"\u0083\2\2\u0b34\u0b37\5\u025a\u012e\2\u0b35\u0b37\7\b\2\2\u0b36\u0b34"+
		"\3\2\2\2\u0b36\u0b35\3\2\2\2\u0b37\u0b38\3\2\2\2\u0b38\u0b8d\7\u0289\2"+
		"\2\u0b39\u0b3a\7\u0292\2\2\u0b3a\u0b3d\7\u0083\2\2\u0b3b\u0b3e\5\u025a"+
		"\u012e\2\u0b3c\u0b3e\7\b\2\2\u0b3d\u0b3b\3\2\2\2\u0b3d\u0b3c\3\2\2\2\u0b3e"+
		"\u0b8d\3\2\2\2\u0b3f\u0b40\7\u016d\2\2\u0b40\u0b41\7\u0083\2\2\u0b41\u0b8d"+
		"\5\u0240\u0121\2\u0b42\u0b43\7\u0245\2\2\u0b43\u0b44\7\u0083\2\2\u0b44"+
		"\u0b45\5\u025a\u012e\2\u0b45\u0b46\7Y\2\2\u0b46\u0b47\7\u046d\2\2\u0b47"+
		"\u0b4c\5v<\2\u0b48\u0b49\7\u046f\2\2\u0b49\u0b4b\5v<\2\u0b4a\u0b48\3\2"+
		"\2\2\u0b4b\u0b4e\3\2\2\2\u0b4c\u0b4a\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d"+
		"\u0b4f\3\2\2\2\u0b4e\u0b4c\3\2\2\2\u0b4f\u0b50\7\u046e\2\2\u0b50\u0b8d"+
		"\3\2\2\2\u0b51\u0b52\7\u01a4\2\2\u0b52\u0b53\7\u0083\2\2\u0b53\u0b54\5"+
		"\u023a\u011e\2\u0b54\u0b55\7\u00c2\2\2\u0b55\u0b56\7\u00ae\2\2\u0b56\u0b59"+
		"\5\u0220\u0111\2\u0b57\u0b58\t\'\2\2\u0b58\u0b5a\7\u029e\2\2\u0b59\u0b57"+
		"\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a\u0b8d\3\2\2\2\u0b5b\u0b5c\7\13\2\2"+
		"\u0b5c\u0b5f\7\u0083\2\2\u0b5d\u0b60\5\u025a\u012e\2\u0b5e\u0b60\7\b\2"+
		"\2\u0b5f\u0b5d\3\2\2\2\u0b5f\u0b5e\3\2\2\2\u0b60\u0b8d\3\2\2\2\u0b61\u0b62"+
		"\7\34\2\2\u0b62\u0b65\7\u0083\2\2\u0b63\u0b66\5\u025a\u012e\2\u0b64\u0b66"+
		"\7\b\2\2\u0b65\u0b63\3\2\2\2\u0b65\u0b64\3\2\2\2\u0b66\u0b8d\3\2\2\2\u0b67"+
		"\u0b68\7y\2\2\u0b68\u0b6b\7\u0083\2\2\u0b69\u0b6c\5\u025a\u012e\2\u0b6a"+
		"\u0b6c\7\b\2\2\u0b6b\u0b69\3\2\2\2\u0b6b\u0b6a\3\2\2\2\u0b6c\u0b8d\3\2"+
		"\2\2\u0b6d\u0b6e\7\u023b\2\2\u0b6e\u0b71\7\u0083\2\2\u0b6f\u0b72\5\u025a"+
		"\u012e\2\u0b70\u0b72\7\b\2\2\u0b71\u0b6f\3\2\2\2\u0b71\u0b70\3\2\2\2\u0b72"+
		"\u0b8d\3\2\2\2\u0b73\u0b74\7\u0246\2\2\u0b74\u0b77\7\u0083\2\2\u0b75\u0b78"+
		"\5\u025a\u012e\2\u0b76\u0b78\7\b\2\2\u0b77\u0b75\3\2\2\2\u0b77\u0b76\3"+
		"\2\2\2\u0b78\u0b8d\3\2\2\2\u0b79\u0b7a\7\u0244\2\2\u0b7a\u0b8d\7\u0227"+
		"\2\2\u0b7b\u0b7c\7\u029a\2\2\u0b7c\u0b8d\7\u0227\2\2\u0b7d\u0b7f\7\7\2"+
		"\2\u0b7e\u0b80\7\36\2\2\u0b7f\u0b7e\3\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80"+
		"\u0b81\3\2\2\2\u0b81\u0b82\7\u046d\2\2\u0b82\u0b87\5Z.\2\u0b83\u0b84\7"+
		"\u046f\2\2\u0b84\u0b86\5Z.\2\u0b85\u0b83\3\2\2\2\u0b86\u0b89\3\2\2\2\u0b87"+
		"\u0b85\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88\u0b8a\3\2\2\2\u0b89\u0b87\3\2"+
		"\2\2\u0b8a\u0b8b\7\u046e\2\2\u0b8b\u0b8d\3\2\2\2\u0b8c\u09cc\3\2\2\2\u0b8c"+
		"\u09d6\3\2\2\2\u0b8c\u09e1\3\2\2\2\u0b8c\u09f3\3\2\2\2\u0b8c\u0a02\3\2"+
		"\2\2\u0b8c\u0a18\3\2\2\2\u0b8c\u0a30\3\2\2\2\u0b8c\u0a3f\3\2\2\2\u0b8c"+
		"\u0a4e\3\2\2\2\u0b8c\u0a64\3\2\2\2\u0b8c\u0a7a\3\2\2\2\u0b8c\u0a86\3\2"+
		"\2\2\u0b8c\u0a8b\3\2\2\2\u0b8c\u0a97\3\2\2\2\u0b8c\u0aa3\3\2\2\2\u0b8c"+
		"\u0aa9\3\2\2\2\u0b8c\u0aae\3\2\2\2\u0b8c\u0ab9\3\2\2\2\u0b8c\u0ac1\3\2"+
		"\2\2\u0b8c\u0ac4\3\2\2\2\u0b8c\u0ac7\3\2\2\2\u0b8c\u0aca\3\2\2\2\u0b8c"+
		"\u0ad0\3\2\2\2\u0b8c\u0ae4\3\2\2\2\u0b8c\u0ae9\3\2\2\2\u0b8c\u0aed\3\2"+
		"\2\2\u0b8c\u0aef\3\2\2\2\u0b8c\u0af1\3\2\2\2\u0b8c\u0af9\3\2\2\2\u0b8c"+
		"\u0afc\3\2\2\2\u0b8c\u0b09\3\2\2\2\u0b8c\u0b14\3\2\2\2\u0b8c\u0b16\3\2"+
		"\2\2\u0b8c\u0b18\3\2\2\2\u0b8c\u0b19\3\2\2\2\u0b8c\u0b1b\3\2\2\2\u0b8c"+
		"\u0b28\3\2\2\2\u0b8c\u0b2b\3\2\2\2\u0b8c\u0b32\3\2\2\2\u0b8c\u0b39\3\2"+
		"\2\2\u0b8c\u0b3f\3\2\2\2\u0b8c\u0b42\3\2\2\2\u0b8c\u0b51\3\2\2\2\u0b8c"+
		"\u0b5b\3\2\2\2\u0b8c\u0b61\3\2\2\2\u0b8c\u0b67\3\2\2\2\u0b8c\u0b6d\3\2"+
		"\2\2\u0b8c\u0b73\3\2\2\2\u0b8c\u0b79\3\2\2\2\u0b8c\u0b7b\3\2\2\2\u0b8c"+
		"\u0b7d\3\2\2\2\u0b8d\u0095\3\2\2\2\u0b8e\u0b8f\7\65\2\2\u0b8f\u0b91\t"+
		"\2\2\2\u0b90\u0b92\5\u0272\u013a\2\u0b91\u0b90\3\2\2\2\u0b91\u0b92\3\2"+
		"\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b94\5\u023a\u011e\2\u0b94\u0097\3\2\2"+
		"\2\u0b95\u0b96\7\65\2\2\u0b96\u0b98\7\u01a1\2\2\u0b97\u0b99\5\u0272\u013a"+
		"\2\u0b98\u0b97\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a\u0b9b"+
		"\5\u021e\u0110\2\u0b9b\u0099\3\2\2\2\u0b9c\u0b9d\7\65\2\2\u0b9d\u0b9f"+
		"\7S\2\2\u0b9e\u0ba0\t\3\2\2\u0b9f\u0b9e\3\2\2\2\u0b9f\u0ba0\3\2\2\2\u0ba0"+
		"\u0ba1\3\2\2\2\u0ba1\u0ba2\5\u023a\u011e\2\u0ba2\u0ba3\7x\2\2\u0ba3\u0bb0"+
		"\5\u0220\u0111\2\u0ba4\u0ba6\7\u0152\2\2\u0ba5\u0ba7\7\u0464\2\2\u0ba6"+
		"\u0ba5\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u0baf\t\5"+
		"\2\2\u0ba9\u0bab\7i\2\2\u0baa\u0bac\7\u0464\2\2\u0bab\u0baa\3\2\2\2\u0bab"+
		"\u0bac\3\2\2\2\u0bac\u0bad\3\2\2\2\u0bad\u0baf\t\6\2\2\u0bae\u0ba4\3\2"+
		"\2\2\u0bae\u0ba9\3\2\2\2\u0baf\u0bb2\3\2\2\2\u0bb0\u0bae\3\2\2\2\u0bb0"+
		"\u0bb1\3\2\2\2\u0bb1\u009b\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb3\u0bb4\7\65"+
		"\2\2\u0bb4\u0bb5\7\u01dd\2\2\u0bb5\u0bb6\7K\2\2\u0bb6\u0bb7\5\u023a\u011e"+
		"\2\u0bb7\u0bb8\7\u019b\2\2\u0bb8\u0bb9\7\u0464\2\2\u0bb9\u0bba\5\u0230"+
		"\u0119\2\u0bba\u009d\3\2\2\2\u0bbb\u0bbc\7\65\2\2\u0bbc\u0bbe\7\u0085"+
		"\2\2\u0bbd\u0bbf\5\u0272\u013a\2\u0bbe\u0bbd\3\2\2\2\u0bbe\u0bbf\3\2\2"+
		"\2\u0bbf\u0bc0\3\2\2\2\u0bc0\u0bc1\5\u021e\u0110\2\u0bc1\u009f\3\2\2\2"+
		"\u0bc2\u0bc3\7\65\2\2\u0bc3\u0bc5\7\u01b7\2\2\u0bc4\u0bc6\5\u0272\u013a"+
		"\2\u0bc5\u0bc4\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc8"+
		"\5\u021e\u0110\2\u0bc8\u00a1\3\2\2\2\u0bc9\u0bca\7\65\2\2\u0bca\u0bcc"+
		"\7\u0262\2\2\u0bcb\u0bcd\5\u0272\u013a\2\u0bcc\u0bcb\3\2\2\2\u0bcc\u0bcd"+
		"\3\2\2\2\u0bcd\u0bce\3\2\2\2\u0bce\u0bcf\5\u023a\u011e\2\u0bcf\u00a3\3"+
		"\2\2\2\u0bd0\u0bd2\7\65\2\2\u0bd1\u0bd3\7\u028b\2\2\u0bd2\u0bd1\3\2\2"+
		"\2\u0bd2\u0bd3\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0bd6\7\u00ae\2\2\u0bd5"+
		"\u0bd7\5\u0272\u013a\2\u0bd6\u0bd5\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bd8"+
		"\3\2\2\2\u0bd8\u0bda\5\u025e\u0130\2\u0bd9\u0bdb\t(\2\2\u0bda\u0bd9\3"+
		"\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u00a5\3\2\2\2\u0bdc\u0bdd\7\65\2\2\u0bdd"+
		"\u0bde\7\u0289\2\2\u0bde\u0be4\5\u023a\u011e\2\u0bdf\u0be1\7\u019b\2\2"+
		"\u0be0\u0be2\7\u0464\2\2\u0be1\u0be0\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2"+
		"\u0be3\3\2\2\2\u0be3\u0be5\5\u0230\u0119\2\u0be4\u0bdf\3\2\2\2\u0be4\u0be5"+
		"\3\2\2\2\u0be5\u00a7\3\2\2\2\u0be6\u0be7\7\65\2\2\u0be7\u0be9\7\u00b3"+
		"\2\2\u0be8\u0bea\5\u0272\u013a\2\u0be9\u0be8\3\2\2\2\u0be9\u0bea\3\2\2"+
		"\2\u0bea\u0beb\3\2\2\2\u0beb\u0bec\5\u021e\u0110\2\u0bec\u00a9\3\2\2\2"+
		"\u0bed\u0bee\7\65\2\2\u0bee\u0bf0\7\u02a1\2\2\u0bef\u0bf1\5\u0272\u013a"+
		"\2\u0bf0\u0bef\3\2\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0bf7"+
		"\5\u021e\u0110\2\u0bf3\u0bf4\7\u046f\2\2\u0bf4\u0bf6\5\u021e\u0110\2\u0bf5"+
		"\u0bf3\3\2\2\2\u0bf6\u0bf9\3\2\2\2\u0bf7\u0bf5\3\2\2\2\u0bf7\u0bf8\3\2"+
		"\2\2\u0bf8\u0bfb\3\2\2\2\u0bf9\u0bf7\3\2\2\2\u0bfa\u0bfc\t(\2\2\u0bfb"+
		"\u0bfa\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u00ab\3\2\2\2\u0bfd\u0bfe\7\65"+
		"\2\2\u0bfe\u0c00\7\u0256\2\2\u0bff\u0c01\5\u0272\u013a\2\u0c00\u0bff\3"+
		"\2\2\2\u0c00\u0c01\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c07\5\u0222\u0112"+
		"\2\u0c03\u0c04\7\u046f\2\2\u0c04\u0c06\5\u0222\u0112\2\u0c05\u0c03\3\2"+
		"\2\2\u0c06\u0c09\3\2\2\2\u0c07\u0c05\3\2\2\2\u0c07\u0c08\3\2\2\2\u0c08"+
		"\u00ad\3\2\2\2\u0c09\u0c07\3\2\2\2\u0c0a\u0c0b\7\u009b\2\2\u0c0b\u0c0c"+
		"\7,\2\2\u0c0c\u0c17\7\u0256\2\2\u0c0d\u0c18\7\u0213\2\2\u0c0e\u0c18\7"+
		"\b\2\2\u0c0f\u0c14\5\u0222\u0112\2\u0c10\u0c11\7\u046f\2\2\u0c11\u0c13"+
		"\5\u0222\u0112\2\u0c12\u0c10\3\2\2\2\u0c13\u0c16\3\2\2\2\u0c14\u0c12\3"+
		"\2\2\2\u0c14\u0c15\3\2\2\2\u0c15\u0c18\3\2\2\2\u0c16\u0c14\3\2\2\2\u0c17"+
		"\u0c0d\3\2\2\2\u0c17\u0c0e\3\2\2\2\u0c17\u0c0f\3\2\2\2\u0c18\u0c19\3\2"+
		"\2\2\u0c19\u0c1c\7\u00b1\2\2\u0c1a\u0c1d\5\u0228\u0115\2\u0c1b\u0c1d\5"+
		"\u023a\u011e\2\u0c1c\u0c1a\3\2\2\2\u0c1c\u0c1b\3\2\2\2\u0c1d\u0c25\3\2"+
		"\2\2\u0c1e\u0c21\7\u046f\2\2\u0c1f\u0c22\5\u0228\u0115\2\u0c20\u0c22\5"+
		"\u023a\u011e\2\u0c21\u0c1f\3\2\2\2\u0c21\u0c20\3\2\2\2\u0c22\u0c24\3\2"+
		"\2\2\u0c23\u0c1e\3\2\2\2\u0c24\u0c27\3\2\2\2\u0c25\u0c23\3\2\2\2\u0c25"+
		"\u0c26\3\2\2\2\u0c26\u0c2c\3\2\2\2\u0c27\u0c25\3\2\2\2\u0c28\u0c29\7\u009b"+
		"\2\2\u0c29\u0c2a\7\u0256\2\2\u0c2a\u0c2c\5\u01ae\u00d8\2\u0c2b\u0c0a\3"+
		"\2\2\2\u0c2b\u0c28\3\2\2\2\u0c2c\u00af\3\2\2\2\u0c2d\u0c2e\7\u008d\2\2"+
		"\u0c2e\u0c2f\7\u00ae\2\2\u0c2f\u0c34\5\u00b2Z\2\u0c30\u0c31\7\u046f\2"+
		"\2\u0c31\u0c33\5\u00b2Z\2\u0c32\u0c30\3\2\2\2\u0c33\u0c36\3\2\2\2\u0c34"+
		"\u0c32\3\2\2\2\u0c34\u0c35\3\2\2\2\u0c35\u00b1\3\2\2\2\u0c36\u0c34\3\2"+
		"\2\2\u0c37\u0c38\5\u0220\u0111\2\u0c38\u0c39\7\u00b1\2\2\u0c39\u0c3a\5"+
		"\u0220\u0111\2\u0c3a\u00b3\3\2\2\2\u0c3b\u0c3d\7\u0292\2\2\u0c3c\u0c3e"+
		"\7\u00ae\2\2\u0c3d\u0c3c\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c3f\3\2\2"+
		"\2\u0c3f\u0c40\5\u0220\u0111\2\u0c40\u00b5\3\2\2\2\u0c41\u0c42\7\26\2"+
		"\2\u0c42\u0c49\5\u021e\u0110\2\u0c43\u0c46\7\u046d\2\2\u0c44\u0c47\5\u0266"+
		"\u0134\2\u0c45\u0c47\5\u0262\u0132\2\u0c46\u0c44\3\2\2\2\u0c46\u0c45\3"+
		"\2\2\2\u0c46\u0c47\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48\u0c4a\7\u046e\2\2"+
		"\u0c49\u0c43\3\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a\u00b7\3\2\2\2\u0c4b\u0c4e"+
		"\5\u00d4k\2\u0c4c\u0c4e\5\u00d6l\2\u0c4d\u0c4b\3\2\2\2\u0c4d\u0c4c\3\2"+
		"\2\2\u0c4e\u00b9\3\2\2\2\u0c4f\u0c50\7\u0191\2\2\u0c50\u0c51\5\u0262\u0132"+
		"\2\u0c51\u00bb\3\2\2\2\u0c52\u0c57\5\u00d8m\2\u0c53\u0c57\5\u00dan\2\u0c54"+
		"\u0c57\5\u00dco\2\u0c55\u0c57\5\u00dep\2\u0c56\u0c52\3\2\2\2\u0c56\u0c53"+
		"\3\2\2\2\u0c56\u0c54\3\2\2\2\u0c56\u0c55\3\2\2\2\u0c57\u00bd\3\2\2\2\u0c58"+
		"\u0c5a\7W\2\2\u0c59\u0c5b\t)\2\2\u0c5a\u0c59\3\2\2\2\u0c5a\u0c5b\3\2\2"+
		"\2\u0c5b\u0c5d\3\2\2\2\u0c5c\u0c5e\7P\2\2\u0c5d\u0c5c\3\2\2\2\u0c5d\u0c5e"+
		"\3\2\2\2\u0c5e\u0c60\3\2\2\2\u0c5f\u0c61\7Y\2\2\u0c60\u0c5f\3\2\2\2\u0c60"+
		"\u0c61\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c69\5\u0220\u0111\2\u0c63\u0c64"+
		"\7\u0083\2\2\u0c64\u0c66\7\u046d\2\2\u0c65\u0c67\5\u025a\u012e\2\u0c66"+
		"\u0c65\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68\u0c6a\7\u046e"+
		"\2\2\u0c69\u0c63\3\2\2\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c7b\3\2\2\2\u0c6b"+
		"\u0c6c\7\u046d\2\2\u0c6c\u0c6d\5\u025c\u012f\2\u0c6d\u0c6e\7\u046e\2\2"+
		"\u0c6e\u0c70\3\2\2\2\u0c6f\u0c6b\3\2\2\2\u0c6f\u0c70\3\2\2\2\u0c70\u0c71"+
		"\3\2\2\2\u0c71\u0c7c\5\u00ccg\2\u0c72\u0c73\7\u009b\2\2\u0c73\u0c78\5"+
		"\u00ceh\2\u0c74\u0c75\7\u046f\2\2\u0c75\u0c77\5\u00ceh\2\u0c76\u0c74\3"+
		"\2\2\2\u0c77\u0c7a\3\2\2\2\u0c78\u0c76\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79"+
		"\u0c7c\3\2\2\2\u0c7a\u0c78\3\2\2\2\u0c7b\u0c6f\3\2\2\2\u0c7b\u0c72\3\2"+
		"\2\2\u0c7c\u0c89\3\2\2\2\u0c7d\u0c7e\7x\2\2\u0c7e\u0c7f\7\u0193\2\2\u0c7f"+
		"\u0c80\7]\2\2\u0c80\u0c81\7\u00ba\2\2\u0c81\u0c86\5\u00ceh\2\u0c82\u0c83"+
		"\7\u046f\2\2\u0c83\u0c85\5\u00ceh\2\u0c84\u0c82\3\2\2\2\u0c85\u0c88\3"+
		"\2\2\2\u0c86\u0c84\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87\u0c8a\3\2\2\2\u0c88"+
		"\u0c86\3\2\2\2\u0c89\u0c7d\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a\u00bf\3\2"+
		"\2\2\u0c8b\u0c8c\7h\2\2\u0c8c\u0c8e\7\u0186\2\2\u0c8d\u0c8f\t*\2\2\u0c8e"+
		"\u0c8d\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f\u0c91\3\2\2\2\u0c90\u0c92\7\u01dc"+
		"\2\2\u0c91\u0c90\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u0c93\3\2\2\2\u0c93"+
		"\u0c94\7T\2\2\u0c94\u0c96\7\u047c\2\2\u0c95\u0c97\t\b\2\2\u0c96\u0c95"+
		"\3\2\2\2\u0c96\u0c97\3\2\2\2\u0c97\u0c98\3\2\2\2\u0c98\u0c99\7Y\2\2\u0c99"+
		"\u0c9a\7\u00ae\2\2\u0c9a\u0ca0\5\u0220\u0111\2\u0c9b\u0c9c\7\u0083\2\2"+
		"\u0c9c\u0c9d\7\u046d\2\2\u0c9d\u0c9e\5\u025a\u012e\2\u0c9e\u0c9f\7\u046e"+
		"\2\2\u0c9f\u0ca1\3\2\2\2\u0ca0\u0c9b\3\2\2\2\u0ca0\u0ca1\3\2\2\2\u0ca1"+
		"\u0ca5\3\2\2\2\u0ca2\u0ca3\7\33\2\2\u0ca3\u0ca4\7\u009b\2\2\u0ca4\u0ca6"+
		"\5\u022c\u0117\2\u0ca5\u0ca2\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0cad\3"+
		"\2\2\2\u0ca7\u0ca9\t+\2\2\u0ca8\u0caa\5\u0114\u008b\2\u0ca9\u0ca8\3\2"+
		"\2\2\u0caa\u0cab\3\2\2\2\u0cab\u0ca9\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac"+
		"\u0cae\3\2\2\2\u0cad\u0ca7\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0cb5\3\2"+
		"\2\2\u0caf\u0cb1\7g\2\2\u0cb0\u0cb2\5\u0116\u008c\2\u0cb1\u0cb0\3\2\2"+
		"\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb1\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb6"+
		"\3\2\2\2\u0cb5\u0caf\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cbb\3\2\2\2\u0cb7"+
		"\u0cb8\7P\2\2\u0cb8\u0cb9\5\u0240\u0121\2\u0cb9\u0cba\t,\2\2\u0cba\u0cbc"+
		"\3\2\2\2\u0cbb\u0cb7\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u0cc8\3\2\2\2\u0cbd"+
		"\u0cbe\7\u046d\2\2\u0cbe\u0cc3\5\u00d0i\2\u0cbf\u0cc0\7\u046f\2\2\u0cc0"+
		"\u0cc2\5\u00d0i\2\u0cc1\u0cbf\3\2\2\2\u0cc2\u0cc5\3\2\2\2\u0cc3\u0cc1"+
		"\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc6\3\2\2\2\u0cc5\u0cc3\3\2\2\2\u0cc6"+
		"\u0cc7\7\u046e\2\2\u0cc7\u0cc9\3\2\2\2\u0cc8\u0cbd\3\2\2\2\u0cc8\u0cc9"+
		"\3\2\2\2\u0cc9\u0cd3\3\2\2\2\u0cca\u0ccb\7\u009b\2\2\u0ccb\u0cd0\5\u00ce"+
		"h\2\u0ccc\u0ccd\7\u046f\2\2\u0ccd\u0ccf\5\u00ceh\2\u0cce\u0ccc\3\2\2\2"+
		"\u0ccf\u0cd2\3\2\2\2\u0cd0\u0cce\3\2\2\2\u0cd0\u0cd1\3\2\2\2\u0cd1\u0cd4"+
		"\3\2\2\2\u0cd2\u0cd0\3\2\2\2\u0cd3\u0cca\3\2\2\2\u0cd3\u0cd4\3\2\2\2\u0cd4"+
		"\u00c1\3\2\2\2\u0cd5\u0cd6\7h\2\2\u0cd6\u0cd8\7\u02ac\2\2\u0cd7\u0cd9"+
		"\t*\2\2\u0cd8\u0cd7\3\2\2\2\u0cd8\u0cd9\3\2\2\2\u0cd9\u0cdb\3\2\2\2\u0cda"+
		"\u0cdc\7\u01dc\2\2\u0cdb\u0cda\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0cdd"+
		"\3\2\2\2\u0cdd\u0cde\7T\2\2\u0cde\u0ce0\7\u047c\2\2\u0cdf\u0ce1\t\b\2"+
		"\2\u0ce0\u0cdf\3\2\2\2\u0ce0\u0ce1\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2\u0ce3"+
		"\7Y\2\2\u0ce3\u0ce4\7\u00ae\2\2\u0ce4\u0ce8\5\u0220\u0111\2\u0ce5\u0ce6"+
		"\7\33\2\2\u0ce6\u0ce7\7\u009b\2\2\u0ce7\u0ce9\5\u022c\u0117\2\u0ce8\u0ce5"+
		"\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0cf0\3\2\2\2\u0cea\u0ceb\7\u025b\2"+
		"\2\u0ceb\u0cec\7\u01c2\2\2\u0cec\u0ced\7\25\2\2\u0ced\u0cee\7\u0466\2"+
		"\2\u0cee\u0cef\7\u047c\2\2\u0cef\u0cf1\7\u0465\2\2\u0cf0\u0cea\3\2\2\2"+
		"\u0cf0\u0cf1\3\2\2\2\u0cf1\u0cf6\3\2\2\2\u0cf2\u0cf3\7P\2\2\u0cf3\u0cf4"+
		"\5\u0240\u0121\2\u0cf4\u0cf5\t,\2\2\u0cf5\u0cf7\3\2\2\2\u0cf6\u0cf2\3"+
		"\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7\u0d03\3\2\2\2\u0cf8\u0cf9\7\u046d\2\2"+
		"\u0cf9\u0cfe\5\u00d0i\2\u0cfa\u0cfb\7\u046f\2\2\u0cfb\u0cfd\5\u00d0i\2"+
		"\u0cfc\u0cfa\3\2\2\2\u0cfd\u0d00\3\2\2\2\u0cfe\u0cfc\3\2\2\2\u0cfe\u0cff"+
		"\3\2\2\2\u0cff\u0d01\3\2\2\2\u0d00\u0cfe\3\2\2\2\u0d01\u0d02\7\u046e\2"+
		"\2\u0d02\u0d04\3\2\2\2\u0d03\u0cf8\3\2\2\2\u0d03\u0d04\3\2\2\2\u0d04\u0d0e"+
		"\3\2\2\2\u0d05\u0d06\7\u009b\2\2\u0d06\u0d0b\5\u00ceh\2\u0d07\u0d08\7"+
		"\u046f\2\2\u0d08\u0d0a\5\u00ceh\2\u0d09\u0d07\3\2\2\2\u0d0a\u0d0d\3\2"+
		"\2\2\u0d0b\u0d09\3\2\2\2\u0d0b\u0d0c\3\2\2\2\u0d0c\u0d0f\3\2\2\2\u0d0d"+
		"\u0d0b\3\2\2\2\u0d0e\u0d05\3\2\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f\u00c3\3\2"+
		"\2\2\u0d10\u0d12\7\u008f\2\2\u0d11\u0d13\t-\2\2\u0d12\u0d11\3\2\2\2\u0d12"+
		"\u0d13\3\2\2\2\u0d13\u0d15\3\2\2\2\u0d14\u0d16\7Y\2\2\u0d15\u0d14\3\2"+
		"\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d17\3\2\2\2\u0d17\u0d1d\5\u0220\u0111"+
		"\2\u0d18\u0d19\7\u0083\2\2\u0d19\u0d1a\7\u046d\2\2\u0d1a\u0d1b\5\u025a"+
		"\u012e\2\u0d1b\u0d1c\7\u046e\2\2\u0d1c\u0d1e\3\2\2\2\u0d1d\u0d18\3\2\2"+
		"\2\u0d1d\u0d1e\3\2\2\2\u0d1e\u0d2f\3\2\2\2\u0d1f\u0d20\7\u046d\2\2\u0d20"+
		"\u0d21\5\u025a\u012e\2\u0d21\u0d22\7\u046e\2\2\u0d22\u0d24\3\2\2\2\u0d23"+
		"\u0d1f\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24\u0d25\3\2\2\2\u0d25\u0d30\5\u00cc"+
		"g\2\u0d26\u0d27\7\u009b\2\2\u0d27\u0d2c\5\u00ceh\2\u0d28\u0d29\7\u046f"+
		"\2\2\u0d29\u0d2b\5\u00ceh\2\u0d2a\u0d28\3\2\2\2\u0d2b\u0d2e\3\2\2\2\u0d2c"+
		"\u0d2a\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d30\3\2\2\2\u0d2e\u0d2c\3\2"+
		"\2\2\u0d2f\u0d23\3\2\2\2\u0d2f\u0d26\3\2\2\2\u0d30\u00c5\3\2\2\2\u0d31"+
		"\u0d33\5\u00f8}\2\u0d32\u0d34\5\u00d2j\2\u0d33\u0d32\3\2\2\2\u0d33\u0d34"+
		"\3\2\2\2\u0d34\u0d70\3\2\2\2\u0d35\u0d37\5\u00f4{\2\u0d36\u0d38\5\u00d2"+
		"j\2\u0d37\u0d36\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d70\3\2\2\2\u0d39"+
		"\u0d3b\5\u00fa~\2\u0d3a\u0d3c\5\u00fe\u0080\2\u0d3b\u0d3a\3\2\2\2\u0d3c"+
		"\u0d3d\3\2\2\2\u0d3d\u0d3b\3\2\2\2\u0d3d\u0d3e\3\2\2\2\u0d3e\u0d47\3\2"+
		"\2\2\u0d3f\u0d41\7\u00b6\2\2\u0d40\u0d42\t.\2\2\u0d41\u0d40\3\2\2\2\u0d41"+
		"\u0d42\3\2\2\2\u0d42\u0d45\3\2\2\2\u0d43\u0d46\5\u00f8}\2\u0d44\u0d46"+
		"\5\u00f4{\2\u0d45\u0d43\3\2\2\2\u0d45\u0d44\3\2\2\2\u0d46\u0d48\3\2\2"+
		"\2\u0d47\u0d3f\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48\u0d4a\3\2\2\2\u0d49\u0d4b"+
		"\5\u00e4s\2\u0d4a\u0d49\3\2\2\2\u0d4a\u0d4b\3\2\2\2\u0d4b\u0d4d\3\2\2"+
		"\2\u0d4c\u0d4e\5\u0122\u0092\2\u0d4d\u0d4c\3\2\2\2\u0d4d\u0d4e\3\2\2\2"+
		"\u0d4e\u0d50\3\2\2\2\u0d4f\u0d51\5\u00d2j\2\u0d50\u0d4f\3\2\2\2\u0d50"+
		"\u0d51\3\2\2\2\u0d51\u0d70\3\2\2\2\u0d52\u0d54\5\u00f6|\2\u0d53\u0d55"+
		"\5\u00fc\177\2\u0d54\u0d53\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d54\3\2"+
		"\2\2\u0d56\u0d57\3\2\2\2\u0d57\u0d5d\3\2\2\2\u0d58\u0d5a\7\u00b6\2\2\u0d59"+
		"\u0d5b\t.\2\2\u0d5a\u0d59\3\2\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5c\3\2"+
		"\2\2\u0d5c\u0d5e\5\u00f4{\2\u0d5d\u0d58\3\2\2\2\u0d5d\u0d5e\3\2\2\2\u0d5e"+
		"\u0d60\3\2\2\2\u0d5f\u0d61\5\u00e4s\2\u0d60\u0d5f\3\2\2\2\u0d60\u0d61"+
		"\3\2\2\2\u0d61\u0d63\3\2\2\2\u0d62\u0d64\5\u0122\u0092\2\u0d63\u0d62\3"+
		"\2\2\2\u0d63\u0d64\3\2\2\2\u0d64\u0d66\3\2\2\2\u0d65\u0d67\5\u00d2j\2"+
		"\u0d66\u0d65\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d70\3\2\2\2\u0d68\u0d6b"+
		"\5\u00fa~\2\u0d69\u0d6a\7\u046f\2\2\u0d6a\u0d6c\5\u0100\u0081\2\u0d6b"+
		"\u0d69\3\2\2\2\u0d6c\u0d6d\3\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6d\u0d6e\3\2"+
		"\2\2\u0d6e\u0d70\3\2\2\2\u0d6f\u0d31\3\2\2\2\u0d6f\u0d35\3\2\2\2\u0d6f"+
		"\u0d39\3\2\2\2\u0d6f\u0d52\3\2\2\2\u0d6f\u0d68\3\2\2\2\u0d70\u00c7\3\2"+
		"\2\2\u0d71\u0d74\5\u00e0q\2\u0d72\u0d74\5\u00e2r\2\u0d73\u0d71\3\2\2\2"+
		"\u0d73\u0d72\3\2\2\2\u0d74\u00c9\3\2\2\2\u0d75\u0d76\7\u00be\2\2\u0d76"+
		"\u0d78\7\u046d\2\2\u0d77\u0d79\5\u0264\u0133\2\u0d78\u0d77\3\2\2\2\u0d78"+
		"\u0d79\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a\u0d83\7\u046e\2\2\u0d7b\u0d7c"+
		"\7\u046f\2\2\u0d7c\u0d7e\7\u046d\2\2\u0d7d\u0d7f\5\u0264\u0133\2\u0d7e"+
		"\u0d7d\3\2\2\2\u0d7e\u0d7f\3\2\2\2\u0d7f\u0d80\3\2\2\2\u0d80\u0d82\7\u046e"+
		"\2\2\u0d81\u0d7b\3\2\2\2\u0d82\u0d85\3\2\2\2\u0d83\u0d81\3\2\2\2\u0d83"+
		"\u0d84\3\2\2\2\u0d84\u00cb\3\2\2\2\u0d85\u0d83\3\2\2\2\u0d86\u0d99\5\u00c6"+
		"d\2\u0d87\u0d88\t/\2\2\u0d88\u0d8a\7\u046d\2\2\u0d89\u0d8b\5\u0264\u0133"+
		"\2\u0d8a\u0d89\3\2\2\2\u0d8a\u0d8b\3\2\2\2\u0d8b\u0d8c\3\2\2\2\u0d8c\u0d95"+
		"\7\u046e\2\2\u0d8d\u0d8e\7\u046f\2\2\u0d8e\u0d90\7\u046d\2\2\u0d8f\u0d91"+
		"\5\u0264\u0133\2\u0d90\u0d8f\3\2\2\2\u0d90\u0d91\3\2\2\2\u0d91\u0d92\3"+
		"\2\2\2\u0d92\u0d94\7\u046e\2\2\u0d93\u0d8d\3\2\2\2\u0d94\u0d97\3\2\2\2"+
		"\u0d95\u0d93\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0d99\3\2\2\2\u0d97\u0d95"+
		"\3\2\2\2\u0d98\u0d86\3\2\2\2\u0d98\u0d87\3\2\2\2\u0d99\u00cd\3\2\2\2\u0d9a"+
		"\u0d9b\5\u0224\u0113\2\u0d9b\u0d9e\7\u0464\2\2\u0d9c\u0d9f\5\u02a2\u0152"+
		"\2\u0d9d\u0d9f\7,\2\2\u0d9e\u0d9c\3\2\2\2\u0d9e\u0d9d\3\2\2\2\u0d9f\u00cf"+
		"\3\2\2\2\u0da0\u0da3\5\u023a\u011e\2\u0da1\u0da3\7\u0488\2\2\u0da2\u0da0"+
		"\3\2\2\2\u0da2\u0da1\3\2\2\2\u0da3\u00d1\3\2\2\2\u0da4\u0da5\7C\2\2\u0da5"+
		"\u0dab\7\u00ba\2\2\u0da6\u0da7\7i\2\2\u0da7\u0da8\7R\2\2\u0da8\u0da9\7"+
		"\u0264\2\2\u0da9\u0dab\7\u0201\2\2\u0daa\u0da4\3\2\2\2\u0daa\u0da6\3\2"+
		"\2\2\u0dab\u00d3\3\2\2\2\u0dac\u0dae\7.\2\2\u0dad\u0daf\7l\2\2\u0dae\u0dad"+
		"\3\2\2\2\u0dae\u0daf\3\2\2\2\u0daf\u0db1\3\2\2\2\u0db0\u0db2\7\u023a\2"+
		"\2\u0db1\u0db0\3\2\2\2\u0db1\u0db2\3\2\2\2\u0db2\u0db4\3\2\2\2\u0db3\u0db5"+
		"\7P\2\2\u0db4\u0db3\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6"+
		"\u0db7\7F\2\2\u0db7\u0dbc\5\u0220\u0111\2\u0db8\u0dba\7\16\2\2\u0db9\u0db8"+
		"\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0dbd\5\u023a\u011e"+
		"\2\u0dbc\u0db9\3\2\2\2\u0dbc\u0dbd\3\2\2\2\u0dbd\u0dc3\3\2\2\2\u0dbe\u0dbf"+
		"\7\u0083\2\2\u0dbf\u0dc0\7\u046d\2\2\u0dc0\u0dc1\5\u025a\u012e\2\u0dc1"+
		"\u0dc2\7\u046e\2\2\u0dc2\u0dc4\3\2\2\2\u0dc3\u0dbe\3\2\2\2\u0dc3\u0dc4"+
		"\3\2\2\2\u0dc4\u0dc7\3\2\2\2\u0dc5\u0dc6\7\u00c0\2\2\u0dc6\u0dc8\5\u02a2"+
		"\u0152\2\u0dc7\u0dc5\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dca\3\2\2\2\u0dc9"+
		"\u0dcb\5\u00e4s\2\u0dca\u0dc9\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0dce"+
		"\3\2\2\2\u0dcc\u0dcd\7e\2\2\u0dcd\u0dcf\5\u0124\u0093\2\u0dce\u0dcc\3"+
		"\2\2\2\u0dce\u0dcf\3\2\2\2\u0dcf\u00d5\3\2\2\2\u0dd0\u0dd2\7.\2\2\u0dd1"+
		"\u0dd3\7l\2\2\u0dd2\u0dd1\3\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3\u0dd5\3\2"+
		"\2\2\u0dd4\u0dd6\7\u023a\2\2\u0dd5\u0dd4\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6"+
		"\u0dd8\3\2\2\2\u0dd7\u0dd9\7P\2\2\u0dd8\u0dd7\3\2\2\2\u0dd8\u0dd9\3\2"+
		"\2\2\u0dd9\u0e01\3\2\2\2\u0dda\u0ddd\5\u0220\u0111\2\u0ddb\u0ddc\7\u046c"+
		"\2\2\u0ddc\u0dde\7\u045d\2\2\u0ddd\u0ddb\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde"+
		"\u0de7\3\2\2\2\u0ddf\u0de0\7\u046f\2\2\u0de0\u0de3\5\u0220\u0111\2\u0de1"+
		"\u0de2\7\u046c\2\2\u0de2\u0de4\7\u045d\2\2\u0de3\u0de1\3\2\2\2\u0de3\u0de4"+
		"\3\2\2\2\u0de4\u0de6\3\2\2\2\u0de5\u0ddf\3\2\2\2\u0de6\u0de9\3\2\2\2\u0de7"+
		"\u0de5\3\2\2\2\u0de7\u0de8\3\2\2\2\u0de8\u0dea\3\2\2\2\u0de9\u0de7\3\2"+
		"\2\2\u0dea\u0deb\7F\2\2\u0deb\u0dec\5\u00e8u\2\u0dec\u0e02\3\2\2\2\u0ded"+
		"\u0dee\7F\2\2\u0dee\u0df1\5\u0220\u0111\2\u0def\u0df0\7\u046c\2\2\u0df0"+
		"\u0df2\7\u045d\2\2\u0df1\u0def\3\2\2\2\u0df1\u0df2\3\2\2\2\u0df2\u0dfb"+
		"\3\2\2\2\u0df3\u0df4\7\u046f\2\2\u0df4\u0df7\5\u0220\u0111\2\u0df5\u0df6"+
		"\7\u046c\2\2\u0df6\u0df8\7\u045d\2\2\u0df7\u0df5\3\2\2\2\u0df7\u0df8\3"+
		"\2\2\2\u0df8\u0dfa\3\2\2\2\u0df9\u0df3\3\2\2\2\u0dfa\u0dfd\3\2\2\2\u0dfb"+
		"\u0df9\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0dfe\3\2\2\2\u0dfd\u0dfb\3\2"+
		"\2\2\u0dfe\u0dff\7\u00bd\2\2\u0dff\u0e00\5\u00e8u\2\u0e00\u0e02\3\2\2"+
		"\2\u0e01\u0dda\3\2\2\2\u0e01\u0ded\3\2\2\2\u0e02\u0e05\3\2\2\2\u0e03\u0e04"+
		"\7\u00c0\2\2\u0e04\u0e06\5\u02a2\u0152\2\u0e05\u0e03\3\2\2\2\u0e05\u0e06"+
		"\3\2\2\2\u0e06\u00d7\3\2\2\2\u0e07\u0e08\7\u01bc\2\2\u0e08\u0e09\5\u0220"+
		"\u0111\2\u0e09\u0e0e\7\u021d\2\2\u0e0a\u0e0c\7\16\2\2\u0e0b\u0e0a\3\2"+
		"\2\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0e0d\3\2\2\2\u0e0d\u0e0f\5\u023a\u011e"+
		"\2\u0e0e\u0e0b\3\2\2\2\u0e0e\u0e0f\3\2\2\2\u0e0f\u00d9\3\2\2\2\u0e10\u0e11"+
		"\7\u01bc\2\2\u0e11\u0e12\5\u0220\u0111\2\u0e12\u0e13\7\u0088\2\2\u0e13"+
		"\u0e1a\5\u023a\u011e\2\u0e14\u0e15\5\u02aa\u0156\2\u0e15\u0e16\7\u046d"+
		"\2\2\u0e16\u0e17\5\u0266\u0134\2\u0e17\u0e18\7\u046e\2\2\u0e18\u0e1b\3"+
		"\2\2\2\u0e19\u0e1b\t\60\2\2\u0e1a\u0e14\3\2\2\2\u0e1a\u0e19\3\2\2\2\u0e1b"+
		"\u0e1e\3\2\2\2\u0e1c\u0e1d\7\u00c0\2\2\u0e1d\u0e1f\5\u02a2\u0152\2\u0e1e"+
		"\u0e1c\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e22\3\2\2\2\u0e20\u0e21\7e"+
		"\2\2\u0e21\u0e23\5\u0124\u0093\2\u0e22\u0e20\3\2\2\2\u0e22\u0e23\3\2\2"+
		"\2\u0e23\u00db\3\2\2\2\u0e24\u0e25\7\u01bc\2\2\u0e25\u0e26\5\u0220\u0111"+
		"\2\u0e26\u0e27\7\u0088\2\2\u0e27\u0e2a\t\61\2\2\u0e28\u0e29\7\u00c0\2"+
		"\2\u0e29\u0e2b\5\u02a2\u0152\2\u0e2a\u0e28\3\2\2\2\u0e2a\u0e2b\3\2\2\2"+
		"\u0e2b\u0e2e\3\2\2\2\u0e2c\u0e2d\7e\2\2\u0e2d\u0e2f\5\u0124\u0093\2\u0e2e"+
		"\u0e2c\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u00dd\3\2\2\2\u0e30\u0e31\7\u01bc"+
		"\2\2\u0e31\u0e32\5\u0220\u0111\2\u0e32\u0e33\7\u016b\2\2\u0e33\u00df\3"+
		"\2\2\2\u0e34\u0e36\7\u00ba\2\2\u0e35\u0e37\7l\2\2\u0e36\u0e35\3\2\2\2"+
		"\u0e36\u0e37\3\2\2\2\u0e37\u0e39\3\2\2\2\u0e38\u0e3a\7P\2\2\u0e39\u0e38"+
		"\3\2\2\2\u0e39\u0e3a\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b\u0e40\5\u0220\u0111"+
		"\2\u0e3c\u0e3e\7\16\2\2\u0e3d\u0e3c\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e"+
		"\u0e3f\3\2\2\2\u0e3f\u0e41\5\u023a\u011e\2\u0e40\u0e3d\3\2\2\2\u0e40\u0e41"+
		"\3\2\2\2\u0e41\u0e42\3\2\2\2\u0e42\u0e43\7\u009b\2\2\u0e43\u0e48\5\u00ce"+
		"h\2\u0e44\u0e45\7\u046f\2\2\u0e45\u0e47\5\u00ceh\2\u0e46\u0e44\3\2\2\2"+
		"\u0e47\u0e4a\3\2\2\2\u0e48\u0e46\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e4d"+
		"\3\2\2\2\u0e4a\u0e48\3\2\2\2\u0e4b\u0e4c\7\u00c0\2\2\u0e4c\u0e4e\5\u02a2"+
		"\u0152\2\u0e4d\u0e4b\3\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e\u0e50\3\2\2\2\u0e4f"+
		"\u0e51\5\u00e4s\2\u0e50\u0e4f\3\2\2\2\u0e50\u0e51\3\2\2\2\u0e51\u0e53"+
		"\3\2\2\2\u0e52\u0e54\5\u0122\u0092\2\u0e53\u0e52\3\2\2\2\u0e53\u0e54\3"+
		"\2\2\2\u0e54\u00e1\3\2\2\2\u0e55\u0e57\7\u00ba\2\2\u0e56\u0e58\7l\2\2"+
		"\u0e57\u0e56\3\2\2\2\u0e57\u0e58\3\2\2\2\u0e58\u0e5a\3\2\2\2\u0e59\u0e5b"+
		"\7P\2\2\u0e5a\u0e59\3\2\2\2\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e5c\3\2\2\2\u0e5c"+
		"\u0e5d\5\u00e8u\2\u0e5d\u0e5e\7\u009b\2\2\u0e5e\u0e63\5\u00ceh\2\u0e5f"+
		"\u0e60\7\u046f\2\2\u0e60\u0e62\5\u00ceh\2\u0e61\u0e5f\3\2\2\2\u0e62\u0e65"+
		"\3\2\2\2\u0e63\u0e61\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e68\3\2\2\2\u0e65"+
		"\u0e63\3\2\2\2\u0e66\u0e67\7\u00c0\2\2\u0e67\u0e69\5\u02a2\u0152\2\u0e68"+
		"\u0e66\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u00e3\3\2\2\2\u0e6a\u0e6b\7~"+
		"\2\2\u0e6b\u0e6c\7\25\2\2\u0e6c\u0e71\5\u00e6t\2\u0e6d\u0e6e\7\u046f\2"+
		"\2\u0e6e\u0e70\5\u00e6t\2\u0e6f\u0e6d\3\2\2\2\u0e70\u0e73\3\2\2\2\u0e71"+
		"\u0e6f\3\2\2\2\u0e71\u0e72\3\2\2\2\u0e72\u00e5\3\2\2\2\u0e73\u0e71\3\2"+
		"\2\2\u0e74\u0e76\5\u02a2\u0152\2\u0e75\u0e77\t\62\2\2\u0e76\u0e75\3\2"+
		"\2\2\u0e76\u0e77\3\2\2\2\u0e77\u00e7\3\2\2\2\u0e78\u0e7d\5\u00eav\2\u0e79"+
		"\u0e7a\7\u046f\2\2\u0e7a\u0e7c\5\u00eav\2\u0e7b\u0e79\3\2\2\2\u0e7c\u0e7f"+
		"\3\2\2\2\u0e7d\u0e7b\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u00e9\3\2\2\2\u0e7f"+
		"\u0e7d\3\2\2\2\u0e80\u0e84\5\u00ecw\2\u0e81\u0e83\5\u00f2z\2\u0e82\u0e81"+
		"\3\2\2\2\u0e83\u0e86\3\2\2\2\u0e84\u0e82\3\2\2\2\u0e84\u0e85\3\2\2\2\u0e85"+
		"\u0e93\3\2\2\2\u0e86\u0e84\3\2\2\2\u0e87\u0e88\7\u046d\2\2\u0e88\u0e8c"+
		"\5\u00ecw\2\u0e89\u0e8b\5\u00f2z\2\u0e8a\u0e89\3\2\2\2\u0e8b\u0e8e\3\2"+
		"\2\2\u0e8c\u0e8a\3\2\2\2\u0e8c\u0e8d\3\2\2\2\u0e8d\u0e8f\3\2\2\2\u0e8e"+
		"\u0e8c\3\2\2\2\u0e8f\u0e90\7\u046e\2\2\u0e90\u0e93\3\2\2\2\u0e91\u0e93"+
		"\5\u0102\u0082\2\u0e92\u0e80\3\2\2\2\u0e92\u0e87\3\2\2\2\u0e92\u0e91\3"+
		"\2\2\2\u0e93\u00eb\3\2\2\2\u0e94\u0e9a\5\u0220\u0111\2\u0e95\u0e96\7\u0083"+
		"\2\2\u0e96\u0e97\7\u046d\2\2\u0e97\u0e98\5\u025a\u012e\2\u0e98\u0e99\7"+
		"\u046e\2\2\u0e99\u0e9b\3\2\2\2\u0e9a\u0e95\3\2\2\2\u0e9a\u0e9b\3\2\2\2"+
		"\u0e9b\u0ea0\3\2\2\2\u0e9c\u0e9e\7\16\2\2\u0e9d\u0e9c\3\2\2\2\u0e9d\u0e9e"+
		"\3\2\2\2\u0e9e\u0e9f\3\2\2\2\u0e9f\u0ea1\5\u023a\u011e\2\u0ea0\u0e9d\3"+
		"\2\2\2\u0ea0\u0ea1\3\2\2\2\u0ea1\u0eaa\3\2\2\2\u0ea2\u0ea7\5\u00eex\2"+
		"\u0ea3\u0ea4\7\u046f\2\2\u0ea4\u0ea6\5\u00eex\2\u0ea5\u0ea3\3\2\2\2\u0ea6"+
		"\u0ea9\3\2\2\2\u0ea7\u0ea5\3\2\2\2\u0ea7\u0ea8\3\2\2\2\u0ea8\u0eab\3\2"+
		"\2\2\u0ea9\u0ea7\3\2\2\2\u0eaa\u0ea2\3\2\2\2\u0eaa\u0eab\3\2\2\2\u0eab"+
		"\u0ebd\3\2\2\2\u0eac\u0eb2\5\u00c6d\2\u0ead\u0eae\7\u046d\2\2\u0eae\u0eaf"+
		"\5\u00c6d\2\u0eaf\u0eb0\7\u046e\2\2\u0eb0\u0eb2\3\2\2\2\u0eb1\u0eac\3"+
		"\2\2\2\u0eb1\u0ead\3\2\2\2\u0eb2\u0eb4\3\2\2\2\u0eb3\u0eb5\7\16\2\2\u0eb4"+
		"\u0eb3\3\2\2\2\u0eb4\u0eb5\3\2\2\2\u0eb5\u0eb6\3\2\2\2\u0eb6\u0eb7\5\u023a"+
		"\u011e\2\u0eb7\u0ebd\3\2\2\2\u0eb8\u0eb9\7\u046d\2\2\u0eb9\u0eba\5\u00e8"+
		"u\2\u0eba\u0ebb\7\u046e\2\2\u0ebb\u0ebd\3\2\2\2\u0ebc\u0e94\3\2\2\2\u0ebc"+
		"\u0eb1\3\2\2\2\u0ebc\u0eb8\3\2\2\2\u0ebd\u00ed\3\2\2\2\u0ebe\u0ebf\t\63"+
		"\2\2\u0ebf\u0ec2\t\26\2\2\u0ec0\u0ec1\7C\2\2\u0ec1\u0ec3\5\u00f0y\2\u0ec2"+
		"\u0ec0\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u0ec4\3\2\2\2\u0ec4\u0ec5\7\u046d"+
		"\2\2\u0ec5\u0ec6\5\u025a\u012e\2\u0ec6\u0ec7\7\u046e\2\2\u0ec7\u00ef\3"+
		"\2\2\2\u0ec8\u0ece\7\\\2\2\u0ec9\u0eca\7~\2\2\u0eca\u0ece\7\25\2\2\u0ecb"+
		"\u0ecc\7K\2\2\u0ecc\u0ece\7\25\2\2\u0ecd\u0ec8\3\2\2\2\u0ecd\u0ec9\3\2"+
		"\2\2\u0ecd\u0ecb\3\2\2\2\u0ece\u00f1\3\2\2\2\u0ecf\u0ed1\t\64\2\2\u0ed0"+
		"\u0ecf\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed2\3\2\2\2\u0ed2\u0ed4\7\\"+
		"\2\2\u0ed3\u0ed5\7`\2\2\u0ed4\u0ed3\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5"+
		"\u0ed6\3\2\2\2\u0ed6\u0ede\5\u00ecw\2\u0ed7\u0ed8\7x\2\2\u0ed8\u0edf\5"+
		"\u02a2\u0152\2\u0ed9\u0eda\7\u00bd\2\2\u0eda\u0edb\7\u046d\2\2\u0edb\u0edc"+
		"\5\u025a\u012e\2\u0edc\u0edd\7\u046e\2\2\u0edd\u0edf\3\2\2\2\u0ede\u0ed7"+
		"\3\2\2\2\u0ede\u0ed9\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf\u0f02\3\2\2\2\u0ee0"+
		"\u0ee1\7\u00ad\2\2\u0ee1\u0ee4\5\u00ecw\2\u0ee2\u0ee3\7x\2\2\u0ee3\u0ee5"+
		"\5\u02a2\u0152\2\u0ee4\u0ee2\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0f02\3"+
		"\2\2\2\u0ee6\u0ee8\t\65\2\2\u0ee7\u0ee9\7\u0080\2\2\u0ee8\u0ee7\3\2\2"+
		"\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eec\7\\\2\2\u0eeb\u0eed"+
		"\7`\2\2\u0eec\u0eeb\3\2\2\2\u0eec\u0eed\3\2\2\2\u0eed\u0eee\3\2\2\2\u0eee"+
		"\u0ef6\5\u00ecw\2\u0eef\u0ef0\7x\2\2\u0ef0\u0ef7\5\u02a2\u0152\2\u0ef1"+
		"\u0ef2\7\u00bd\2\2\u0ef2\u0ef3\7\u046d\2\2\u0ef3\u0ef4\5\u025a\u012e\2"+
		"\u0ef4\u0ef5\7\u046e\2\2\u0ef5\u0ef7\3\2\2\2\u0ef6\u0eef\3\2\2\2\u0ef6"+
		"\u0ef1\3\2\2\2\u0ef7\u0f02\3\2\2\2\u0ef8\u0efd\7s\2\2\u0ef9\u0efb\t\65"+
		"\2\2\u0efa\u0efc\7\u0080\2\2\u0efb\u0efa\3\2\2\2\u0efb\u0efc\3\2\2\2\u0efc"+
		"\u0efe\3\2\2\2\u0efd\u0ef9\3\2\2\2\u0efd\u0efe\3\2\2\2\u0efe\u0eff\3\2"+
		"\2\2\u0eff\u0f00\7\\\2\2\u0f00\u0f02\5\u00ecw\2\u0f01\u0ed0\3\2\2\2\u0f01"+
		"\u0ee0\3\2\2\2\u0f01\u0ee6\3\2\2\2\u0f01\u0ef8\3\2\2\2\u0f02\u00f3\3\2"+
		"\2\2\u0f03\u0f04\7\u046d\2\2\u0f04\u0f05\5\u00f8}\2\u0f05\u0f06\7\u046e"+
		"\2\2\u0f06\u0f0c\3\2\2\2\u0f07\u0f08\7\u046d\2\2\u0f08\u0f09\5\u00f4{"+
		"\2\u0f09\u0f0a\7\u046e\2\2\u0f0a\u0f0c\3\2\2\2\u0f0b\u0f03\3\2\2\2\u0f0b"+
		"\u0f07\3\2\2\2\u0f0c\u00f5\3\2\2\2\u0f0d\u0f0e\7\u046d\2\2\u0f0e\u0f0f"+
		"\5\u00fa~\2\u0f0f\u0f10\7\u046e\2\2\u0f10\u0f16\3\2\2\2\u0f11\u0f12\7"+
		"\u046d\2\2\u0f12\u0f13\5\u00f6|\2\u0f13\u0f14\7\u046e\2\2\u0f14\u0f16"+
		"\3\2\2\2\u0f15\u0f0d\3\2\2\2\u0f15\u0f11\3\2\2\2\u0f16\u00f7\3\2\2\2\u0f17"+
		"\u0f1b\7\u009a\2\2\u0f18\u0f1a\5\u010c\u0087\2\u0f19\u0f18\3\2\2\2\u0f1a"+
		"\u0f1d\3\2\2\2\u0f1b\u0f19\3\2\2\2\u0f1b\u0f1c\3\2\2\2\u0f1c\u0f1e\3\2"+
		"\2\2\u0f1d\u0f1b\3\2\2\2\u0f1e\u0f20\5\u010e\u0088\2\u0f1f\u0f21\5\u0112"+
		"\u008a\2\u0f20\u0f1f\3\2\2\2\u0f20\u0f21\3\2\2\2\u0f21\u0f22\3\2\2\2\u0f22"+
		"\u0f24\5\u0118\u008d\2\u0f23\u0f25\5\u011a\u008e\2\u0f24\u0f23\3\2\2\2"+
		"\u0f24\u0f25\3\2\2\2\u0f25\u0f27\3\2\2\2\u0f26\u0f28\5\u011c\u008f\2\u0f27"+
		"\u0f26\3\2\2\2\u0f27\u0f28\3\2\2\2\u0f28\u0f2a\3\2\2\2\u0f29\u0f2b\5\u011e"+
		"\u0090\2\u0f2a\u0f29\3\2\2\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f2d\3\2\2\2\u0f2c"+
		"\u0f2e\5\u00e4s\2\u0f2d\u0f2c\3\2\2\2\u0f2d\u0f2e\3\2\2\2\u0f2e\u0f30"+
		"\3\2\2\2\u0f2f\u0f31\5\u0122\u0092\2\u0f30\u0f2f\3\2\2\2\u0f30\u0f31\3"+
		"\2\2\2\u0f31\u0f4e\3\2\2\2\u0f32\u0f36\7\u009a\2\2\u0f33\u0f35\5";
	private static final String _serializedATNSegment2 =
		"\u010c\u0087\2\u0f34\u0f33\3\2\2\2\u0f35\u0f38\3\2\2\2\u0f36\u0f34\3\2"+
		"\2\2\u0f36\u0f37\3\2\2\2\u0f37\u0f39\3\2\2\2\u0f38\u0f36\3\2\2\2\u0f39"+
		"\u0f3a\5\u010e\u0088\2\u0f3a\u0f3c\5\u0118\u008d\2\u0f3b\u0f3d\5\u011a"+
		"\u008e\2\u0f3c\u0f3b\3\2\2\2\u0f3c\u0f3d\3\2\2\2\u0f3d\u0f3f\3\2\2\2\u0f3e"+
		"\u0f40\5\u011c\u008f\2\u0f3f\u0f3e\3\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40\u0f42"+
		"\3\2\2\2\u0f41\u0f43\5\u011e\u0090\2\u0f42\u0f41\3\2\2\2\u0f42\u0f43\3"+
		"\2\2\2\u0f43\u0f45\3\2\2\2\u0f44\u0f46\5\u00e4s\2\u0f45\u0f44\3\2\2\2"+
		"\u0f45\u0f46\3\2\2\2\u0f46\u0f48\3\2\2\2\u0f47\u0f49\5\u0122\u0092\2\u0f48"+
		"\u0f47\3\2\2\2\u0f48\u0f49\3\2\2\2\u0f49\u0f4b\3\2\2\2\u0f4a\u0f4c\5\u0112"+
		"\u008a\2\u0f4b\u0f4a\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u0f4e\3\2\2\2\u0f4d"+
		"\u0f17\3\2\2\2\u0f4d\u0f32\3\2\2\2\u0f4e\u00f9\3\2\2\2\u0f4f\u0f53\7\u009a"+
		"\2\2\u0f50\u0f52\5\u010c\u0087\2\u0f51\u0f50\3\2\2\2\u0f52\u0f55\3\2\2"+
		"\2\u0f53\u0f51\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f56\3\2\2\2\u0f55\u0f53"+
		"\3\2\2\2\u0f56\u0f57\5\u010e\u0088\2\u0f57\u0f59\5\u0118\u008d\2\u0f58"+
		"\u0f5a\5\u011a\u008e\2\u0f59\u0f58\3\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0f5c"+
		"\3\2\2\2\u0f5b\u0f5d\5\u011c\u008f\2\u0f5c\u0f5b\3\2\2\2\u0f5c\u0f5d\3"+
		"\2\2\2\u0f5d\u0f5f\3\2\2\2\u0f5e\u0f60\5\u011e\u0090\2\u0f5f\u0f5e\3\2"+
		"\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f62\3\2\2\2\u0f61\u0f63\5\u00e4s\2\u0f62"+
		"\u0f61\3\2\2\2\u0f62\u0f63\3\2\2\2\u0f63\u0f65\3\2\2\2\u0f64\u0f66\5\u0122"+
		"\u0092\2\u0f65\u0f64\3\2\2\2\u0f65\u0f66\3\2\2\2\u0f66\u00fb\3\2\2\2\u0f67"+
		"\u0f69\7\u00b6\2\2\u0f68\u0f6a\t.\2\2\u0f69\u0f68\3\2\2\2\u0f69\u0f6a"+
		"\3\2\2\2\u0f6a\u0f6b\3\2\2\2\u0f6b\u0f6c\5\u00f6|\2\u0f6c\u00fd\3\2\2"+
		"\2\u0f6d\u0f6f\7\u00b6\2\2\u0f6e\u0f70\t.\2\2\u0f6f\u0f6e\3\2\2\2\u0f6f"+
		"\u0f70\3\2\2\2\u0f70\u0f73\3\2\2\2\u0f71\u0f74\5\u00fa~\2\u0f72\u0f74"+
		"\5\u00f6|\2\u0f73\u0f71\3\2\2\2\u0f73\u0f72\3\2\2\2\u0f74\u00ff\3\2\2"+
		"\2\u0f75\u0f84\7`\2\2\u0f76\u0f85\5\u00fa~\2\u0f77\u0f85\5\u00f6|\2\u0f78"+
		"\u0f7b\7\u046d\2\2\u0f79\u0f7c\5\u00fa~\2\u0f7a\u0f7c\5\u00f6|\2\u0f7b"+
		"\u0f79\3\2\2\2\u0f7b\u0f7a\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u0f82\7\u046e"+
		"\2\2\u0f7e\u0f80\7\16\2\2\u0f7f\u0f7e\3\2\2\2\u0f7f\u0f80\3\2\2\2\u0f80"+
		"\u0f81\3\2\2\2\u0f81\u0f83\5\u023a\u011e\2\u0f82\u0f7f\3\2\2\2\u0f82\u0f83"+
		"\3\2\2\2\u0f83\u0f85\3\2\2\2\u0f84\u0f76\3\2\2\2\u0f84\u0f77\3\2\2\2\u0f84"+
		"\u0f78\3\2\2\2\u0f85\u0101\3\2\2\2\u0f86\u0f87\7\u0118\2\2\u0f87\u0f88"+
		"\7\u046d\2\2\u0f88\u0f89\7\u047c\2\2\u0f89\u0f8a\7\u046f\2\2\u0f8a\u0f8b"+
		"\7\u047c\2\2\u0f8b\u0f8c\7\u016f\2\2\u0f8c\u0f8d\7\u046d\2\2\u0f8d\u0f8e"+
		"\5\u0104\u0083\2\u0f8e\u0f8f\7\u046e\2\2\u0f8f\u0f94\7\u046e\2\2\u0f90"+
		"\u0f92\7\16\2\2\u0f91\u0f90\3\2\2\2\u0f91\u0f92\3\2\2\2\u0f92\u0f93\3"+
		"\2\2\2\u0f93\u0f95\5\u023a\u011e\2\u0f94\u0f91\3\2\2\2\u0f94\u0f95\3\2"+
		"\2\2\u0f95\u0103\3\2\2\2\u0f96\u0f9b\5\u0106\u0084\2\u0f97\u0f98\7\u046f"+
		"\2\2\u0f98\u0f9a\5\u0106\u0084\2\u0f99\u0f97\3\2\2\2\u0f9a\u0f9d\3\2\2"+
		"\2\u0f9b\u0f99\3\2\2\2\u0f9b\u0f9c\3\2\2\2\u0f9c\u0105\3\2\2\2\u0f9d\u0f9b"+
		"\3\2\2\2\u0f9e\u0faf\5\u0224\u0113\2\u0f9f\u0fa0\7C\2\2\u0fa0\u0fb0\7"+
		"\u011e\2\2\u0fa1\u0fad\5\u024e\u0128\2\u0fa2\u0fa3\7\u011f\2\2\u0fa3\u0fa5"+
		"\7\u047c\2\2\u0fa4\u0fa6\5\u0108\u0085\2\u0fa5\u0fa4\3\2\2\2\u0fa5\u0fa6"+
		"\3\2\2\2\u0fa6\u0fa8\3\2\2\2\u0fa7\u0fa9\5\u010a\u0086\2\u0fa8\u0fa7\3"+
		"\2\2\2\u0fa8\u0fa9\3\2\2\2\u0fa9\u0fae\3\2\2\2\u0faa\u0fab\7>\2\2\u0fab"+
		"\u0fac\7\u011f\2\2\u0fac\u0fae\7\u047c\2\2\u0fad\u0fa2\3\2\2\2\u0fad\u0faa"+
		"\3\2\2\2\u0fae\u0fb0\3\2\2\2\u0faf\u0f9f\3\2\2\2\u0faf\u0fa1\3\2\2\2\u0fb0"+
		"\u0fbc\3\2\2\2\u0fb1\u0fb3\7\u011d\2\2\u0fb2\u0fb4\7\u011f\2\2\u0fb3\u0fb2"+
		"\3\2\2\2\u0fb3\u0fb4\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5\u0fb6\7\u047c\2"+
		"\2\u0fb6\u0fb7\7\u016f\2\2\u0fb7\u0fb8\7\u046d\2\2\u0fb8\u0fb9\5\u0104"+
		"\u0083\2\u0fb9\u0fba\7\u046e\2\2\u0fba\u0fbc\3\2\2\2\u0fbb\u0f9e\3\2\2"+
		"\2\u0fbb\u0fb1\3\2\2\2\u0fbc\u0107\3\2\2\2\u0fbd\u0fc2\7v\2\2\u0fbe\u0fc2"+
		"\7\u019d\2\2\u0fbf\u0fc0\7,\2\2\u0fc0\u0fc2\5\u026c\u0137\2\u0fc1\u0fbd"+
		"\3\2\2\2\u0fc1\u0fbe\3\2\2\2\u0fc1\u0fbf\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3"+
		"\u0fc4\7x\2\2\u0fc4\u0fc5\79\2\2\u0fc5\u0109\3\2\2\2\u0fc6\u0fcb\7v\2"+
		"\2\u0fc7\u0fcb\7\u019d\2\2\u0fc8\u0fc9\7,\2\2\u0fc9\u0fcb\5\u026c\u0137"+
		"\2\u0fca\u0fc6\3\2\2\2\u0fca\u0fc7\3\2\2\2\u0fca\u0fc8\3\2\2\2\u0fcb\u0fcc"+
		"\3\2\2\2\u0fcc\u0fcd\7x\2\2\u0fcd\u0fce\7\u019d\2\2\u0fce\u010b\3\2\2"+
		"\2\u0fcf\u0fd8\t\66\2\2\u0fd0\u0fd8\7M\2\2\u0fd1\u0fd8\7\u00ad\2\2\u0fd2"+
		"\u0fd8\7\u00a8\2\2\u0fd3\u0fd8\7\u00a6\2\2\u0fd4\u0fd8\7\u0273\2\2\u0fd5"+
		"\u0fd8\t\67\2\2\u0fd6\u0fd8\7\u00a7\2\2\u0fd7\u0fcf\3\2\2\2\u0fd7\u0fd0"+
		"\3\2\2\2\u0fd7\u0fd1\3\2\2\2\u0fd7\u0fd2\3\2\2\2\u0fd7\u0fd3\3\2\2\2\u0fd7"+
		"\u0fd4\3\2\2\2\u0fd7\u0fd5\3\2\2\2\u0fd7\u0fd6\3\2\2\2\u0fd8\u010d\3\2"+
		"\2\2\u0fd9\u0fdc\7\u045d\2\2\u0fda\u0fdc\5\u0110\u0089\2\u0fdb\u0fd9\3"+
		"\2\2\2\u0fdb\u0fda\3\2\2\2\u0fdc\u0fe1\3\2\2\2\u0fdd\u0fde\7\u046f\2\2"+
		"\u0fde\u0fe0\5\u0110\u0089\2\u0fdf\u0fdd\3\2\2\2\u0fe0\u0fe3\3\2\2\2\u0fe1"+
		"\u0fdf\3\2\2\2\u0fe1\u0fe2\3\2\2\2\u0fe2\u010f\3\2\2\2\u0fe3\u0fe1\3\2"+
		"\2\2\u0fe4\u0fe5\5\u021e\u0110\2\u0fe5\u0fe6\7\u046c\2\2\u0fe6\u0fe7\7"+
		"\u045d\2\2\u0fe7\u1002\3\2\2\2\u0fe8\u0fed\5\u0224\u0113\2\u0fe9\u0feb"+
		"\7\16\2\2\u0fea\u0fe9\3\2\2\2\u0fea\u0feb\3\2\2\2\u0feb\u0fec\3\2\2\2"+
		"\u0fec\u0fee\5\u023a\u011e\2\u0fed\u0fea\3\2\2\2\u0fed\u0fee\3\2\2\2\u0fee"+
		"\u1002\3\2\2\2\u0fef\u0ff4\5\u027a\u013e\2\u0ff0\u0ff2\7\16\2\2\u0ff1"+
		"\u0ff0\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff3\3\2\2\2\u0ff3\u0ff5\5\u023a"+
		"\u011e\2\u0ff4\u0ff1\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u1002\3\2\2\2\u0ff6"+
		"\u0ff7\7\u0488\2\2\u0ff7\u0ff9\7\u0454\2\2\u0ff8\u0ff6\3\2\2\2\u0ff8\u0ff9"+
		"\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0fff\5\u02a2\u0152\2\u0ffb\u0ffd\7"+
		"\16\2\2\u0ffc\u0ffb\3\2\2\2\u0ffc\u0ffd\3\2\2\2\u0ffd\u0ffe\3\2\2\2\u0ffe"+
		"\u1000\5\u023a\u011e\2\u0fff\u0ffc\3\2\2\2\u0fff\u1000\3\2\2\2\u1000\u1002"+
		"\3\2\2\2\u1001\u0fe4\3\2\2\2\u1001\u0fe8\3\2\2\2\u1001\u0fef\3\2\2\2\u1001"+
		"\u0ff8\3\2\2\2\u1002\u0111\3\2\2\2\u1003\u1004\7Y\2\2\u1004\u1009\5\u00d0"+
		"i\2\u1005\u1006\7\u046f\2\2\u1006\u1008\5\u00d0i\2\u1007\u1005\3\2\2\2"+
		"\u1008\u100b\3\2\2\2\u1009\u1007\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u1028"+
		"\3\2\2\2\u100b\u1009\3\2\2\2\u100c\u100d\7Y\2\2\u100d\u100e\7\u0192\2"+
		"\2\u100e\u1028\7\u047c\2\2\u100f\u1010\7Y\2\2\u1010\u1011\7\u0081\2\2"+
		"\u1011\u1015\7\u047c\2\2\u1012\u1013\7\33\2\2\u1013\u1014\7\u009b\2\2"+
		"\u1014\u1016\5\u022c\u0117\2\u1015\u1012\3\2\2\2\u1015\u1016\3\2\2\2\u1016"+
		"\u101d\3\2\2\2\u1017\u1019\t+\2\2\u1018\u101a\5\u0114\u008b\2\u1019\u1018"+
		"\3\2\2\2\u101a\u101b\3\2\2\2\u101b\u1019\3\2\2\2\u101b\u101c\3\2\2\2\u101c"+
		"\u101e\3\2\2\2\u101d\u1017\3\2\2\2\u101d\u101e\3\2\2\2\u101e\u1025\3\2"+
		"\2\2\u101f\u1021\7g\2\2\u1020\u1022\5\u0116\u008c\2\u1021\u1020\3\2\2"+
		"\2\u1022\u1023\3\2\2\2\u1023\u1021\3\2\2\2\u1023\u1024\3\2\2\2\u1024\u1026"+
		"\3\2\2\2\u1025\u101f\3\2\2\2\u1025\u1026\3\2\2\2\u1026\u1028\3\2\2\2\u1027"+
		"\u1003\3\2\2\2\u1027\u100c\3\2\2\2\u1027\u100f\3\2\2\2\u1028\u0113\3\2"+
		"\2\2\u1029\u102a\7\u00af\2\2\u102a\u102b\7\25\2\2\u102b\u1036\7\u047c"+
		"\2\2\u102c\u102e\7|\2\2\u102d\u102c\3\2\2\2\u102d\u102e\3\2\2\2\u102e"+
		"\u102f\3\2\2\2\u102f\u1030\7:\2\2\u1030\u1031\7\25\2\2\u1031\u1036\7\u047c"+
		"\2\2\u1032\u1033\7<\2\2\u1033\u1034\7\25\2\2\u1034\u1036\7\u047c\2\2\u1035"+
		"\u1029\3\2\2\2\u1035\u102d\3\2\2\2\u1035\u1032\3\2\2\2\u1036\u0115\3\2"+
		"\2\2\u1037\u1038\7\u00ab\2\2\u1038\u1039\7\25\2\2\u1039\u103e\7\u047c"+
		"\2\2\u103a\u103b\7\u00af\2\2\u103b\u103c\7\25\2\2\u103c\u103e\7\u047c"+
		"\2\2\u103d\u1037\3\2\2\2\u103d\u103a\3\2\2\2\u103e\u0117\3\2\2\2\u103f"+
		"\u1040\7F\2\2\u1040\u1042\5\u00e8u\2\u1041\u103f\3\2\2\2\u1041\u1042\3"+
		"\2\2\2\u1042\u1045\3\2\2\2\u1043\u1044\7\u00c0\2\2\u1044\u1046\5\u02a2"+
		"\u0152\2\u1045\u1043\3\2\2\2\u1045\u1046\3\2\2\2\u1046\u0119\3\2\2\2\u1047"+
		"\u1048\7K\2\2\u1048\u1049\7\25\2\2\u1049\u104e\5\u0120\u0091\2\u104a\u104b"+
		"\7\u046f\2\2\u104b\u104d\5\u0120\u0091\2\u104c\u104a\3\2\2\2\u104d\u1050"+
		"\3\2\2\2\u104e\u104c\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u1053\3\2\2\2\u1050"+
		"\u104e\3\2\2\2\u1051\u1052\7\u00c2\2\2\u1052\u1054\7\u0258\2\2\u1053\u1051"+
		"\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u011b\3\2\2\2\u1055\u1056\7L\2\2\u1056"+
		"\u1057\5\u02a2\u0152\2\u1057\u011d\3\2\2\2\u1058\u1059\7\u02a6\2\2\u1059"+
		"\u105a\5\u028c\u0147\2\u105a\u105b\7\16\2\2\u105b\u105c\7\u046d\2\2\u105c"+
		"\u105d\5\u028a\u0146\2\u105d\u1067\7\u046e\2\2\u105e\u105f\7\u046f\2\2"+
		"\u105f\u1060\5\u028c\u0147\2\u1060\u1061\7\16\2\2\u1061\u1062\7\u046d"+
		"\2\2\u1062\u1063\5\u028a\u0146\2\u1063\u1064\7\u046e\2\2\u1064\u1066\3"+
		"\2\2\2\u1065\u105e\3\2\2\2\u1066\u1069\3\2\2\2\u1067\u1065\3\2\2\2\u1067"+
		"\u1068\3\2\2\2\u1068\u011f\3\2\2\2\u1069\u1067\3\2\2\2\u106a\u106c\5\u02a2"+
		"\u0152\2\u106b\u106d\t\62\2\2\u106c\u106b\3\2\2\2\u106c\u106d\3\2\2\2"+
		"\u106d\u0121\3\2\2\2\u106e\u1079\7e\2\2\u106f\u1070\5\u0124\u0093\2\u1070"+
		"\u1071\7\u046f\2\2\u1071\u1073\3\2\2\2\u1072\u106f\3\2\2\2\u1072\u1073"+
		"\3\2\2\2\u1073\u1074\3\2\2\2\u1074\u107a\5\u0124\u0093\2\u1075\u1076\5"+
		"\u0124\u0093\2\u1076\u1077\7\u0216\2\2\u1077\u1078\5\u0124\u0093\2\u1078"+
		"\u107a\3\2\2\2\u1079\u1072\3\2\2\2\u1079\u1075\3\2\2\2\u107a\u0123\3\2"+
		"\2\2\u107b\u107f\5\u0240\u0121\2\u107c\u107f\5\u022a\u0116\2\u107d\u107f"+
		"\5\u023c\u011f\2\u107e\u107b\3\2\2\2\u107e\u107c\3\2\2\2\u107e\u107d\3"+
		"\2\2\2\u107f\u0125\3\2\2\2\u1080\u1081\7\u0277\2\2\u1081\u108a\7\u028f"+
		"\2\2\u1082\u1087\5\u013c\u009f\2\u1083\u1084\7\u046f\2\2\u1084\u1086\5"+
		"\u013c\u009f\2\u1085\u1083\3\2\2\2\u1086\u1089\3\2\2\2\u1087\u1085\3\2"+
		"\2\2\u1087\u1088\3\2\2\2\u1088\u108b\3\2\2\2\u1089\u1087\3\2\2\2\u108a"+
		"\u1082\3\2\2\2\u108a\u108b\3\2\2\2\u108b\u0127\3\2\2\2\u108c\u108e\7\u015a"+
		"\2\2\u108d\u108f\7\u02a8\2\2\u108e\u108d\3\2\2\2\u108e\u108f\3\2\2\2\u108f"+
		"\u0129\3\2\2\2\u1090\u1092\7\u0173\2\2\u1091\u1093\7\u02a8\2\2\u1092\u1091"+
		"\3\2\2\2\u1092\u1093\3\2\2\2\u1093\u1099\3\2\2\2\u1094\u1096\7\f\2\2\u1095"+
		"\u1097\7\u020b\2\2\u1096\u1095\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u1098"+
		"\3\2\2\2\u1098\u109a\7\u0163\2\2\u1099\u1094\3\2\2\2\u1099\u109a\3\2\2"+
		"\2\u109a\u109f\3\2\2\2\u109b\u109d\7\u020b\2\2\u109c\u109b\3\2\2\2\u109c"+
		"\u109d\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u10a0\7\u008c\2\2\u109f\u109c"+
		"\3\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u012b\3\2\2\2\u10a1\u10a3\7\u0257\2"+
		"\2\u10a2\u10a4\7\u02a8\2\2\u10a3\u10a2\3\2\2\2\u10a3\u10a4\3\2\2\2\u10a4"+
		"\u10aa\3\2\2\2\u10a5\u10a7\7\f\2\2\u10a6\u10a8\7\u020b\2\2\u10a7\u10a6"+
		"\3\2\2\2\u10a7\u10a8\3\2\2\2\u10a8\u10a9\3\2\2\2\u10a9\u10ab\7\u0163\2"+
		"\2\u10aa\u10a5\3\2\2\2\u10aa\u10ab\3\2\2\2\u10ab\u10b0\3\2\2\2\u10ac\u10ae"+
		"\7\u020b\2\2\u10ad\u10ac\3\2\2\2\u10ad\u10ae\3\2\2\2\u10ae\u10af\3\2\2"+
		"\2\u10af\u10b1\7\u008c\2\2\u10b0\u10ad\3\2\2\2\u10b0\u10b1\3\2\2\2\u10b1"+
		"\u012d\3\2\2\2\u10b2\u10b3\7\u025e\2\2\u10b3\u10b4\5\u023a\u011e\2\u10b4"+
		"\u012f\3\2\2\2\u10b5\u10b7\7\u0257\2\2\u10b6\u10b8\7\u02a8\2\2\u10b7\u10b6"+
		"\3\2\2\2\u10b7\u10b8\3\2\2\2\u10b8\u10b9\3\2\2\2\u10b9\u10bb\7\u00b1\2"+
		"\2\u10ba\u10bc\7\u025e\2\2\u10bb\u10ba\3\2\2\2\u10bb\u10bc\3\2\2\2\u10bc"+
		"\u10bd\3\2\2\2\u10bd\u10be\5\u023a\u011e\2\u10be\u0131\3\2\2\2\u10bf\u10c0"+
		"\7\u008c\2\2\u10c0\u10c1\7\u025e\2\2\u10c1\u10c2\5\u023a\u011e\2\u10c2"+
		"\u0133\3\2\2\2\u10c3\u10c4\7i\2\2\u10c4\u10c5\t8\2\2\u10c5\u10ca\5\u013e"+
		"\u00a0\2\u10c6\u10c7\7\u046f\2\2\u10c7\u10c9\5\u013e\u00a0\2\u10c8\u10c6"+
		"\3\2\2\2\u10c9\u10cc\3\2\2\2\u10ca\u10c8\3\2\2\2\u10ca\u10cb\3\2\2\2\u10cb"+
		"\u10ce\3\2\2\2\u10cc\u10ca\3\2\2\2\u10cd\u10cf\5\u0278\u013d\2\u10ce\u10cd"+
		"\3\2\2\2\u10ce\u10cf\3\2\2\2\u10cf\u0135\3\2\2\2\u10d0\u10d1\7\u00b8\2"+
		"\2\u10d1\u10d2\7\u02e7\2\2\u10d2\u0137\3\2\2\2\u10d3\u10d4\7\u009b\2\2"+
		"\u10d4\u10d5\7\u0156\2\2\u10d5\u10d6\7\u0464\2\2\u10d6\u10d7\t\32\2\2"+
		"\u10d7\u0139\3\2\2\2\u10d8\u10da\7\u009b\2\2\u10d9\u10db\t9\2\2\u10da"+
		"\u10d9\3\2\2\2\u10da\u10db\3\2\2\2\u10db\u10dc\3\2\2\2\u10dc\u10dd\7\u028f"+
		"\2\2\u10dd\u10e2\5\u0142\u00a2\2\u10de\u10df\7\u046f\2\2\u10df\u10e1\5"+
		"\u0142\u00a2\2\u10e0\u10de\3\2\2\2\u10e1\u10e4\3\2\2\2\u10e2\u10e0\3\2"+
		"\2\2\u10e2\u10e3\3\2\2\2\u10e3\u013b\3\2\2\2\u10e4\u10e2\3\2\2\2\u10e5"+
		"\u10e6\7\u00c2\2\2\u10e6\u10e7\7\u017b\2\2\u10e7\u10ed\7\u026a\2\2\u10e8"+
		"\u10e9\7\u0088\2\2\u10e9\u10ed\7\u00c3\2\2\u10ea\u10eb\7\u0088\2\2\u10eb"+
		"\u10ed\7\u021c\2\2\u10ec\u10e5\3\2\2\2\u10ec\u10e8\3\2\2\2\u10ec\u10ea"+
		"\3\2\2\2\u10ed\u013d\3\2\2\2\u10ee\u10f3\5\u0220\u0111\2\u10ef\u10f1\7"+
		"\16\2\2\u10f0\u10ef\3\2\2\2\u10f0\u10f1\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2"+
		"\u10f4\5\u023a\u011e\2\u10f3\u10f0\3\2\2\2\u10f3\u10f4\3\2\2\2\u10f4\u10f5"+
		"\3\2\2\2\u10f5\u10f6\5\u0140\u00a1\2\u10f6\u013f\3\2\2\2\u10f7\u10f9\7"+
		"\u0088\2\2\u10f8\u10fa\7\u01dc\2\2\u10f9\u10f8\3\2\2\2\u10f9\u10fa\3\2"+
		"\2\2\u10fa\u1100\3\2\2\2\u10fb\u10fd\7l\2\2\u10fc\u10fb\3\2\2\2\u10fc"+
		"\u10fd\3\2\2\2\u10fd\u10fe\3\2\2\2\u10fe\u1100\7\u00c3\2\2\u10ff\u10f7"+
		"\3\2\2\2\u10ff\u10fc\3\2\2\2\u1100\u0141\3\2\2\2\u1101\u1102\7\u01d2\2"+
		"\2\u1102\u1103\7\u01da\2\2\u1103\u1109\5\u0144\u00a3\2\u1104\u1105\7\u0088"+
		"\2\2\u1105\u1109\7\u00c3\2\2\u1106\u1107\7\u0088\2\2\u1107\u1109\7\u021c"+
		"\2\2\u1108\u1101\3\2\2\2\u1108\u1104\3\2\2\2\u1108\u1106\3\2\2\2\u1109"+
		"\u0143\3\2\2\2\u110a\u110b\7\u0320\2\2\u110b\u1112\7\u0088\2\2\u110c\u110d"+
		"\7\u0088\2\2\u110d\u1112\7\u0321\2\2\u110e\u110f\7\u0088\2\2\u110f\u1112"+
		"\7\u0322\2\2\u1110\u1112\7\u0323\2\2\u1111\u110a\3\2\2\2\u1111\u110c\3"+
		"\2\2\2\u1111\u110e\3\2\2\2\u1111\u1110\3\2\2\2\u1112\u0145\3\2\2\2\u1113"+
		"\u1114\7\32\2\2\u1114\u1115\7\u01df\2\2\u1115\u1116\7\u00b1\2\2\u1116"+
		"\u111b\5\u0158\u00ad\2\u1117\u1118\7\u046f\2\2\u1118\u111a\5\u0158\u00ad"+
		"\2\u1119\u1117\3\2\2\2\u111a\u111d\3\2\2\2\u111b\u1119\3\2\2\2\u111b\u111c"+
		"\3\2\2\2\u111c\u111f\3\2\2\2\u111d\u111b\3\2\2\2\u111e\u1120\5\u0160\u00b1"+
		"\2\u111f\u111e\3\2\2\2\u111f\u1120\3\2\2\2\u1120\u0147\3\2\2\2\u1121\u1122"+
		"\7\32\2\2\u1122\u1123\7\u024e\2\2\u1123\u1124\7\u01af\2\2\u1124\u1129"+
		"\5\u0162\u00b2\2\u1125\u1126\7\u046f\2\2\u1126\u1128\5\u0162\u00b2\2\u1127"+
		"\u1125\3\2\2\2\u1128\u112b\3\2\2\2\u1129\u1127\3\2\2\2\u1129\u112a\3\2"+
		"\2\2\u112a\u0149\3\2\2\2\u112b\u1129\3\2\2\2\u112c\u112d\7\u0086\2\2\u112d"+
		"\u112e\t:\2\2\u112e\u1133\7\u01de\2\2\u112f\u1130\7\u00b1\2\2\u1130\u1134"+
		"\7\u047c\2\2\u1131\u1132\7\21\2\2\u1132\u1134\7\u047c\2\2\u1133\u112f"+
		"\3\2\2\2\u1133\u1131\3\2\2\2\u1134\u014b\3\2\2\2\u1135\u1136\7\u024f\2"+
		"\2\u1136\u1137\7\u01df\2\2\u1137\u014d\3\2\2\2\u1138\u1139\7\u024f\2\2"+
		"\u1139\u113b\7\u0268\2\2\u113a\u113c\7\b\2\2\u113b\u113a\3\2\2\2\u113b"+
		"\u113c\3\2\2\2\u113c\u113e\3\2\2\2\u113d\u113f\5\u0160\u00b1\2\u113e\u113d"+
		"\3\2\2\2\u113e\u113f\3\2\2\2\u113f\u014f\3\2\2\2\u1140\u1141\7\u0277\2"+
		"\2\u1141\u114a\7\u0268\2\2\u1142\u1147\5\u0166\u00b4\2\u1143\u1144\7\u046f"+
		"\2\2\u1144\u1146\5\u0166\u00b4\2\u1145\u1143\3\2\2\2\u1146\u1149\3\2\2"+
		"\2\u1147\u1145\3\2\2\2\u1147\u1148\3\2\2\2\u1148\u114b\3\2\2\2\u1149\u1147"+
		"\3\2\2\2\u114a\u1142\3\2\2\2\u114a\u114b\3\2\2\2\u114b\u114e\3\2\2\2\u114c"+
		"\u114d\7\u0299\2\2\u114d\u114f\5\u0168\u00b5\2\u114e\u114c\3\2\2\2\u114e"+
		"\u114f\3\2\2\2\u114f\u1153\3\2\2\2\u1150\u1152\5\u016a\u00b6\2\u1151\u1150"+
		"\3\2\2\2\u1152\u1155\3\2\2\2\u1153\u1151\3\2\2\2\u1153\u1154\3\2\2\2\u1154"+
		"\u1157\3\2\2\2\u1155\u1153\3\2\2\2\u1156\u1158\5\u0160\u00b1\2\u1157\u1156"+
		"\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u0151\3\2\2\2\u1159\u115a\7\u027d\2"+
		"\2\u115a\u1163\7\u0268\2\2\u115b\u1160\5\u0166\u00b4\2\u115c\u115d\7\u046f"+
		"\2\2\u115d\u115f\5\u0166\u00b4\2\u115e\u115c\3\2\2\2\u115f\u1162\3\2\2"+
		"\2\u1160\u115e\3\2\2\2\u1160\u1161\3\2\2\2\u1161\u1164\3\2\2\2\u1162\u1160"+
		"\3\2\2\2\u1163\u115b\3\2\2\2\u1163\u1164\3\2\2\2\u1164\u0153\3\2\2\2\u1165"+
		"\u1166\7\u0277\2\2\u1166\u1167\7\u01bb\2\2\u1167\u0155\3\2\2\2\u1168\u1169"+
		"\7\u027d\2\2\u1169\u116a\7\u01bb\2\2\u116a\u0157\3\2\2\2\u116b\u116c\5"+
		"\u015a\u00ae\2\u116c\u116d\7\u0464\2\2\u116d\u116e\7\u047c\2\2\u116e\u1189"+
		"\3\2\2\2\u116f\u1170\5\u015c\u00af\2\u1170\u1171\7\u0464\2\2\u1171\u1172"+
		"\5\u0240\u0121\2\u1172\u1189\3\2\2\2\u1173\u1174\5\u015e\u00b0\2\u1174"+
		"\u1175\7\u0464\2\2\u1175\u1176\t\32\2\2\u1176\u1189\3\2\2\2\u1177\u1178"+
		"\7\u01e3\2\2\u1178\u1179\7\u0464\2\2\u1179\u1189\7\u047f\2\2\u117a\u117b"+
		"\7\u01c3\2\2\u117b\u117c\7\u0464\2\2\u117c\u1185\7\u046d\2\2\u117d\u1182"+
		"\5\u023a\u011e\2\u117e\u117f\7\u046f\2\2\u117f\u1181\5\u023a\u011e\2\u1180"+
		"\u117e\3\2\2\2\u1181\u1184\3\2\2\2\u1182\u1180\3\2\2\2\u1182\u1183\3\2"+
		"\2\2\u1183\u1186\3\2\2\2\u1184\u1182\3\2\2\2\u1185\u117d\3\2\2\2\u1185"+
		"\u1186\3\2\2\2\u1186\u1187\3\2\2\2\u1187\u1189\7\u046e\2\2\u1188\u116b"+
		"\3\2\2\2\u1188\u116f\3\2\2\2\u1188\u1173\3\2\2\2\u1188\u1177\3\2\2\2\u1188"+
		"\u117a\3\2\2\2\u1189\u0159\3\2\2\2\u118a\u118b\t;\2\2\u118b\u015b\3\2"+
		"\2\2\u118c\u118d\t<\2\2\u118d\u015d\3\2\2\2\u118e\u118f\t=\2\2\u118f\u015f"+
		"\3\2\2\2\u1190\u1191\7C\2\2\u1191\u1192\7\u0165\2\2\u1192\u1193\7\u047c"+
		"\2\2\u1193\u0161\3\2\2\2\u1194\u1195\7\u0247\2\2\u1195\u1196\7\u0464\2"+
		"\2\u1196\u1197\7\u046d\2\2\u1197\u1198\5\u025a\u012e\2\u1198\u1199\7\u046e"+
		"\2\2\u1199\u11c6\3\2\2\2\u119a\u119b\7\u0249\2\2\u119b\u119c\7\u0464\2"+
		"\2\u119c\u119d\7\u046d\2\2\u119d\u119e\5\u025a\u012e\2\u119e\u119f\7\u046e"+
		"\2\2\u119f\u11c6\3\2\2\2\u11a0\u11a1\7\u0248\2\2\u11a1\u11a2\7\u0464\2"+
		"\2\u11a2\u11a3\7\u046d\2\2\u11a3\u11a4\5\u025e\u0130\2\u11a4\u11a5\7\u046e"+
		"\2\2\u11a5\u11c6\3\2\2\2\u11a6\u11a7\7\u024a\2\2\u11a7\u11a8\7\u0464\2"+
		"\2\u11a8\u11a9\7\u046d\2\2\u11a9\u11aa\5\u025e\u0130\2\u11aa\u11ab\7\u046e"+
		"\2\2\u11ab\u11c6\3\2\2\2\u11ac\u11ad\7\u024c\2\2\u11ad\u11ae\7\u0464\2"+
		"\2\u11ae\u11af\7\u046d\2\2\u11af\u11b0\5\u0268\u0135\2\u11b0\u11b1\7\u046e"+
		"\2\2\u11b1\u11c6\3\2\2\2\u11b2\u11b3\7\u024d\2\2\u11b3\u11b4\7\u0464\2"+
		"\2\u11b4\u11b5\7\u046d\2\2\u11b5\u11b6\5\u0268\u0135\2\u11b6\u11b7\7\u046e"+
		"\2\2\u11b7\u11c6\3\2\2\2\u11b8\u11b9\7\u024b\2\2\u11b9\u11ba\7\u0464\2"+
		"\2\u11ba\u11bb\7\u046d\2\2\u11bb\u11c0\5\u0164\u00b3\2\u11bc\u11bd\7\u046f"+
		"\2\2\u11bd\u11bf\5\u0164\u00b3\2\u11be\u11bc\3\2\2\2\u11bf\u11c2\3\2\2"+
		"\2\u11c0\u11be\3\2\2\2\u11c0\u11c1\3\2\2\2\u11c1\u11c3\3\2\2\2\u11c2\u11c0"+
		"\3\2\2\2\u11c3\u11c4\7\u046e\2\2\u11c4\u11c6\3\2\2\2\u11c5\u1194\3\2\2"+
		"\2\u11c5\u119a\3\2\2\2\u11c5\u11a0\3\2\2\2\u11c5\u11a6\3\2\2\2\u11c5\u11ac"+
		"\3\2\2\2\u11c5\u11b2\3\2\2\2\u11c5\u11b8\3\2\2\2\u11c6\u0163\3\2\2\2\u11c7"+
		"\u11c8\7\u046d\2\2\u11c8\u11c9\5\u0220\u0111\2\u11c9\u11ca\7\u046f\2\2"+
		"\u11ca\u11cb\5\u0220\u0111\2\u11cb\u11cc\7\u046e\2\2\u11cc\u0165\3\2\2"+
		"\2\u11cd\u11ce\t>\2\2\u11ce\u0167\3\2\2\2\u11cf\u11d0\t?\2\2\u11d0\u11d1"+
		"\7\u0464\2\2\u11d1\u11e2\5\u016c\u00b7\2\u11d2\u11d3\7\u01e5\2\2\u11d3"+
		"\u11d4\7\u0464\2\2\u11d4\u11d5\7\u047c\2\2\u11d5\u11d6\7\u046f\2\2\u11d6"+
		"\u11d7\7\u01e6\2\2\u11d7\u11d8\7\u0464\2\2\u11d8\u11e2\5\u0240\u0121\2"+
		"\u11d9\u11da\7\u0241\2\2\u11da\u11db\7\u0464\2\2\u11db\u11dc\7\u047c\2"+
		"\2\u11dc\u11dd\7\u046f\2\2\u11dd\u11de\7\u0242\2\2\u11de\u11df\7\u0464"+
		"\2\2\u11df\u11e2\5\u0240\u0121\2\u11e0\u11e2\7\u0271\2\2\u11e1\u11cf\3"+
		"\2\2\2\u11e1\u11d2\3\2\2\2\u11e1\u11d9\3\2\2\2\u11e1\u11e0\3\2\2\2\u11e2"+
		"\u0169\3\2\2\2\u11e3\u11e4\7\u029b\2\2\u11e4\u11e5\7\u0464\2\2\u11e5\u11f0"+
		"\7\u047c\2\2\u11e6\u11e7\7\u0229\2\2\u11e7\u11e8\7\u0464\2\2\u11e8\u11f0"+
		"\7\u047c\2\2\u11e9\u11ea\7\u0189\2\2\u11ea\u11eb\7\u0464\2\2\u11eb\u11f0"+
		"\7\u047c\2\2\u11ec\u11ed\7\u022d\2\2\u11ed\u11ee\7\u0464\2\2\u11ee\u11f0"+
		"\7\u047c\2\2\u11ef\u11e3\3\2\2\2\u11ef\u11e6\3\2\2\2\u11ef\u11e9\3\2\2"+
		"\2\u11ef\u11ec\3\2\2\2\u11f0\u016b\3\2\2\2\u11f1\u11f6\5\u0232\u011a\2"+
		"\u11f2\u11f3\7\u046f\2\2\u11f3\u11f5\5\u0232\u011a\2\u11f4\u11f2\3\2\2"+
		"\2\u11f5\u11f8\3\2\2\2\u11f6\u11f4\3\2\2\2\u11f6\u11f7\3\2\2\2\u11f7\u11fb"+
		"\3\2\2\2\u11f8\u11f6\3\2\2\2\u11f9\u11fb\7\u047c\2\2\u11fa\u11f1\3\2\2"+
		"\2\u11fa\u11f9\3\2\2\2\u11fb\u016d\3\2\2\2\u11fc\u11fd\7\u02ab\2\2\u11fd"+
		"\u11fe\t@\2\2\u11fe\u1200\5\u0234\u011b\2\u11ff\u1201\tA\2\2\u1200\u11ff"+
		"\3\2\2\2\u1200\u1201\3\2\2\2\u1201\u016f\3\2\2\2\u1202\u1203\7\u02ab\2"+
		"\2\u1203\u1204\7\u0199\2\2\u1204\u120a\5\u0234\u011b\2\u1205\u1208\7\u0285"+
		"\2\2\u1206\u1207\7C\2\2\u1207\u1209\7\u01ff\2\2\u1208\u1206\3\2\2\2\u1208"+
		"\u1209\3\2\2\2\u1209\u120b\3\2\2\2\u120a\u1205\3\2\2\2\u120a\u120b\3\2"+
		"\2\2\u120b\u0171\3\2\2\2\u120c\u120d\7\u02ab\2\2\u120d\u120e\7\u0232\2"+
		"\2\u120e\u120f\5\u0234\u011b\2\u120f\u0173\3\2\2\2\u1210\u1211\7\u02ab"+
		"\2\2\u1211\u1212\7\u0173\2\2\u1212\u1215\5\u0234\u011b\2\u1213\u1214\7"+
		"\u021a\2\2\u1214\u1216\7\u022b\2\2\u1215\u1213\3\2\2\2\u1215\u1216\3\2"+
		"\2\2\u1216\u0175\3\2\2\2\u1217\u1218\7\u02ab\2\2\u1218\u1219\7\u0257\2"+
		"\2\u1219\u121a\5\u0234\u011b\2\u121a\u0177\3\2\2\2\u121b\u121c\7\u02ab"+
		"\2\2\u121c\u121f\7\u023c\2\2\u121d\u121e\7\"\2\2\u121e\u1220\5\u0234\u011b"+
		"\2\u121f\u121d\3\2\2\2\u121f\u1220\3\2\2\2\u1220\u0179\3\2\2\2\u1221\u1222"+
		"\7\u0232\2\2\u1222\u1223\5\u023a\u011e\2\u1223\u1226\7F\2\2\u1224\u1227"+
		"\7\u047c\2\2\u1225\u1227\7\u0488\2\2\u1226\u1224\3\2\2\2\u1226\u1225\3"+
		"\2\2\2\u1227\u017b\3\2\2\2\u1228\u1229\7\u02c5\2\2\u1229\u122c\5\u023a"+
		"\u011e\2\u122a\u122b\7\u00bd\2\2\u122b\u122d\5\u026a\u0136\2\u122c\u122a"+
		"\3\2\2\2\u122c\u122d\3\2\2\2\u122d\u017d\3\2\2\2\u122e\u122f\tB\2\2\u122f"+
		"\u1230\7\u0232\2\2\u1230\u1231\5\u023a\u011e\2\u1231\u017f\3\2\2\2\u1232"+
		"\u1235\5\u0182\u00c2\2\u1233\u1235\5\6\4\2\u1234\u1232\3\2\2\2\u1234\u1233"+
		"\3\2\2\2\u1235\u0181\3\2\2\2\u1236\u1237\5\u023a\u011e\2\u1237\u1238\7"+
		"\u0478\2\2\u1238\u123a\3\2\2\2\u1239\u1236\3\2\2\2\u1239\u123a\3\2\2\2"+
		"\u123a\u123b\3\2\2\2\u123b\u1241\7\u015a\2\2\u123c\u123d\5\u0196\u00cc"+
		"\2\u123d\u123e\7\u0470\2\2\u123e\u1240\3\2\2\2\u123f\u123c\3\2\2\2\u1240"+
		"\u1243\3\2\2\2\u1241\u123f\3\2\2\2\u1241\u1242\3\2\2\2\u1242\u1249\3\2"+
		"\2\2\u1243\u1241\3\2\2\2\u1244\u1245\5\u0198\u00cd\2\u1245\u1246\7\u0470"+
		"\2\2\u1246\u1248\3\2\2\2\u1247\u1244\3\2\2\2\u1248\u124b\3\2\2\2\u1249"+
		"\u1247\3\2\2\2\u1249\u124a\3\2\2\2\u124a\u1251\3\2\2\2\u124b\u1249\3\2"+
		"\2\2\u124c\u124d\5\u019a\u00ce\2\u124d\u124e\7\u0470\2\2\u124e\u1250\3"+
		"\2\2\2\u124f\u124c\3\2\2\2\u1250\u1253\3\2\2\2\u1251\u124f\3\2\2\2\u1251"+
		"\u1252\3\2\2\2\u1252\u1259\3\2\2\2\u1253\u1251\3\2\2\2\u1254\u1255\5\u019c"+
		"\u00cf\2\u1255\u1256\7\u0470\2\2\u1256\u1258\3\2\2\2\u1257\u1254\3\2\2"+
		"\2\u1258\u125b\3\2\2\2\u1259\u1257\3\2\2\2\u1259\u125a\3\2\2\2\u125a\u125f"+
		"\3\2\2\2\u125b\u1259\3\2\2\2\u125c\u125e\5\u01a0\u00d1\2\u125d\u125c\3"+
		"\2\2\2\u125e\u1261\3\2\2\2\u125f\u125d\3\2\2\2\u125f\u1260\3\2\2\2\u1260"+
		"\u1262\3\2\2\2\u1261\u125f\3\2\2\2\u1262\u1264\7\u0199\2\2\u1263\u1265"+
		"\5\u023a\u011e\2\u1264\u1263\3\2\2\2\u1264\u1265\3\2\2\2\u1265\u0183\3"+
		"\2\2\2\u1266\u1269\7\30\2\2\u1267\u126a\5\u023a\u011e\2\u1268\u126a\5"+
		"\u02a2\u0152\2\u1269\u1267\3\2\2\2\u1269\u1268\3\2\2\2\u1269\u126a\3\2"+
		"\2\2\u126a\u126c\3\2\2\2\u126b\u126d\5\u01a2\u00d2\2\u126c\u126b\3\2\2"+
		"\2\u126d\u126e\3\2\2\2\u126e\u126c\3\2\2\2\u126e\u126f\3\2\2\2\u126f\u1276"+
		"\3\2\2\2\u1270\u1272\7\67\2\2\u1271\u1273\5\u01a0\u00d1\2\u1272\u1271"+
		"\3\2\2\2\u1273\u1274\3\2\2\2\u1274\u1272\3\2\2\2\u1274\u1275\3\2\2\2\u1275"+
		"\u1277\3\2\2\2\u1276\u1270\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u1278\3\2"+
		"\2\2\u1278\u1279\7\u0199\2\2\u1279\u127a\7\30\2\2\u127a\u0185\3\2\2\2"+
		"\u127b\u127c\7O\2\2\u127c\u127d\5\u02a2\u0152\2\u127d\u127f\7\u00b0\2"+
		"\2\u127e\u1280\5\u01a0\u00d1\2\u127f\u127e\3\2\2\2\u1280\u1281\3\2\2\2"+
		"\u1281\u127f\3\2\2\2\u1281\u1282\3\2\2\2\u1282\u1286\3\2\2\2\u1283\u1285"+
		"\5\u01a4\u00d3\2\u1284\u1283\3\2\2\2\u1285\u1288\3\2\2\2\u1286\u1284\3"+
		"\2\2\2\u1286\u1287\3\2\2\2\u1287\u128f\3\2\2\2\u1288\u1286\3\2\2\2\u1289"+
		"\u128b\7\67\2\2\u128a\u128c\5\u01a0\u00d1\2\u128b\u128a\3\2\2\2\u128c"+
		"\u128d\3\2\2\2\u128d\u128b\3\2\2\2\u128d\u128e\3\2\2\2\u128e\u1290\3\2"+
		"\2\2\u128f\u1289\3\2\2\2\u128f\u1290\3\2\2\2\u1290\u1291\3\2\2\2\u1291"+
		"\u1292\7\u0199\2\2\u1292\u1293\7O\2\2\u1293\u0187\3\2\2\2\u1294\u1295"+
		"\7[\2\2\u1295\u1296\5\u023a\u011e\2\u1296\u0189\3\2\2\2\u1297\u1298\7"+
		"b\2\2\u1298\u1299\5\u023a\u011e\2\u1299\u018b\3\2\2\2\u129a\u129b\5\u023a"+
		"\u011e\2\u129b\u129c\7\u0478\2\2\u129c\u129e\3\2\2\2\u129d\u129a\3\2\2"+
		"\2\u129d\u129e\3\2\2\2\u129e\u129f\3\2\2\2\u129f\u12a1\7k\2\2\u12a0\u12a2"+
		"\5\u01a0\u00d1\2\u12a1\u12a0\3\2\2\2\u12a2\u12a3\3\2\2\2\u12a3\u12a1\3"+
		"\2\2\2\u12a3\u12a4\3\2\2\2\u12a4\u12a5\3\2\2\2\u12a5\u12a6\7\u0199\2\2"+
		"\u12a6\u12a8\7k\2\2\u12a7\u12a9\5\u023a\u011e\2\u12a8\u12a7\3\2\2\2\u12a8"+
		"\u12a9\3\2\2\2\u12a9\u018d\3\2\2\2\u12aa\u12ab\5\u023a\u011e\2\u12ab\u12ac"+
		"\7\u0478\2\2\u12ac\u12ae\3\2\2\2\u12ad\u12aa\3\2\2\2\u12ad\u12ae\3\2\2"+
		"\2\u12ae\u12af\3\2\2\2\u12af\u12b1\7\u008e\2\2\u12b0\u12b2\5\u01a0\u00d1"+
		"\2\u12b1\u12b0\3\2\2\2\u12b2\u12b3\3\2\2\2\u12b3\u12b1\3\2\2\2\u12b3\u12b4"+
		"\3\2\2\2\u12b4\u12b5\3\2\2\2\u12b5\u12b6\7\u0299\2\2\u12b6\u12b7\5\u02a2"+
		"\u0152\2\u12b7\u12b8\7\u0199\2\2\u12b8\u12ba\7\u008e\2\2\u12b9\u12bb\5"+
		"\u023a\u011e\2\u12ba\u12b9\3\2\2\2\u12ba\u12bb\3\2\2\2\u12bb\u018f\3\2"+
		"\2\2\u12bc\u12bd\7\u0094\2\2\u12bd\u12be\5\u02a2\u0152\2\u12be\u0191\3"+
		"\2\2\2\u12bf\u12c0\5\u023a\u011e\2\u12c0\u12c1\7\u0478\2\2\u12c1\u12c3"+
		"\3\2\2\2\u12c2\u12bf\3\2\2\2\u12c2\u12c3\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4"+
		"\u12c5\7\u00c1\2\2\u12c5\u12c6\5\u02a2\u0152\2\u12c6\u12c8\7\u0191\2\2"+
		"\u12c7\u12c9\5\u01a0\u00d1\2\u12c8\u12c7\3\2\2\2\u12c9\u12ca\3\2\2\2\u12ca"+
		"\u12c8\3\2\2\2\u12ca\u12cb\3\2\2\2\u12cb\u12cc\3\2\2\2\u12cc\u12cd\7\u0199"+
		"\2\2\u12cd\u12cf\7\u00c1\2\2\u12ce\u12d0\5\u023a\u011e\2\u12cf\u12ce\3"+
		"\2\2\2\u12cf\u12d0\3\2\2\2\u12d0\u0193\3\2\2\2\u12d1\u12d2\7\u016b\2\2"+
		"\u12d2\u12e1\5\u023a\u011e\2\u12d3\u12d8\7B\2\2\u12d4\u12d6\7\u020a\2"+
		"\2\u12d5\u12d4\3\2\2\2\u12d5\u12d6\3\2\2\2\u12d6\u12d7\3\2\2\2\u12d7\u12d9"+
		"\7F\2\2\u12d8\u12d5\3\2\2\2\u12d8\u12d9\3\2\2\2\u12d9\u12da\3\2\2\2\u12da"+
		"\u12db\5\u023a\u011e\2\u12db\u12dc\7Y\2\2\u12dc\u12dd\5\u025a\u012e\2"+
		"\u12dd\u12e1\3\2\2\2\u12de\u12df\7\u021d\2\2\u12df\u12e1\5\u023a\u011e"+
		"\2\u12e0\u12d1\3\2\2\2\u12e0\u12d3\3\2\2\2\u12e0\u12de\3\2\2\2\u12e1\u0195"+
		"\3\2\2\2\u12e2\u12e3\7+\2\2\u12e3\u12e4\5\u025a\u012e\2\u12e4\u12e7\5"+
		"\u024e\u0128\2\u12e5\u12e6\7,\2\2\u12e6\u12e8\5\u02a2\u0152\2\u12e7\u12e5"+
		"\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u0197\3\2\2\2\u12e9\u12ea\7+\2\2\u12ea"+
		"\u12eb\5\u023a\u011e\2\u12eb\u12ec\7\37\2\2\u12ec\u12f3\7C\2\2\u12ed\u12f4"+
		"\5\u0240\u0121\2\u12ee\u12f0\7\u00a4\2\2\u12ef\u12f1\7\u029f\2\2\u12f0"+
		"\u12ef\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u12f2\3\2\2\2\u12f2\u12f4\7\u047c"+
		"\2\2\u12f3\u12ed\3\2\2\2\u12f3\u12ee\3\2\2\2\u12f4\u0199\3\2\2\2\u12f5"+
		"\u12f6\7+\2\2\u12f6\u12f7\5\u023a\u011e\2\u12f7\u12f8\7(\2\2\u12f8\u12f9"+
		"\7C\2\2\u12f9\u12fa\5\u00c6d\2\u12fa\u019b\3\2\2\2\u12fb\u12fc\7+\2\2"+
		"\u12fc\u12fd\tC\2\2\u12fd\u12fe\7\u01bc\2\2\u12fe\u12ff\7C\2\2\u12ff\u1304"+
		"\5\u019e\u00d0\2\u1300\u1301\7\u046f\2\2\u1301\u1303\5\u019e\u00d0\2\u1302"+
		"\u1300\3\2\2\2\u1303\u1306\3\2\2\2\u1304\u1302\3\2\2\2\u1304\u1305\3\2"+
		"\2\2\u1305\u1307\3\2\2\2\u1306\u1304\3\2\2\2\u1307\u1308\5\u0180\u00c1"+
		"\2\u1308\u019d\3\2\2\2\u1309\u1315\5\u0240\u0121\2\u130a\u130c\7\u00a4"+
		"\2\2\u130b\u130d\7\u029f\2\2\u130c\u130b\3\2\2\2\u130c\u130d\3\2\2\2\u130d"+
		"\u130e\3\2\2\2\u130e\u1315\7\u047c\2\2\u130f\u1315\5\u023a\u011e\2\u1310"+
		"\u1315\7\u00a5\2\2\u1311\u1312\7t\2\2\u1312\u1315\7\u01b5\2\2\u1313\u1315"+
		"\7\u00a3\2\2\u1314\u1309\3\2\2\2\u1314\u130a\3\2\2\2\u1314\u130f\3\2\2"+
		"\2\u1314\u1310\3\2\2\2\u1314\u1311\3\2\2\2\u1314\u1313\3\2\2\2\u1315\u019f"+
		"\3\2\2\2\u1316\u1319\5\24\13\2\u1317\u1319\5\6\4\2\u1318\u1316\3\2\2\2"+
		"\u1318\u1317\3\2\2\2\u1319\u131a\3\2\2\2\u131a\u131b\7\u0470\2\2\u131b"+
		"\u01a1\3\2\2\2\u131c\u131f\7\u00bf\2\2\u131d\u1320\5\u024c\u0127\2\u131e"+
		"\u1320\5\u02a2\u0152\2\u131f\u131d\3\2\2\2\u131f\u131e\3\2\2\2\u1320\u1321"+
		"\3\2\2\2\u1321\u1323\7\u00b0\2\2\u1322\u1324\5\u01a0\u00d1\2\u1323\u1322"+
		"\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u1323\3\2\2\2\u1325\u1326\3\2\2\2\u1326"+
		"\u01a3\3\2\2\2\u1327\u1328\78\2\2\u1328\u1329\5\u02a2\u0152\2\u1329\u132b"+
		"\7\u00b0\2\2\u132a\u132c\5\u01a0\u00d1\2\u132b\u132a\3\2\2\2\u132c\u132d"+
		"\3\2\2\2\u132d\u132b\3\2\2\2\u132d\u132e\3\2\2\2\u132e\u01a5\3\2\2\2\u132f"+
		"\u1330\7\t\2\2\u1330\u1331\7\u029b\2\2\u1331\u1336\5\u01ba\u00de\2\u1332"+
		"\u1333\7\u046f\2\2\u1333\u1335\5\u01ba\u00de\2\u1334\u1332\3\2\2\2\u1335"+
		"\u1338\3\2\2\2\u1336\u1334\3\2\2\2\u1336\u1337\3\2\2\2\u1337\u1379\3\2"+
		"\2\2\u1338\u1336\3\2\2\2\u1339\u133a\7\t\2\2\u133a\u133c\7\u029b\2\2\u133b"+
		"\u133d\5\u0272\u013a\2\u133c\u133b\3\2\2\2\u133c\u133d\3\2\2\2\u133d\u133e"+
		"\3\2\2\2\u133e\u1343\5\u01bc\u00df\2\u133f\u1340\7\u046f\2\2\u1340\u1342"+
		"\5\u01bc\u00df\2\u1341\u133f\3\2\2\2\u1342\u1345\3\2\2\2\u1343\u1341\3"+
		"\2\2\2\u1343\u1344\3\2\2\2\u1344\u1354\3\2\2\2\u1345\u1343\3\2\2\2\u1346"+
		"\u1352\7\u0090\2\2\u1347\u1353\7\u0213\2\2\u1348\u134f\5\u01c0\u00e1\2"+
		"\u1349\u134b\7\f\2\2\u134a\u1349\3\2\2\2\u134a\u134b\3\2\2\2\u134b\u134c"+
		"\3\2\2\2\u134c\u134e\5\u01c0\u00e1\2\u134d\u134a\3\2\2\2\u134e\u1351\3"+
		"\2\2\2\u134f\u134d\3\2\2\2\u134f\u1350\3\2\2\2\u1350\u1353\3\2\2\2\u1351"+
		"\u134f\3\2\2\2\u1352\u1347\3\2\2\2\u1352\u1348\3\2\2\2\u1353\u1355\3\2"+
		"\2\2\u1354\u1346\3\2\2\2\u1354\u1355\3\2\2\2\u1355\u135c\3\2\2\2\u1356"+
		"\u1358\7\u00c2\2\2\u1357\u1359\5\u01c2\u00e2\2\u1358\u1357\3\2\2\2\u1359"+
		"\u135a\3\2\2\2\u135a\u1358\3\2\2\2\u135a\u135b\3\2\2\2\u135b\u135d\3\2"+
		"\2\2\u135c\u1356\3\2\2\2\u135c\u135d\3\2\2\2\u135d\u1362\3\2\2\2\u135e"+
		"\u1361\5\u01c4\u00e3\2\u135f\u1361\5\u01c6\u00e4\2\u1360\u135e\3\2\2\2"+
		"\u1360\u135f\3\2\2\2\u1361\u1364\3\2\2\2\u1362\u1360\3\2\2\2\u1362\u1363"+
		"\3\2\2\2\u1363\u1369\3\2\2\2\u1364\u1362\3\2\2\2\u1365\u1366\7\u0172\2"+
		"\2\u1366\u136a\7\u047c\2\2\u1367\u1368\7\20\2\2\u1368\u136a\7\u047c\2"+
		"\2\u1369\u1365\3\2\2\2\u1369\u1367\3\2\2\2\u1369\u136a\3\2\2\2\u136a\u1379"+
		"\3\2\2\2\u136b\u136c\7\t\2\2\u136c\u136e\7\u029b\2\2\u136d\u136f\5\u0272"+
		"\u013a\2\u136e\u136d\3\2\2\2\u136e\u136f\3\2\2\2\u136f\u1372\3\2\2\2\u1370"+
		"\u1373\5\u0228\u0115\2\u1371\u1373\5\u023a\u011e\2\u1372\u1370\3\2\2\2"+
		"\u1372\u1371\3\2\2\2\u1373\u1374\3\2\2\2\u1374\u1375\7,\2\2\u1375\u1376"+
		"\7\u0256\2\2\u1376\u1377\5\u01ae\u00d8\2\u1377\u1379\3\2\2\2\u1378\u132f"+
		"\3\2\2\2\u1378\u1339\3\2\2\2\u1378\u136b\3\2\2\2\u1379\u01a7\3\2\2\2\u137a"+
		"\u137b\7#\2\2\u137b\u137c\7\u029b\2\2\u137c\u1381\5\u01bc\u00df\2\u137d"+
		"\u137e\7\u046f\2\2\u137e\u1380\5\u01bc\u00df\2\u137f\u137d\3\2\2\2\u1380"+
		"\u1383\3\2\2\2\u1381\u137f\3\2\2\2\u1381\u1382\3\2\2\2\u1382\u13bc\3\2"+
		"\2\2\u1383\u1381\3\2\2\2\u1384\u1385\7#\2\2\u1385\u1387\7\u029b\2\2\u1386"+
		"\u1388\5\u0274\u013b\2\u1387\u1386\3\2\2\2\u1387\u1388\3\2\2\2\u1388\u1389"+
		"\3\2\2\2\u1389\u138e\5\u01bc\u00df\2\u138a\u138b\7\u046f\2\2\u138b\u138d"+
		"\5\u01bc\u00df\2\u138c\u138a\3\2\2\2\u138d\u1390\3\2\2\2\u138e\u138c\3"+
		"\2\2\2\u138e\u138f\3\2\2\2\u138f\u1394\3\2\2\2\u1390\u138e\3\2\2\2\u1391"+
		"\u1392\7,\2\2\u1392\u1393\7\u0256\2\2\u1393\u1395\5\u01ae\u00d8\2\u1394"+
		"\u1391\3\2\2\2\u1394\u1395\3\2\2\2\u1395\u13a4\3\2\2\2\u1396\u13a2\7\u0090"+
		"\2\2\u1397\u13a3\7\u0213\2\2\u1398\u139f\5\u01c0\u00e1\2\u1399\u139b\7"+
		"\f\2\2\u139a\u1399\3\2\2\2\u139a\u139b\3\2\2\2\u139b\u139c\3\2\2\2\u139c"+
		"\u139e\5\u01c0\u00e1\2\u139d\u139a\3\2\2\2\u139e\u13a1\3\2\2\2\u139f\u139d"+
		"\3\2\2\2\u139f\u13a0\3\2\2\2\u13a0\u13a3\3\2\2\2\u13a1\u139f\3\2\2\2\u13a2"+
		"\u1397\3\2\2\2\u13a2\u1398\3\2\2\2\u13a3\u13a5\3\2\2\2\u13a4\u1396\3\2"+
		"\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13ac\3\2\2\2\u13a6\u13a8\7\u00c2\2\2\u13a7"+
		"\u13a9\5\u01c2\u00e2\2\u13a8\u13a7\3\2\2\2\u13a9\u13aa\3\2\2\2\u13aa\u13a8"+
		"\3\2\2\2\u13aa\u13ab\3\2\2\2\u13ab\u13ad\3\2\2\2\u13ac\u13a6\3\2\2\2\u13ac"+
		"\u13ad\3\2\2\2\u13ad\u13b2\3\2\2\2\u13ae\u13b1\5\u01c4\u00e3\2\u13af\u13b1"+
		"\5\u01c6\u00e4\2\u13b0\u13ae\3\2\2\2\u13b0\u13af\3\2\2\2\u13b1\u13b4\3"+
		"\2\2\2\u13b2\u13b0\3\2\2\2\u13b2\u13b3\3\2\2\2\u13b3\u13b9\3\2\2\2\u13b4"+
		"\u13b2\3\2\2\2\u13b5\u13b6\7\u0172\2\2\u13b6\u13ba\7\u047c\2\2\u13b7\u13b8"+
		"\7\20\2\2\u13b8\u13ba\7\u047c\2\2\u13b9\u13b5\3\2\2\2\u13b9\u13b7\3\2"+
		"\2\2\u13b9\u13ba\3\2\2\2\u13ba\u13bc\3\2\2\2\u13bb\u137a\3\2\2\2\u13bb"+
		"\u1384\3\2\2\2\u13bc\u01a9\3\2\2\2\u13bd\u13be\7\65\2\2\u13be\u13c0\7"+
		"\u029b\2\2\u13bf\u13c1\5\u0272\u013a\2\u13c0\u13bf\3\2\2\2\u13c0\u13c1"+
		"\3\2\2\2\u13c1\u13c2\3\2\2\2\u13c2\u13c7\5\u0228\u0115\2\u13c3\u13c4\7"+
		"\u046f\2\2\u13c4\u13c6\5\u0228\u0115\2\u13c5\u13c3\3\2\2\2\u13c6\u13c9"+
		"\3\2\2\2\u13c7\u13c5\3\2\2\2\u13c7\u13c8\3\2\2\2\u13c8\u01ab\3\2\2\2\u13c9"+
		"\u13c7\3\2\2\2\u13ca\u13cb\7J\2\2\u13cb\u13d0\5\u01c8\u00e5\2\u13cc\u13cd"+
		"\7\u046f\2\2\u13cd\u13cf\5\u01c8\u00e5\2\u13ce\u13cc\3\2\2\2\u13cf\u13d2"+
		"\3\2\2\2\u13d0\u13ce\3\2\2\2\u13d0\u13d1\3\2\2\2\u13d1\u13d3\3\2\2\2\u13d2"+
		"\u13d0\3\2\2\2\u13d3\u13d5\7x\2\2\u13d4\u13d6\tD\2\2\u13d5\u13d4\3\2\2"+
		"\2\u13d5\u13d6\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7\u13d8\5\u01cc\u00e7\2"+
		"\u13d8\u13d9\7\u00b1\2\2\u13d9\u13de\5\u01bc\u00df\2\u13da\u13db\7\u046f"+
		"\2\2\u13db\u13dd\5\u01bc\u00df\2\u13dc\u13da\3\2\2\2\u13dd\u13e0\3\2\2"+
		"\2\u13de\u13dc\3\2\2\2\u13de\u13df\3\2\2\2\u13df\u13ef\3\2\2\2\u13e0\u13de"+
		"\3\2\2\2\u13e1\u13ed\7\u0090\2\2\u13e2\u13ee\7\u0213\2\2\u13e3\u13ea\5"+
		"\u01c0\u00e1\2\u13e4\u13e6\7\f\2\2\u13e5\u13e4\3\2\2\2\u13e5\u13e6\3\2"+
		"\2\2\u13e6\u13e7\3\2\2\2\u13e7\u13e9\5\u01c0\u00e1\2\u13e8\u13e5\3\2\2"+
		"\2\u13e9\u13ec\3\2\2\2\u13ea\u13e8\3\2\2\2\u13ea\u13eb\3\2\2\2\u13eb\u13ee"+
		"\3\2\2\2\u13ec\u13ea\3\2\2\2\u13ed\u13e2\3\2\2\2\u13ed\u13e3\3\2\2\2\u13ee"+
		"\u13f0\3\2\2\2\u13ef\u13e1\3\2\2\2\u13ef\u13f0\3\2\2\2\u13f0\u13fa\3\2"+
		"\2\2\u13f1\u13f7\7\u00c2\2\2\u13f2\u13f3\7J\2\2\u13f3\u13f6\7z\2\2\u13f4"+
		"\u13f6\5\u01c2\u00e2\2\u13f5\u13f2\3\2\2\2\u13f5\u13f4\3\2\2\2\u13f6\u13f9"+
		"\3\2\2\2\u13f7\u13f5\3\2\2\2\u13f7\u13f8\3\2\2\2\u13f8\u13fb\3\2\2\2\u13f9"+
		"\u13f7\3\2\2\2\u13fa\u13f1\3\2\2\2\u13fa\u13fb\3\2\2\2\u13fb\u1402\3\2"+
		"\2\2\u13fc\u13fd\7\16\2\2\u13fd\u13fe\5\u0228\u0115\2\u13fe\u13ff\7\u00c2"+
		"\2\2\u13ff\u1400\7\u0256\2\2\u1400\u1401\5\u01ae\u00d8\2\u1401\u1403\3"+
		"\2\2\2\u1402\u13fc\3\2\2\2\u1402\u1403\3\2\2\2\u1403\u1428\3\2\2\2\u1404"+
		"\u1407\7J\2\2\u1405\u1408\5\u0228\u0115\2\u1406\u1408\5\u023a\u011e\2"+
		"\u1407\u1405\3\2\2\2\u1407\u1406\3\2\2\2\u1408\u1410\3\2\2\2\u1409\u140c"+
		"\7\u046f\2\2\u140a\u140d\5\u0228\u0115\2\u140b\u140d\5\u023a\u011e\2\u140c"+
		"\u140a\3\2\2\2\u140c\u140b\3\2\2\2\u140d\u140f\3\2\2\2\u140e\u1409\3\2"+
		"\2\2\u140f\u1412\3\2\2\2\u1410\u140e\3\2\2\2\u1410\u1411\3\2\2\2\u1411"+
		"\u1413\3\2\2\2\u1412\u1410\3\2\2\2\u1413\u1416\7\u00b1\2\2\u1414\u1417"+
		"\5\u0228\u0115\2\u1415\u1417\5\u023a\u011e\2\u1416\u1414\3\2\2\2\u1416"+
		"\u1415\3\2\2\2\u1417\u141f\3\2\2\2\u1418\u141b\7\u046f\2\2\u1419\u141c"+
		"\5\u0228\u0115\2\u141a\u141c\5\u023a\u011e\2\u141b\u1419\3\2\2\2\u141b"+
		"\u141a\3\2\2\2\u141c\u141e\3\2\2\2\u141d\u1418\3\2\2\2\u141e\u1421\3\2"+
		"\2\2\u141f\u141d\3\2\2\2\u141f\u1420\3\2\2\2\u1420\u1425\3\2\2\2\u1421"+
		"\u141f\3\2\2\2\u1422\u1423\7\u00c2\2\2\u1423\u1424\7\u02bb\2\2\u1424\u1426"+
		"\7z\2\2\u1425\u1422\3\2\2\2\u1425\u1426\3\2\2\2\u1426\u1428\3\2\2\2\u1427"+
		"\u13ca\3\2\2\2\u1427\u1404\3\2\2\2\u1428\u01ad\3\2\2\2\u1429\u1440\7,"+
		"\2\2\u142a\u1440\7\u0213\2\2\u142b\u1435\7\b\2\2\u142c\u142d\7=\2\2\u142d"+
		"\u1432\5\u0228\u0115\2\u142e\u142f\7\u046f\2\2\u142f\u1431\5\u0228\u0115"+
		"\2\u1430\u142e\3\2\2\2\u1431\u1434\3\2\2\2\u1432\u1430\3\2\2\2\u1432\u1433"+
		"\3\2\2\2\u1433\u1436\3\2\2\2\u1434\u1432\3\2\2\2\u1435\u142c\3\2\2\2\u1435"+
		"\u1436\3\2\2\2\u1436\u1440\3\2\2\2\u1437\u143c\5\u0228\u0115\2\u1438\u1439"+
		"\7\u046f\2\2\u1439\u143b\5\u0228\u0115\2\u143a\u1438\3\2\2\2\u143b\u143e"+
		"\3\2\2\2\u143c\u143a\3\2\2\2\u143c\u143d\3\2\2\2\u143d\u1440\3\2\2\2\u143e"+
		"\u143c\3\2\2\2\u143f\u1429\3\2\2\2\u143f\u142a\3\2\2\2\u143f\u142b\3\2"+
		"\2\2\u143f\u1437\3\2\2\2\u1440\u01af\3\2\2\2\u1441\u1442\7J\2\2\u1442"+
		"\u1443\7\u0238\2\2\u1443\u1444\7x\2\2\u1444\u1445\5\u0228\u0115\2\u1445"+
		"\u1446\7\u00b1\2\2\u1446\u144b\5\u0228\u0115\2\u1447\u1448\7\u046f\2\2"+
		"\u1448\u144a\5\u0228\u0115\2\u1449\u1447\3\2\2\2\u144a\u144d\3\2\2\2\u144b"+
		"\u1449\3\2\2\2\u144b\u144c\3\2\2\2\u144c\u1451\3\2\2\2\u144d\u144b\3\2"+
		"\2\2\u144e\u144f\7\u00c2\2\2\u144f\u1450\7J\2\2\u1450\u1452\7z\2\2\u1451"+
		"\u144e\3\2\2\2\u1451\u1452\3\2\2\2\u1452\u01b1\3\2\2\2\u1453\u1454\7\u008d"+
		"\2\2\u1454\u1455\7\u029b\2\2\u1455\u145a\5\u01ce\u00e8\2\u1456\u1457\7"+
		"\u046f\2\2\u1457\u1459\5\u01ce\u00e8\2\u1458\u1456\3\2\2\2\u1459\u145c"+
		"\3\2\2\2\u145a\u1458\3\2\2\2\u145a\u145b\3\2\2\2\u145b\u01b3\3\2\2\2\u145c"+
		"\u145a\3\2\2\2\u145d\u145e\7\u0095\2\2\u145e\u1463\5\u01c8\u00e5\2\u145f"+
		"\u1460\7\u046f\2\2\u1460\u1462\5\u01c8\u00e5\2\u1461\u145f\3\2\2\2\u1462"+
		"\u1465\3\2\2\2\u1463\u1461\3\2\2\2\u1463\u1464\3\2\2\2\u1464\u1466\3\2"+
		"\2\2\u1465\u1463\3\2\2\2\u1466\u1468\7x\2\2\u1467\u1469\tD\2\2\u1468\u1467"+
		"\3\2\2\2\u1468\u1469\3\2\2\2\u1469\u146a\3\2\2\2\u146a\u146b\5\u01cc\u00e7"+
		"\2\u146b\u146c\7F\2\2\u146c\u1471\5\u0228\u0115\2\u146d\u146e\7\u046f"+
		"\2\2\u146e\u1470\5\u0228\u0115\2\u146f\u146d\3\2\2\2\u1470\u1473\3\2\2"+
		"\2\u1471\u146f\3\2\2\2\u1471\u1472\3\2\2\2\u1472\u14a4\3\2\2\2\u1473\u1471"+
		"\3\2\2\2\u1474\u1475\7\u0095\2\2\u1475\u1477\7\b\2\2\u1476\u1478\7\u02d6"+
		"\2\2\u1477\u1476\3\2\2\2\u1477\u1478\3\2\2\2\u1478\u1479\3\2\2\2\u1479"+
		"\u147a\7\u046f\2\2\u147a\u147b\7J\2\2\u147b\u147c\7z\2\2\u147c\u147d\7"+
		"F\2\2\u147d\u1482\5\u0228\u0115\2\u147e\u147f\7\u046f\2\2\u147f\u1481"+
		"\5\u0228\u0115\2\u1480\u147e\3\2\2\2\u1481\u1484\3\2\2\2\u1482\u1480\3"+
		"\2\2\2\u1482\u1483\3\2\2\2\u1483\u14a4\3\2\2\2\u1484\u1482\3\2\2\2\u1485"+
		"\u1488\7\u0095\2\2\u1486\u1489\5\u0228\u0115\2\u1487\u1489\5\u023a\u011e"+
		"\2\u1488\u1486\3\2\2\2\u1488\u1487\3\2\2\2\u1489\u1491\3\2\2\2\u148a\u148d"+
		"\7\u046f\2\2\u148b\u148e\5\u0228\u0115\2\u148c\u148e\5\u023a\u011e\2\u148d"+
		"\u148b\3\2\2\2\u148d\u148c\3\2\2\2\u148e\u1490\3\2\2\2\u148f\u148a\3\2"+
		"\2\2\u1490\u1493\3\2\2\2\u1491\u148f\3\2\2\2\u1491\u1492\3\2\2\2\u1492"+
		"\u1494\3\2\2\2\u1493\u1491\3\2\2\2\u1494\u1497\7F\2\2\u1495\u1498\5\u0228"+
		"\u0115\2\u1496\u1498\5\u023a\u011e\2\u1497\u1495\3\2\2\2\u1497\u1496\3"+
		"\2\2\2\u1498\u14a0\3\2\2\2\u1499\u149c\7\u046f\2\2\u149a\u149d\5\u0228"+
		"\u0115\2\u149b\u149d\5\u023a\u011e\2\u149c\u149a\3\2\2\2\u149c\u149b\3"+
		"\2\2\2\u149d\u149f\3\2\2\2\u149e\u1499\3\2\2\2\u149f\u14a2\3\2\2\2\u14a0"+
		"\u149e\3\2\2\2\u14a0\u14a1\3\2\2\2\u14a1\u14a4\3\2\2\2\u14a2\u14a0\3\2"+
		"\2\2\u14a3\u145d\3\2\2\2\u14a3\u1474\3\2\2\2\u14a3\u1485\3\2\2\2\u14a4"+
		"\u01b5\3\2\2\2\u14a5\u14a6\7\u0095\2\2\u14a6\u14a7\7\u0238\2\2\u14a7\u14a8"+
		"\7x\2\2\u14a8\u14a9\5\u0228\u0115\2\u14a9\u14aa\7F\2\2\u14aa\u14af\5\u0228"+
		"\u0115\2\u14ab\u14ac\7\u046f\2\2\u14ac\u14ae\5\u0228\u0115\2\u14ad\u14ab"+
		"\3\2\2\2\u14ae\u14b1\3\2\2\2\u14af\u14ad\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0"+
		"\u01b7\3\2\2\2\u14b1\u14af\3\2\2\2\u14b2\u14b3\7\u009b\2\2\u14b3\u14b6"+
		"\7\u0229\2\2\u14b4\u14b5\7C\2\2\u14b5\u14b7\5\u0228\u0115\2\u14b6\u14b4"+
		"\3\2\2\2\u14b6\u14b7\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14bb\7\u0464\2"+
		"\2\u14b9\u14bc\5\u029c\u014f\2\u14ba\u14bc\7\u047c\2\2\u14bb\u14b9\3\2"+
		"\2\2\u14bb\u14ba\3\2\2\2\u14bc\u01b9\3\2\2\2\u14bd\u14be\5\u0228\u0115"+
		"\2\u14be\u14bf\5\u01c4\u00e3\2\u14bf\u01bb\3\2\2\2\u14c0\u14c1\5\u0228"+
		"\u0115\2\u14c1\u14c2\7\u01c2\2\2\u14c2\u14c3\7\25\2\2\u14c3\u14c4\7\u0229"+
		"\2\2\u14c4\u14c5\7\u047c\2\2\u14c5\u14d6\3\2\2\2\u14c6\u14c7\5\u0228\u0115"+
		"\2\u14c7\u14c8\7\u01c2\2\2\u14c8\u14c9\7\25\2\2\u14c9\u14cd\7\u047c\2"+
		"\2\u14ca\u14cb\7\u0093\2\2\u14cb\u14cc\7%\2\2\u14cc\u14ce\7\u0229\2\2"+
		"\u14cd\u14ca\3\2\2\2\u14cd\u14ce\3\2\2\2\u14ce\u14d6\3\2\2\2\u14cf\u14d0"+
		"\5\u0228\u0115\2\u14d0\u14d1\7\u01c2\2\2\u14d1\u14d2\7\u00c2\2\2\u14d2"+
		"\u14d3\5\u01be\u00e0\2\u14d3\u14d6\3\2\2\2\u14d4\u14d6\5\u0228\u0115\2"+
		"\u14d5\u14c0\3\2\2\2\u14d5\u14c6\3\2\2\2\u14d5\u14cf\3\2\2\2\u14d5\u14d4"+
		"\3\2\2\2\u14d6\u01bd\3\2\2\2\u14d7\u14da\5\u0238\u011d\2\u14d8\u14d9\t"+
		"E\2\2\u14d9\u14db\7\u047c\2\2\u14da\u14d8\3\2\2\2\u14da\u14db\3\2\2\2"+
		"\u14db\u14e1\3\2\2\2\u14dc\u14dd\5\u0238\u011d\2\u14dd\u14de\7\u00bd\2"+
		"\2\u14de\u14df\5\u029c\u014f\2\u14df\u14e1\3\2\2\2\u14e0\u14d7\3\2\2\2"+
		"\u14e0\u14dc\3\2\2\2\u14e1\u01bf\3\2\2\2\u14e2\u14eb\7\u00a9\2\2\u14e3"+
		"\u14eb\7\u02aa\2\2\u14e4\u14e5\7\u0168\2\2\u14e5\u14eb\7\u047c\2\2\u14e6"+
		"\u14e7\7\u01d3\2\2\u14e7\u14eb\7\u047c\2\2\u14e8\u14e9\7\u0282\2\2\u14e9"+
		"\u14eb\7\u047c\2\2\u14ea\u14e2\3\2\2\2\u14ea\u14e3\3\2\2\2\u14ea\u14e4"+
		"\3\2\2\2\u14ea\u14e6\3\2\2\2\u14ea\u14e8\3\2\2\2\u14eb\u01c1\3\2\2\2\u14ec"+
		"\u14ed\7\u01f5\2\2\u14ed\u14f5\5\u0240\u0121\2\u14ee\u14ef\7\u01f8\2\2"+
		"\u14ef\u14f5\5\u0240\u0121\2\u14f0\u14f1\7\u01f4\2\2\u14f1\u14f5\5\u0240"+
		"\u0121\2\u14f2\u14f3\7\u01f9\2\2\u14f3\u14f5\5\u0240\u0121\2\u14f4\u14ec"+
		"\3\2\2\2\u14f4\u14ee\3\2\2\2\u14f4\u14f0\3\2\2\2\u14f4\u14f2\3\2\2\2\u14f5"+
		"\u01c3\3\2\2\2\u14f6\u14f7\7\u0229\2\2\u14f7\u14fe\7\u01a6\2\2\u14f8\u14ff"+
		"\7,\2\2\u14f9\u14ff\7\u0209\2\2\u14fa\u14fb\7X\2\2\u14fb\u14fc\5\u0240"+
		"\u0121\2\u14fc\u14fd\7\u02b5\2\2\u14fd\u14ff\3\2\2\2\u14fe\u14f8\3\2\2"+
		"\2\u14fe\u14f9\3\2\2\2\u14fe\u14fa\3\2\2\2\u14fe\u14ff\3\2\2\2\u14ff\u151d"+
		"\3\2\2\2\u1500\u1501\7\u0229\2\2\u1501\u1504\7\u01bf\2\2\u1502\u1505\7"+
		",\2\2\u1503\u1505\5\u0240\u0121\2\u1504\u1502\3\2\2\2\u1504\u1503\3\2"+
		"\2\2\u1505\u151d\3\2\2\2\u1506\u1507\7\u0229\2\2\u1507\u1508\7\u0255\2"+
		"\2\u1508\u150d\7X\2\2\u1509\u150e\7,\2\2\u150a\u150b\5\u0240\u0121\2\u150b"+
		"\u150c\7\u02b5\2\2\u150c\u150e\3\2\2\2\u150d\u1509\3\2\2\2\u150d\u150a"+
		"\3\2\2\2\u150e\u151d\3\2\2\2\u150f\u1510\7\u0229\2\2\u1510\u1511\7\u0090"+
		"\2\2\u1511\u1513\7%\2\2\u1512\u1514\tF\2\2\u1513\u1512\3\2\2\2\u1513\u1514"+
		"\3\2\2\2\u1514\u151d\3\2\2\2\u1515\u1516\7\u01aa\2\2\u1516\u151d\5\u0240"+
		"\u0121\2\u1517\u151a\7\u022a\2\2\u1518\u151b\5\u0240\u0121\2\u1519\u151b"+
		"\7\u0293\2\2\u151a\u1518\3\2\2\2\u151a\u1519\3\2\2\2\u151b\u151d\3\2\2"+
		"\2\u151c\u14f6\3\2\2\2\u151c\u1500\3\2\2\2\u151c\u1506\3\2\2\2\u151c\u150f"+
		"\3\2\2\2\u151c\u1515\3\2\2\2\u151c\u1517\3\2\2\2\u151d\u01c5\3\2\2\2\u151e"+
		"\u151f\7\u014e\2\2\u151f\u1520\tG\2\2\u1520\u01c7\3\2\2\2\u1521\u1526"+
		"\5\u01ca\u00e6\2\u1522\u1523\7\u046d\2\2\u1523\u1524\5\u025a\u012e\2\u1524"+
		"\u1525\7\u046e\2\2\u1525\u1527\3\2\2\2\u1526\u1522\3\2\2\2\u1526\u1527"+
		"\3\2\2\2\u1527\u01c9\3\2\2\2\u1528\u152a\7\b\2\2\u1529\u152b\7\u02d6\2"+
		"\2\u152a\u1529\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u1585\3\2\2\2\u152c\u152e"+
		"\7\t\2\2\u152d\u152f\7\u02de\2\2\u152e\u152d\3\2\2\2\u152e\u152f\3\2\2"+
		"\2\u152f\u1585\3\2\2\2\u1530\u1538\7#\2\2\u1531\u1532\7\u028b\2\2\u1532"+
		"\u1539\7\u02e7\2\2\u1533\u1539\7\u02de\2\2\u1534\u1539\7\u02a1\2\2\u1535"+
		"\u1539\7\u029b\2\2\u1536\u1539\7\u0289\2\2\u1537\u1539\7\u0256\2\2\u1538"+
		"\u1531\3\2\2\2\u1538\u1533\3\2\2\2\u1538\u1534\3\2\2\2\u1538\u1535\3\2"+
		"\2\2\u1538\u1536\3\2\2\2\u1538\u1537\3\2\2\2\u1538\u1539\3\2\2\2\u1539"+
		"\u1585\3\2\2\2\u153a\u1585\7.\2\2\u153b\u153d\7\65\2\2\u153c\u153e\7\u0256"+
		"\2\2\u153d\u153c\3\2\2\2\u153d\u153e\3\2\2\2\u153e\u1585\3\2\2\2\u153f"+
		"\u1585\7\u01a1\2\2\u1540\u1585\7\u02c5\2\2\u1541\u1585\7\u02c6\2\2\u1542"+
		"\u1543\7J\2\2\u1543\u1585\7z\2\2\u1544\u1585\7S\2\2\u1545\u1585\7W\2\2"+
		"\u1546\u1547\7i\2\2\u1547\u1585\7\u02e7\2\2\u1548\u1585\7\u02d7\2\2\u1549"+
		"\u1585\7\u0238\2\2\u154a\u1585\7\u008a\2\2\u154b\u1585\7\u02d8\2\2\u154c"+
		"\u154d\7\u024e\2\2\u154d\u1585\tH\2\2\u154e\u1585\7\u009a\2\2\u154f\u1550"+
		"\7\u009d\2\2\u1550\u1585\tI\2\2\u1551\u1585\7\u02e4\2\2\u1552\u1585\7"+
		"\u02e5\2\2\u1553\u1585\7\u00b3\2\2\u1554\u1585\7\u00ba\2\2\u1555\u1585"+
		"\7\u00bb\2\2\u1556\u1585\7\u02bc\2\2\u1557\u1585\7\u02bd\2\2\u1558\u1585"+
		"\7\u02be\2\2\u1559\u1585\7\u02bf\2\2\u155a\u1585\7\u02c0\2\2\u155b\u1585"+
		"\7\u02c1\2\2\u155c\u1585\7\u02c2\2\2\u155d\u1585\7\u02c3\2\2\u155e\u1585"+
		"\7\u02c4\2\2\u155f\u1585\7\u02c7\2\2\u1560\u1585\7\u02c8\2\2\u1561\u1585"+
		"\7\u02c9\2\2\u1562\u1585\7\u02ca\2\2\u1563\u1585\7\u02cb\2\2\u1564\u1585"+
		"\7\u02cc\2\2\u1565\u1585\7\u02cd\2\2\u1566\u1585\7\u02ce\2\2\u1567\u1585"+
		"\7\u02cf\2\2\u1568\u1585\7\u02d0\2\2\u1569\u1585\7\u02d3\2\2\u156a\u1585"+
		"\7\u02d4\2\2\u156b\u1585\7\u02d5\2\2\u156c\u1585\7\u02d9\2\2\u156d\u1585"+
		"\7\u02da\2\2\u156e\u1585\7\u02db\2\2\u156f\u1585\7\u02dc\2\2\u1570\u1585"+
		"\7\u02dd\2\2\u1571\u1585\7\u02e0\2\2\u1572\u1585\7\u02e1\2\2\u1573\u1585"+
		"\7\u02e2\2\2\u1574\u1585\7\u00a0\2\2\u1575\u1585\7\u02e3\2\2\u1576\u1585"+
		"\7\u0435\2\2\u1577\u1585\7\u02e6\2\2\u1578\u1585\7\u02e8\2\2\u1579\u1585"+
		"\7\u0440\2\2\u157a\u1585\7\u02e9\2\2\u157b\u1585\7\u02ea\2\2\u157c\u157d"+
		"\7h\2\2\u157d\u157e\7F\2\2\u157e\u1585\7\u02df\2\2\u157f\u1580\7\u009a"+
		"\2\2\u1580\u1581\7Y\2\2\u1581\u1585\7\u02df\2\2\u1582\u1583\7\u02d1\2"+
		"\2\u1583\u1585\7\u02d2\2\2\u1584\u1528\3\2\2\2\u1584\u152c\3\2\2\2\u1584"+
		"\u1530\3\2\2\2\u1584\u153a\3\2\2\2\u1584\u153b\3\2\2\2\u1584\u153f\3\2"+
		"\2\2\u1584\u1540\3\2\2\2\u1584\u1541\3\2\2\2\u1584\u1542\3\2\2\2\u1584"+
		"\u1544\3\2\2\2\u1584\u1545\3\2\2\2\u1584\u1546\3\2\2\2\u1584\u1548\3\2"+
		"\2\2\u1584\u1549\3\2\2\2\u1584\u154a\3\2\2\2\u1584\u154b\3\2\2\2\u1584"+
		"\u154c\3\2\2\2\u1584\u154e\3\2\2\2\u1584\u154f\3\2\2\2\u1584\u1551\3\2"+
		"\2\2\u1584\u1552\3\2\2\2\u1584\u1553\3\2\2\2\u1584\u1554\3\2\2\2\u1584"+
		"\u1555\3\2\2\2\u1584\u1556\3\2\2\2\u1584\u1557\3\2\2\2\u1584\u1558\3\2"+
		"\2\2\u1584\u1559\3\2\2\2\u1584\u155a\3\2\2\2\u1584\u155b\3\2\2\2\u1584"+
		"\u155c\3\2\2\2\u1584\u155d\3\2\2\2\u1584\u155e\3\2\2\2\u1584\u155f\3\2"+
		"\2\2\u1584\u1560\3\2\2\2\u1584\u1561\3\2\2\2\u1584\u1562\3\2\2\2\u1584"+
		"\u1563\3\2\2\2\u1584\u1564\3\2\2\2\u1584\u1565\3\2\2\2\u1584\u1566\3\2"+
		"\2\2\u1584\u1567\3\2\2\2\u1584\u1568\3\2\2\2\u1584\u1569\3\2\2\2\u1584"+
		"\u156a\3\2\2\2\u1584\u156b\3\2\2\2\u1584\u156c\3\2\2\2\u1584\u156d\3\2"+
		"\2\2\u1584\u156e\3\2\2\2\u1584\u156f\3\2\2\2\u1584\u1570\3\2\2\2\u1584"+
		"\u1571\3\2\2\2\u1584\u1572\3\2\2\2\u1584\u1573\3\2\2\2\u1584\u1574\3\2"+
		"\2\2\u1584\u1575\3\2\2\2\u1584\u1576\3\2\2\2\u1584\u1577\3\2\2\2\u1584"+
		"\u1578\3\2\2\2\u1584\u1579\3\2\2\2\u1584\u157a\3\2\2\2\u1584\u157b\3\2"+
		"\2\2\u1584\u157c\3\2\2\2\u1584\u157f\3\2\2\2\u1584\u1582\3\2\2\2\u1585"+
		"\u01cb\3\2\2\2\u1586\u1597\7\u045d\2\2\u1587\u1588\7\u045d\2\2\u1588\u1589"+
		"\7\u046c\2\2\u1589\u1597\7\u045d\2\2\u158a\u158b\5\u023a\u011e\2\u158b"+
		"\u158c\7\u046c\2\2\u158c\u158d\7\u045d\2\2\u158d\u1597\3\2\2\2\u158e\u158f"+
		"\5\u023a\u011e\2\u158f\u1590\7\u046c\2\2\u1590\u1591\5\u023a\u011e\2\u1591"+
		"\u1597\3\2\2\2\u1592\u1593\5\u023a\u011e\2\u1593\u1594\5\u023e\u0120\2"+
		"\u1594\u1597\3\2\2\2\u1595\u1597\5\u023a\u011e\2\u1596\u1586\3\2\2\2\u1596"+
		"\u1587\3\2\2\2\u1596\u158a\3\2\2\2\u1596\u158e\3\2\2\2\u1596\u1592\3\2"+
		"\2\2\u1596\u1595\3\2\2\2\u1597\u01cd\3\2\2\2\u1598\u1599\5\u0228\u0115"+
		"\2\u1599\u159a\7\u00b1\2\2\u159a\u159b\5\u0228\u0115\2\u159b\u01cf\3\2"+
		"\2\2\u159c\u159e\7\13\2\2\u159d\u159f\tJ\2\2\u159e\u159d\3\2\2\2\u159e"+
		"\u159f\3\2\2\2\u159f\u15a0\3\2\2\2\u15a0\u15a1\t8\2\2\u15a1\u15b3\5\u025e"+
		"\u0130\2\u15a2\u15a3\7\u00ba\2\2\u15a3\u15a4\7N\2\2\u15a4\u15a5\7x\2\2"+
		"\u15a5\u15aa\5\u0224\u0113\2\u15a6\u15a7\7\u046f\2\2\u15a7\u15a9\5\u0224"+
		"\u0113\2\u15a8\u15a6\3\2\2\2\u15a9\u15ac\3\2\2\2\u15aa\u15a8\3\2\2\2\u15aa"+
		"\u15ab\3\2\2\2\u15ab\u15b1\3\2\2\2\u15ac\u15aa\3\2\2\2\u15ad\u15ae\7\u00c2"+
		"\2\2\u15ae\u15af\5\u0240\u0121\2\u15af\u15b0\7\24\2\2\u15b0\u15b2\3\2"+
		"\2\2\u15b1\u15ad\3\2\2\2\u15b1\u15b2\3\2\2\2\u15b2\u15b4\3\2\2\2\u15b3"+
		"\u15a2\3\2\2\2\u15b3\u15b4\3\2\2\2\u15b4\u15c0\3\2\2\2\u15b5\u15b6\7\65"+
		"\2\2\u15b6\u15b7\7N\2\2\u15b7\u15b8\7x\2\2\u15b8\u15bd\5\u0224\u0113\2"+
		"\u15b9\u15ba\7\u046f\2\2\u15ba\u15bc\5\u0224\u0113\2\u15bb\u15b9\3\2\2"+
		"\2\u15bc\u15bf\3\2\2\2\u15bd\u15bb\3\2\2\2\u15bd\u15be\3\2\2\2\u15be\u15c1"+
		"\3\2\2\2\u15bf\u15bd\3\2\2\2\u15c0\u15b5\3\2\2\2\u15c0\u15c1\3\2\2\2\u15c1"+
		"\u01d1\3\2\2\2\u15c2\u15c3\7\34\2\2\u15c3\u15c4\7\u00ae\2\2\u15c4\u15c8"+
		"\5\u025e\u0130\2\u15c5\u15c7\5\u01da\u00ee\2\u15c6\u15c5\3\2\2\2\u15c7"+
		"\u15ca\3\2\2\2\u15c8\u15c6\3\2\2\2\u15c8\u15c9\3\2\2\2\u15c9\u01d3\3\2"+
		"\2\2\u15ca\u15c8\3\2\2\2\u15cb\u15cc\7\u0166\2\2\u15cc\u15cd\7\u00ae\2"+
		"\2\u15cd\u15cf\5\u025e\u0130\2\u15ce\u15d0\tK\2\2\u15cf\u15ce\3\2\2\2"+
		"\u15cf\u15d0\3\2\2\2\u15d0\u01d5\3\2\2\2\u15d1\u15d3\7y\2\2\u15d2\u15d4"+
		"\tJ\2\2\u15d3\u15d2\3\2\2\2\u15d3\u15d4\3\2\2\2\u15d4\u15d5\3\2\2\2\u15d5"+
		"\u15d6\t8\2\2\u15d6\u15d7\5\u025e\u0130\2\u15d7\u01d7\3\2\2\2\u15d8\u15da"+
		"\7\u0246\2\2\u15d9\u15db\tJ\2\2\u15da\u15d9\3\2\2\2\u15da\u15db\3\2\2"+
		"\2\u15db\u15dc\3\2\2\2\u15dc\u15dd\7\u00ae\2\2\u15dd\u15df\5\u025e\u0130"+
		"\2\u15de\u15e0\7\u023a\2\2\u15df\u15de\3\2\2\2\u15df\u15e0\3\2\2\2\u15e0"+
		"\u15e2\3\2\2\2\u15e1\u15e3\7\u01a8\2\2\u15e2\u15e1\3\2\2\2\u15e2\u15e3"+
		"\3\2\2\2\u15e3\u15e5\3\2\2\2\u15e4\u15e6\7\u029c\2\2\u15e5\u15e4\3\2\2"+
		"\2\u15e5\u15e6\3\2\2\2\u15e6\u01d9\3\2\2\2\u15e7\u15e8\7C\2\2\u15e8\u15ef"+
		"\7\u029a\2\2\u15e9\u15ef\7\u023a\2\2\u15ea\u15ef\7\u01ab\2\2\u15eb\u15ef"+
		"\7\u01fa\2\2\u15ec\u15ef\7\u01a8\2\2\u15ed\u15ef\7\u0164\2\2\u15ee\u15e7"+
		"\3\2\2\2\u15ee\u15e9\3\2\2\2\u15ee\u15ea\3\2\2\2\u15ee\u15eb\3\2\2\2\u15ee"+
		"\u15ec\3\2\2\2\u15ee\u15ed\3\2\2\2\u15ef\u01db\3\2\2\2\u15f0\u15f2\7#"+
		"\2\2\u15f1\u15f3\7\u0151\2\2\u15f2\u15f1\3\2\2\2\u15f2\u15f3\3\2\2\2\u15f3"+
		"\u15f4\3\2\2\2\u15f4\u15f6\7\u01b7\2\2\u15f5\u15f7\5\u0274\u013b\2\u15f6"+
		"\u15f5\3\2\2\2\u15f6\u15f7\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8\u15f9\5\u023a"+
		"\u011e\2\u15f9\u15fa\7\u0254\2\2\u15fa\u15fb\tL\2\2\u15fb\u15fc\7\u026d"+
		"\2\2\u15fc\u15fd\7\u047c\2\2\u15fd\u01dd\3\2\2\2\u15fe\u15ff\7\u01ca\2"+
		"\2\u15ff\u1600\7\u022c\2\2\u1600\u1601\5\u023a\u011e\2\u1601\u1602\7\u026d"+
		"\2\2\u1602\u1603\7\u047c\2\2\u1603\u01df\3\2\2\2\u1604\u1605\7\u0297\2"+
		"\2\u1605\u1606\7\u022c\2\2\u1606\u1607\5\u023a\u011e\2\u1607\u01e1\3\2"+
		"\2\2\u1608\u1609\7\u009b\2\2\u1609\u160a\5\u01e6\u00f4\2\u160a\u160d\t"+
		"M\2\2\u160b\u160e\5\u02a2\u0152\2\u160c\u160e\7x\2\2\u160d\u160b\3\2\2"+
		"\2\u160d\u160c\3\2\2\2\u160e\u1618\3\2\2\2\u160f\u1610\7\u046f\2\2\u1610"+
		"\u1611\5\u01e6\u00f4\2\u1611\u1614\tM\2\2\u1612\u1615\5\u02a2\u0152\2"+
		"\u1613\u1615\7x\2\2\u1614\u1612\3\2\2\2\u1614\u1613\3\2\2\2\u1615\u1617"+
		"\3\2\2\2\u1616\u160f\3\2\2\2\u1617\u161a\3\2\2\2\u1618\u1616\3\2\2\2\u1618"+
		"\u1619\3\2\2\2\u1619\u163d\3\2\2\2\u161a\u1618\3\2\2\2\u161b\u161c\7\u009b"+
		"\2\2\u161c\u161f\5> \2\u161d\u1620\5\u022c\u0117\2\u161e\u1620\7,\2\2"+
		"\u161f\u161d\3\2\2\2\u161f\u161e\3\2\2\2\u1620\u163d\3\2\2\2\u1621\u1622"+
		"\7\u009b\2\2\u1622\u1629\7\u0207\2\2\u1623\u1626\5\u022c\u0117\2\u1624"+
		"\u1625\7\35\2\2\u1625\u1627\5\u022e\u0118\2\u1626\u1624\3\2\2\2\u1626"+
		"\u1627\3\2\2\2\u1627\u162a\3\2\2\2\u1628\u162a\7,\2\2\u1629\u1623\3\2"+
		"\2\2\u1629\u1628\3\2\2\2\u162a\u163d\3\2\2\2\u162b\u163d\5\u01b8\u00dd"+
		"\2\u162c\u163d\5\u013a\u009e\2\u162d\u163d\5\u0138\u009d\2\u162e\u162f"+
		"\7\u009b\2\2\u162f\u1630\5\u021e\u0110\2\u1630\u1631\tM\2\2\u1631\u1639"+
		"\5\u02a2\u0152\2\u1632\u1633\7\u046f\2\2\u1633\u1634\5\u021e\u0110\2\u1634"+
		"\u1635\tM\2\2\u1635\u1636\5\u02a2\u0152\2\u1636\u1638\3\2\2\2\u1637\u1632"+
		"\3\2\2\2\u1638\u163b\3\2\2\2\u1639\u1637\3\2\2\2\u1639\u163a\3\2\2\2\u163a"+
		"\u163d\3\2\2\2\u163b\u1639\3\2\2\2\u163c\u1608\3\2\2\2\u163c\u161b\3\2"+
		"\2\2\u163c\u1621\3\2\2\2\u163c\u162b\3\2\2\2\u163c\u162c\3\2\2\2\u163c"+
		"\u162d\3\2\2\2\u163c\u162e\3\2\2\2\u163d\u01e3\3\2\2\2\u163e\u163f\7\u009d"+
		"\2\2\u163f\u1640\t:\2\2\u1640\u16d8\7\u01de\2\2\u1641\u1642\7\u009d\2"+
		"\2\u1642\u1643\tN\2\2\u1643\u1646\7\u01a2\2\2\u1644\u1645\7R\2\2\u1645"+
		"\u1647\7\u047c\2\2\u1646\u1644\3\2\2\2\u1646\u1647\3\2\2\2\u1647\u164a"+
		"\3\2\2\2\u1648\u1649\7F\2\2\u1649\u164b\5\u0240\u0121\2\u164a\u1648\3"+
		"\2\2\2\u164a\u164b\3\2\2\2\u164b\u1653\3\2\2\2\u164c\u1650\7e\2\2\u164d"+
		"\u164e\5\u0240\u0121\2\u164e\u164f\7\u046f\2\2\u164f\u1651\3\2\2\2\u1650"+
		"\u164d\3\2\2\2\u1650\u1651\3\2\2\2\u1651\u1652\3\2\2\2\u1652\u1654\5\u0240"+
		"\u0121\2\u1653\u164c\3\2\2\2\u1653\u1654\3\2\2\2\u1654\u16d8\3\2\2\2\u1655"+
		"\u1656\7\u009d\2\2\u1656\u1658\5\u01e8\u00f5\2\u1657\u1659\5\u01ea\u00f6"+
		"\2\u1658\u1657\3\2\2\2\u1658\u1659\3\2\2\2\u1659\u16d8\3\2\2\2\u165a\u165c"+
		"\7\u009d\2\2\u165b\u165d\7\u01b6\2\2\u165c\u165b\3\2\2\2\u165c\u165d\3"+
		"\2\2\2\u165d\u165e\3\2\2\2\u165e\u165f\t+\2\2\u165f\u1660\tO\2\2\u1660"+
		"\u1663\5\u0220\u0111\2\u1661\u1662\tO\2\2\u1662\u1664\5\u023a\u011e\2"+
		"\u1663\u1661\3\2\2\2\u1663\u1664\3\2\2\2\u1664\u1666\3\2\2\2\u1665\u1667"+
		"\5\u01ea\u00f6\2\u1666\u1665\3\2\2\2\u1666\u1667\3\2\2\2\u1667\u16d8\3"+
		"\2\2\2\u1668\u1669\7\u009d\2\2\u1669\u166a\7#\2\2\u166a\u166c\t\2\2\2"+
		"\u166b\u166d\5\u0274\u013b\2\u166c\u166b\3\2\2\2\u166c\u166d\3\2\2\2\u166d"+
		"\u166e\3\2\2\2\u166e\u16d8\5\u023a\u011e\2\u166f\u1670\7\u009d\2\2\u1670"+
		"\u1671\7#\2\2\u1671\u1672\tP\2\2\u1672\u16d8\5\u021e\u0110\2\u1673\u1674"+
		"\7\u009d\2\2\u1674\u1675\7#\2\2\u1675\u1676\7\u029b\2\2\u1676\u16d8\5"+
		"\u0228\u0115\2\u1677\u1678\7\u009d\2\2\u1678\u1679\7\u019b\2\2\u1679\u167a"+
		"\5\u0230\u0119\2\u167a\u167b\tQ\2\2\u167b\u16d8\3\2\2\2\u167c\u167d\7"+
		"\u009d\2\2\u167d\u16d8\5\u01ec\u00f7\2\u167e\u167f\7\u009d\2\2\u167f\u1687"+
		"\tR\2\2\u1680\u1684\7e\2\2\u1681\u1682\5\u0240\u0121\2\u1682\u1683\7\u046f"+
		"\2\2\u1683\u1685\3\2\2\2\u1684\u1681\3\2\2\2\u1684\u1685\3\2\2\2\u1685"+
		"\u1686\3\2\2\2\u1686\u1688\5\u0240\u0121\2\u1687\u1680\3\2\2\2\u1687\u1688"+
		"\3\2\2\2\u1688\u16d8\3\2\2\2\u1689\u168a\7\u009d\2\2\u168a\u168b\7\u0124"+
		"\2\2\u168b\u168c\7\u046d\2\2\u168c\u168d\7\u045d\2\2\u168d\u168e\7\u046e"+
		"\2\2\u168e\u16d8\tR\2\2\u168f\u1690\7\u009d\2\2\u1690\u1693\5\u01ee\u00f8"+
		"\2\u1691\u1692\tO\2\2\u1692\u1694\5\u023a\u011e\2\u1693\u1691\3\2\2\2"+
		"\u1693\u1694\3\2\2\2\u1694\u1696\3\2\2\2\u1695\u1697\5\u01ea\u00f6\2\u1696"+
		"\u1695\3\2\2\2\u1696\u1697\3\2\2\2\u1697\u16d8\3\2\2\2\u1698\u1699\7\u009d"+
		"\2\2\u1699\u169a\tS\2\2\u169a\u169b\7\u016e\2\2\u169b\u16d8\5\u021e\u0110"+
		"\2\u169c\u169d\7\u009d\2\2\u169d\u16a0\7\u01ba\2\2\u169e\u169f\7C\2\2"+
		"\u169f\u16a1\5\u0228\u0115\2\u16a0\u169e\3\2\2\2\u16a0\u16a1\3\2\2\2\u16a1"+
		"\u16d8\3\2\2\2\u16a2\u16a3\7\u009d\2\2\u16a3\u16a4\tT\2\2\u16a4\u16a5"+
		"\tO\2\2\u16a5\u16a8\5\u0220\u0111\2\u16a6\u16a7\tO\2\2\u16a7\u16a9\5\u023a"+
		"\u011e\2\u16a8\u16a6\3\2\2\2\u16a8\u16a9\3\2\2\2\u16a9\u16ac\3\2\2\2\u16aa"+
		"\u16ab\7\u00c0\2\2\u16ab\u16ad\5\u02a2\u0152\2\u16ac\u16aa\3\2\2\2\u16ac"+
		"\u16ad\3\2\2\2\u16ad\u16d8\3\2\2\2\u16ae\u16af\7\u009d\2\2\u16af\u16b0"+
		"\7\u021d\2\2\u16b0\u16b3\7\u02e7\2\2\u16b1\u16b2\tO\2\2\u16b2\u16b4\5"+
		"\u023a\u011e\2\u16b3\u16b1\3\2\2\2\u16b3\u16b4\3\2\2\2\u16b4\u16b6\3\2"+
		"\2\2\u16b5\u16b7\5\u01ea\u00f6\2\u16b6\u16b5\3\2\2\2\u16b6\u16b7\3\2\2"+
		"\2\u16b7\u16d8\3\2\2\2\u16b8\u16b9\7\u009d\2\2\u16b9\u16ba\7\u0236\2\2"+
		"\u16ba\u16bf\5\u01f0\u00f9\2\u16bb\u16bc\7\u046f\2\2\u16bc\u16be\5\u01f0"+
		"\u00f9\2\u16bd\u16bb\3\2\2\2\u16be\u16c1\3\2\2\2\u16bf\u16bd\3\2\2\2\u16bf"+
		"\u16c0\3\2\2\2\u16c0\u16c5\3\2\2\2\u16c1\u16bf\3\2\2\2\u16c2\u16c3\7C"+
		"\2\2\u16c3\u16c4\7\u0239\2\2\u16c4\u16c6\5\u0240\u0121\2\u16c5\u16c2\3"+
		"\2\2\2\u16c5\u16c6\3\2\2\2\u16c6\u16c7\3\2\2\2\u16c7\u16cb\7e\2\2\u16c8"+
		"\u16c9\5\u0240\u0121\2\u16c9\u16ca\7\u046f\2\2\u16ca\u16cc\3\2\2\2\u16cb"+
		"\u16c8\3\2\2\2\u16cb\u16cc\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16ce\5\u0240"+
		"\u0121\2\u16ce\u16d8\3\2\2\2\u16cf\u16d0\7\u009d\2\2\u16d0\u16d1\7\u0268"+
		"\2\2\u16d1\u16d5\7\u027c\2\2\u16d2\u16d3\7C\2\2\u16d3\u16d4\7\u0165\2"+
		"\2\u16d4\u16d6\7\u047c\2\2\u16d5\u16d2\3\2\2\2\u16d5\u16d6\3\2\2\2\u16d6"+
		"\u16d8\3\2\2\2\u16d7\u163e\3\2\2\2\u16d7\u1641\3\2\2\2\u16d7\u1655\3\2"+
		"\2\2\u16d7\u165a\3\2\2\2\u16d7\u1668\3\2\2\2\u16d7\u166f\3\2\2\2\u16d7"+
		"\u1673\3\2\2\2\u16d7\u1677\3\2\2\2\u16d7\u167c\3\2\2\2\u16d7\u167e\3\2"+
		"\2\2\u16d7\u1689\3\2\2\2\u16d7\u168f\3\2\2\2\u16d7\u1698\3\2\2\2\u16d7"+
		"\u169c\3\2\2\2\u16d7\u16a2\3\2\2\2\u16d7\u16ae\3\2\2\2\u16d7\u16b8\3\2"+
		"\2\2\u16d7\u16cf\3\2\2\2\u16d8\u01e5\3\2\2\2\u16d9\u16e4\7\u0488\2\2\u16da"+
		"\u16e4\7\u0489\2\2\u16db\u16dc\7\u0471\2\2\u16dc\u16de\7\u0471\2\2\u16dd"+
		"\u16db\3\2\2\2\u16dd\u16de\3\2\2\2\u16de\u16df\3\2\2\2\u16df\u16e1\tU"+
		"\2\2\u16e0\u16dd\3\2\2\2\u16e0\u16e1\3\2\2\2\u16e1\u16e2\3\2\2\2\u16e2"+
		"\u16e4\5\u023a\u011e\2\u16e3\u16d9\3\2\2\2\u16e3\u16da\3\2\2\2\u16e3\u16e0"+
		"\3\2\2\2\u16e4\u01e7\3\2\2\2\u16e5\u16e6\7\33\2\2\u16e6\u16f3\7\u009b"+
		"\2\2\u16e7\u16f3\7\u034d\2\2\u16e8\u16f3\7*\2\2\u16e9\u16f3\7\u0099\2"+
		"\2\u16ea\u16eb\7\u01b7\2\2\u16eb\u16f3\7\u027c\2\2\u16ec\u16ed\7\u0085"+
		"\2\2\u16ed\u16f3\7\u027c\2\2\u16ee\u16f0\t9\2\2\u16ef\u16ee\3\2\2\2\u16ef"+
		"\u16f0\3\2\2\2\u16f0\u16f1\3\2\2\2\u16f1\u16f3\tV\2\2\u16f2\u16e5\3\2"+
		"\2\2\u16f2\u16e7\3\2\2\2\u16f2\u16e8\3\2\2\2\u16f2\u16e9\3\2\2\2\u16f2"+
		"\u16ea\3\2\2\2\u16f2\u16ec\3\2\2\2\u16f2\u16ef\3\2\2\2\u16f3\u01e9\3\2"+
		"\2\2\u16f4\u16f5\7d\2\2\u16f5\u16f9\7\u047c\2\2\u16f6\u16f7\7\u00c0\2"+
		"\2\u16f7\u16f9\5\u02a2\u0152\2\u16f8\u16f4\3\2\2\2\u16f8\u16f6\3\2\2\2"+
		"\u16f9\u01eb\3\2\2\2\u16fa\u16fc\7\u027e\2\2\u16fb\u16fa\3\2\2\2\u16fb"+
		"\u16fc\3\2\2\2\u16fc\u16fd\3\2\2\2\u16fd\u170c\7\u019c\2\2\u16fe\u16ff"+
		"\7\u01df\2\2\u16ff\u170c\7\u027c\2\2\u1700\u170c\7\u022e\2\2\u1701\u170c"+
		"\7\u02d6\2\2\u1702\u1704\7\u01b6\2\2\u1703\u1702\3\2\2\2\u1703\u1704\3"+
		"\2\2\2\u1704\u1705\3\2\2\2\u1705\u170c\7\u0235\2\2\u1706\u170c\7\u0237"+
		"\2\2\u1707\u1708\7\u0268\2\2\u1708\u170c\7\u01c1\2\2\u1709\u170c\7\u0155"+
		"\2\2\u170a\u170c\7\u0181\2\2\u170b\u16fb\3\2\2\2\u170b\u16fe\3\2\2\2\u170b"+
		"\u1700\3\2\2\2\u170b\u1701\3\2\2\2\u170b\u1703\3\2\2\2\u170b\u1706\3\2"+
		"\2\2\u170b\u1707\3\2\2\2\u170b\u1709\3\2\2\2\u170b\u170a\3\2\2\2\u170c"+
		"\u01ed\3\2\2\2\u170d\u1716\7\u01a2\2\2\u170e\u170f\7\u00ae\2\2\u170f\u1716"+
		"\7\u027c\2\2\u1710\u1712\7\u01b6\2\2\u1711\u1710\3\2\2\2\u1711\u1712\3"+
		"\2\2\2\u1712\u1713\3\2\2\2\u1713\u1716\7\u02e7\2\2\u1714\u1716\7\u0291"+
		"\2\2\u1715\u170d\3\2\2\2\u1715\u170e\3\2\2\2\u1715\u1711\3\2\2\2\u1715"+
		"\u1714\3\2\2\2\u1716\u01ef\3\2\2\2\u1717\u1724\7\b\2\2\u1718\u1719\7\u015d"+
		"\2\2\u1719\u1724\7\u01cf\2\2\u171a\u171b\7\u0180\2\2\u171b\u1724\7\u0287"+
		"\2\2\u171c\u1724\7\u0183\2\2\u171d\u1724\7\u01d1\2\2\u171e\u1724\7\u0319"+
		"\2\2\u171f\u1720\7\u0222\2\2\u1720\u1724\7\u01ac\2\2\u1721\u1724\7\u026f"+
		"\2\2\u1722\u1724\7\u0286\2\2\u1723\u1717\3\2\2\2\u1723\u1718\3\2\2\2\u1723"+
		"\u171a\3\2\2\2\u1723\u171c\3\2\2\2\u1723\u171d\3\2\2\2\u1723\u171e\3\2"+
		"\2\2\u1723\u171f\3\2\2\2\u1723\u1721\3\2\2\2\u1723\u1722\3\2\2\2\u1724"+
		"\u01f1\3\2\2\2\u1725\u1726\7\u015b\2\2\u1726\u1727\7\u047c\2\2\u1727\u01f3"+
		"\3\2\2\2\u1728\u1729\7\u0161\2\2\u1729\u172a\7S\2\2\u172a\u172f\5\u0200"+
		"\u0101\2\u172b\u172c\7\u046f\2\2\u172c\u172e\5\u0200\u0101\2\u172d\u172b"+
		"\3\2\2\2\u172e\u1731\3\2\2\2\u172f\u172d\3\2\2\2\u172f\u1730\3\2\2\2\u1730"+
		"\u1739\3\2\2\2\u1731\u172f\3\2\2\2\u1732\u1733\7\u0083\2\2\u1733\u1736"+
		"\7\u046d\2\2\u1734\u1737\5\u025a\u012e\2\u1735\u1737\7\b\2\2\u1736\u1734"+
		"\3\2\2\2\u1736\u1735\3\2\2\2\u1737\u1738\3\2\2\2\u1738\u173a\7\u046e\2"+
		"\2\u1739\u1732\3\2\2\2\u1739\u173a\3\2\2\2\u173a\u173b\3\2\2\2\u173b\u173c"+
		"\7R\2\2\u173c\u173d\5\u023a\u011e\2\u173d\u01f5\3\2\2\2\u173e\u1740\7"+
		"\u01b2\2\2\u173f\u1741\tJ\2\2\u1740\u173f\3\2\2\2\u1740\u1741\3\2\2\2"+
		"\u1741\u1742\3\2\2\2\u1742\u1747\5\u0202\u0102\2\u1743\u1744\7\u046f\2"+
		"\2\u1744\u1746\5\u0202\u0102\2\u1745\u1743\3\2\2\2\u1746\u1749\3\2\2\2"+
		"\u1747\u1745\3\2\2\2\u1747\u1748\3\2\2\2\u1748\u01f7\3\2\2\2\u1749\u1747"+
		"\3\2\2\2\u174a\u174c\7_\2\2\u174b\u174d\tW\2\2\u174c\u174b\3\2\2\2\u174c"+
		"\u174d\3\2\2\2\u174d\u174e\3\2\2\2\u174e\u174f\5\u02a2\u0152\2\u174f\u01f9"+
		"\3\2\2\2\u1750\u1751\7h\2\2\u1751\u1752\7S\2\2\u1752\u1753\7Y\2\2\u1753"+
		"\u1754\7\u0161\2\2\u1754\u1759\5\u0206\u0104\2\u1755\u1756\7\u046f\2\2"+
		"\u1756\u1758\5\u0206\u0104\2\u1757\u1755\3\2\2\2\u1758\u175b\3\2\2\2\u1759"+
		"\u1757\3\2\2\2\u1759\u175a\3\2\2\2\u175a\u01fb\3\2\2\2\u175b\u1759\3\2"+
		"\2\2\u175c\u175d\7\u024f\2\2\u175d\u175e\7\u0239\2\2\u175e\u175f\7\u0161"+
		"\2\2\u175f\u01fd\3\2\2\2\u1760\u1761\7\u02e4\2\2\u1761\u01ff\3\2\2\2\u1762"+
		"\u176a\5\u0220\u0111\2\u1763\u1765\t\26\2\2\u1764\u1763\3\2\2\2\u1764"+
		"\u1765\3\2\2\2\u1765\u1766\3\2\2\2\u1766\u1767\7\u046d\2\2\u1767\u1768"+
		"\5\u025a\u012e\2\u1768\u1769\7\u046e\2\2\u1769\u176b\3\2\2\2\u176a\u1764"+
		"\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u0201\3\2\2\2\u176c\u177f\7\u018c\2"+
		"\2\u176d\u177f\7\u01c1\2\2\u176e\u1770\tX\2\2\u176f\u176e\3\2\2\2\u176f"+
		"\u1770\3\2\2\2\u1770\u1771\3\2\2\2\u1771\u177f\7\u01de\2\2\u1772\u177f"+
		"\7\u021e\2\2\u1773\u177f\7\u02d6\2\2\u1774\u1775\7\u0239\2\2\u1775\u177f"+
		"\7\u0161\2\2\u1776\u177f\7\u027c\2\2\u1777\u177f\7\u029d\2\2\u1778\u177c"+
		"\7\u02e7\2\2\u1779\u177a\7\u00c2\2\2\u177a\u177b\7\u0088\2\2\u177b\u177d"+
		"\7i\2\2\u177c\u1779\3\2\2\2\u177c\u177d\3\2\2\2\u177d\u177f\3\2\2\2\u177e"+
		"\u176c\3\2\2\2\u177e\u176d\3\2\2\2\u177e\u176f\3\2\2\2\u177e\u1772\3\2"+
		"\2\2\u177e\u1773\3\2\2\2\u177e\u1774\3\2\2\2\u177e\u1776\3\2\2\2\u177e"+
		"\u1777\3\2\2\2\u177e\u1778\3\2\2\2\u177f\u178d\3\2\2\2\u1780\u1781\7\u0240"+
		"\2\2\u1781\u1783\7\u01de\2\2\u1782\u1784\5\u0160\u00b1\2\u1783\u1782\3"+
		"\2\2\2\u1783\u1784\3\2\2\2\u1784\u178d\3\2\2\2\u1785\u1787\t8\2\2\u1786"+
		"\u1788\5\u025e\u0130\2\u1787\u1786\3\2\2\2\u1787\u1788\3\2\2\2\u1788\u178a"+
		"\3\2\2\2\u1789\u178b\5\u0204\u0103\2\u178a\u1789\3\2\2\2\u178a\u178b\3"+
		"\2\2\2\u178b\u178d\3\2\2\2\u178c\u177e\3\2\2\2\u178c\u1780\3\2\2\2\u178c"+
		"\u1785\3\2\2\2\u178d\u0203\3\2\2\2\u178e\u178f\7\u00c2\2\2\u178f\u1790"+
		"\7\u0088\2\2\u1790\u1794\7i\2\2\u1791\u1792\7C\2\2\u1792\u1794\7\u01a7"+
		"\2\2\u1793\u178e\3\2\2\2\u1793\u1791\3\2\2\2\u1794\u0205\3\2\2\2\u1795"+
		"\u179d\5\u0220\u0111\2\u1796\u1797\7\u0083\2\2\u1797\u179a\7\u046d\2\2"+
		"\u1798\u179b\5\u025a\u012e\2\u1799\u179b\7\b\2\2\u179a\u1798\3\2\2\2\u179a"+
		"\u1799\3\2\2\2\u179b\u179c\3\2\2\2\u179c\u179e\7\u046e\2\2\u179d\u1796"+
		"\3\2\2\2\u179d\u179e\3\2\2\2\u179e\u17a6\3\2\2\2\u179f\u17a1\t\26\2\2"+
		"\u17a0\u179f\3\2\2\2\u17a0\u17a1\3\2\2\2\u17a1\u17a2\3\2\2\2\u17a2\u17a3"+
		"\7\u046d\2\2\u17a3\u17a4\5\u025a\u012e\2\u17a4\u17a5\7\u046e\2\2\u17a5"+
		"\u17a7\3\2\2\2\u17a6\u17a0\3\2\2\2\u17a6\u17a7\3\2\2\2\u17a7\u17aa\3\2"+
		"\2\2\u17a8\u17a9\7P\2\2\u17a9\u17ab\7\u01d8\2\2\u17aa\u17a8\3\2\2\2\u17aa"+
		"\u17ab\3\2\2\2\u17ab\u0207\3\2\2\2\u17ac\u17ad\tY\2\2\u17ad\u17b0\5\u0220"+
		"\u0111\2\u17ae\u17b1\5\u023a\u011e\2\u17af\u17b1\7\u047c\2\2\u17b0\u17ae"+
		"\3\2\2\2\u17b0\u17af\3\2\2\2\u17b0\u17b1\3\2\2\2\u17b1\u0209\3\2\2\2\u17b2"+
		"\u17b6\tY\2\2\u17b3\u17b4\tZ\2\2\u17b4\u17b5\7\u0464\2\2\u17b5\u17b7\t"+
		"[\2\2\u17b6\u17b3\3\2\2\2\u17b6\u17b7\3\2\2\2\u17b7\u17b8\3\2\2\2\u17b8"+
		"\u17b9\5\u021c\u010f\2\u17b9\u020b\3\2\2\2\u17ba\u17bb\7\u01be\2\2\u17bb"+
		"\u17bc\7\u047c\2\2\u17bc\u020d\3\2\2\2\u17bd\u17be\7\u00bc\2\2\u17be\u17bf"+
		"\5\u023a\u011e\2\u17bf\u020f\3\2\2\2\u17c0\u17c8\7\u009e\2\2\u17c1\u17c3"+
		"\7\u00a4\2\2\u17c2\u17c4\7\u029f\2\2\u17c3\u17c2\3\2\2\2\u17c3\u17c4\3"+
		"\2\2\2\u17c4\u17c5\3\2\2\2\u17c5\u17c9\5\u0244\u0123\2\u17c6\u17c9\7\u0484"+
		"\2\2\u17c7\u17c9\7\u0485\2\2\u17c8\u17c1\3\2\2\2\u17c8\u17c6\3\2\2\2\u17c8"+
		"\u17c7\3\2\2\2\u17c9\u17d3\3\2\2\2\u17ca\u17cb\7\u009b\2\2\u17cb\u17d0"+
		"\5\u0214\u010b\2\u17cc\u17cd\7\u046f\2\2\u17cd\u17cf\5\u0214\u010b\2\u17ce"+
		"\u17cc\3\2\2\2\u17cf\u17d2\3\2\2\2\u17d0\u17ce\3\2\2\2\u17d0\u17d1\3\2"+
		"\2\2\u17d1\u17d4\3\2\2\2\u17d2\u17d0\3\2\2\2\u17d3\u17ca\3\2\2\2\u17d3"+
		"\u17d4\3\2\2\2\u17d4\u0211\3\2\2\2\u17d5\u17dd\7\u0091\2\2\u17d6\u17d8"+
		"\7\u00a4\2\2\u17d7\u17d9\7\u029f\2\2\u17d8\u17d7\3\2\2\2\u17d8\u17d9\3"+
		"\2\2\2\u17d9\u17da\3\2\2\2\u17da\u17de\5\u0244\u0123\2\u17db\u17de\7\u0484"+
		"\2\2\u17dc\u17de\7\u0485\2\2\u17dd\u17d6\3\2\2\2\u17dd\u17db\3\2\2\2\u17dd"+
		"\u17dc\3\2\2\2\u17dd\u17de\3\2\2\2\u17de\u17e8\3\2\2\2\u17df\u17e0\7\u009b"+
		"\2\2\u17e0\u17e5\5\u0214\u010b\2\u17e1\u17e2\7\u046f\2\2\u17e2\u17e4\5"+
		"\u0214\u010b\2\u17e3\u17e1\3\2\2\2\u17e4\u17e7\3\2\2\2\u17e5\u17e3\3\2"+
		"\2\2\u17e5\u17e6\3\2\2\2\u17e6\u17e9\3\2\2\2\u17e7\u17e5\3\2\2\2\u17e8"+
		"\u17df\3\2\2\2\u17e8\u17e9\3\2\2\2\u17e9\u0213\3\2\2\2\u17ea\u17eb\t\\"+
		"\2\2\u17eb\u17f0\7\u0464\2\2\u17ec\u17f1\5\u0244\u0123\2\u17ed\u17f1\7"+
		"\u047d\2\2\u17ee\u17f1\5\u022a\u0116\2\u17ef\u17f1\5\u023c\u011f\2\u17f0"+
		"\u17ec\3\2\2\2\u17f0\u17ed\3\2\2\2\u17f0\u17ee\3\2\2\2\u17f0\u17ef\3\2"+
		"\2\2\u17f1\u0215\3\2\2\2\u17f2\u17f4\7\u00c2\2\2\u17f3\u17f5\7\u023d\2"+
		"\2\u17f4\u17f3\3\2\2\2\u17f4\u17f5\3\2\2\2\u17f5\u17f6\3\2\2\2\u17f6\u17fb"+
		"\5\64\33\2\u17f7\u17f8\7\u046f\2\2\u17f8\u17fa\5\64\33\2\u17f9\u17f7\3"+
		"\2\2\2\u17fa\u17fd\3\2\2\2\u17fb\u17f9\3\2\2\2\u17fb\u17fc\3\2\2\2\u17fc"+
		"\u0217\3\2\2\2\u17fd\u17fb\3\2\2\2\u17fe\u1800\7I\2\2\u17ff\u1801\t]\2"+
		"\2\u1800\u17ff\3\2\2\2\u1800\u1801\3\2\2\2\u1801\u1802\3\2\2\2\u1802\u1822"+
		"\7\62\2\2\u1803\u1804\5\u01e6\u00f4\2\u1804\u1805\7\u0464\2\2\u1805\u180d"+
		"\t^\2\2\u1806\u1807\7\u046f\2\2\u1807\u1808\5\u01e6\u00f4\2\u1808\u1809"+
		"\7\u0464\2\2\u1809\u180a\t^\2\2\u180a\u180c\3\2\2\2\u180b\u1806\3\2\2"+
		"\2\u180c\u180f\3\2\2\2\u180d\u180b\3\2\2\2\u180d\u180e\3\2\2\2\u180e\u1823"+
		"\3\2\2\2\u180f\u180d\3\2\2\2\u1810\u1813\7\37\2\2\u1811\u1814\5\u0240"+
		"\u0121\2\u1812\u1814\5\u01e6\u00f4\2\u1813\u1811\3\2\2\2\u1813\u1812\3"+
		"\2\2\2\u1814\u1815\3\2\2\2\u1815\u1816\5\u01e6\u00f4\2\u1816\u1817\7\u0464"+
		"\2\2\u1817\u181f\5\u021a\u010e\2\u1818\u1819\7\u046f\2\2\u1819\u181a\5"+
		"\u01e6\u00f4\2\u181a\u181b\7\u0464\2\2\u181b\u181c\5\u021a\u010e\2\u181c"+
		"\u181e\3\2\2\2\u181d\u1818\3\2\2\2\u181e\u1821\3\2\2\2\u181f\u181d\3\2"+
		"\2\2\u181f\u1820\3\2\2\2\u1820\u1823\3\2\2\2\u1821\u181f\3\2\2\2\u1822"+
		"\u1803\3\2\2\2\u1822\u1810\3\2\2\2\u1823\u0219\3\2\2\2\u1824\u1825\t_"+
		"\2\2\u1825\u021b\3\2\2\2\u1826\u182c\5\u00c6d\2\u1827\u182c\5\u00b8]\2"+
		"\u1828\u182c\5\u00be`\2\u1829\u182c\5\u00c4c\2\u182a\u182c\5\u00c8e\2"+
		"\u182b\u1826\3\2\2\2\u182b\u1827\3\2\2\2\u182b\u1828\3\2\2\2\u182b\u1829"+
		"\3\2\2\2\u182b\u182a\3\2\2\2\u182c\u1831\3\2\2\2\u182d\u182e\7C\2\2\u182e"+
		"\u182f\7\u017a\2\2\u182f\u1831\5\u023a\u011e\2\u1830\u182b\3\2\2\2\u1830"+
		"\u182d\3\2\2\2\u1831\u021d\3\2\2\2\u1832\u1836\5\u023a\u011e\2\u1833\u1837"+
		"\7\u0483\2\2\u1834\u1835\7\u046c\2\2\u1835\u1837\5\u023a\u011e\2\u1836"+
		"\u1833\3\2\2\2\u1836\u1834\3\2\2\2\u1836\u1837\3\2\2\2\u1837\u021f\3\2"+
		"\2\2\u1838\u1839\5\u021e\u0110\2\u1839\u0221\3\2\2\2\u183a\u183d\5\u0228"+
		"\u0115\2\u183b\u183d\5\u023a\u011e\2\u183c\u183a\3\2\2\2\u183c\u183b\3"+
		"\2\2\2\u183d\u0223\3\2\2\2\u183e\u1843\5\u023a\u011e\2\u183f\u1841\5\u023e"+
		"\u0120\2\u1840\u1842\5\u023e\u0120\2\u1841\u1840\3\2\2\2\u1841\u1842\3"+
		"\2\2\2\u1842\u1844\3\2\2\2\u1843\u183f\3\2\2\2\u1843\u1844\3\2\2\2\u1844"+
		"\u184d\3\2\2\2\u1845\u1847\13\2\2\2\u1846\u1845\3\2\2\2\u1846\u1847\3"+
		"\2\2\2\u1847\u1848\3\2\2\2\u1848\u184a\5\u023e\u0120\2\u1849\u184b\5\u023e"+
		"\u0120\2\u184a\u1849\3\2\2\2\u184a\u184b\3\2\2\2\u184b\u184d\3\2\2\2\u184c"+
		"\u183e\3\2\2\2\u184c\u1846\3\2\2\2\u184d\u0225\3\2\2\2\u184e\u1851\5\u023a"+
		"\u011e\2\u184f\u1851\7\u047c\2\2\u1850\u184e\3\2\2\2\u1850\u184f\3\2\2"+
		"\2\u1851\u1856\3\2\2\2\u1852\u1853\7\u046d\2\2\u1853\u1854\5\u0240\u0121"+
		"\2\u1854\u1855\7\u046e\2\2\u1855\u1857\3\2\2\2\u1856\u1852\3\2\2\2\u1856"+
		"\u1857\3\2\2\2\u1857\u185a\3\2\2\2\u1858\u185a\5\u02a2\u0152\2\u1859\u1850"+
		"\3\2\2\2\u1859\u1858\3\2\2\2\u185a\u185c\3\2\2\2\u185b\u185d\t\62\2\2"+
		"\u185c\u185b\3\2\2\2\u185c\u185d\3\2\2\2\u185d\u0227\3\2\2\2\u185e\u1864"+
		"\7\u0486\2\2\u185f\u1864\7\u0484\2\2\u1860\u1864\7\u047c\2\2\u1861\u1864"+
		"\7\u02bb\2\2\u1862\u1864\5\u02be\u0160\2\u1863\u185e\3\2\2\2\u1863\u185f"+
		"\3\2\2\2\u1863\u1860\3\2\2\2\u1863\u1861\3\2\2\2\u1863\u1862\3\2\2\2\u1864"+
		"\u0229\3\2\2\2\u1865\u1866\t`\2\2\u1866\u022b\3\2\2\2\u1867\u186c\7\u00e4"+
		"\2\2\u1868\u186c\5\u02b4\u015b\2\u1869\u186c\7\u047c\2\2\u186a\u186c\7"+
		"\u0479\2\2\u186b\u1867\3\2\2\2\u186b\u1868\3\2\2\2\u186b\u1869\3\2\2\2"+
		"\u186b\u186a\3\2\2\2\u186c\u022d\3\2\2\2\u186d\u1870\5\u023a\u011e\2\u186e"+
		"\u1870\7\u047c\2\2\u186f\u186d\3\2\2\2\u186f\u186e\3\2\2\2\u1870\u022f"+
		"\3\2\2\2\u1871\u1872\ta\2\2\u1872\u0231\3\2\2\2\u1873\u1874\5\u0240\u0121"+
		"\2\u1874\u1875\7\u0461\2\2\u1875\u1876\5\u0240\u0121\2\u1876\u1877\7\u0461"+
		"\2\2\u1877\u1878\5\u0240\u0121\2\u1878\u1879\7\u0461\2\2\u1879\u187a\5"+
		"\u0240\u0121\2\u187a\u187b\7\u0461\2\2\u187b\u1881\5\u0240\u0121\2\u187c"+
		"\u187d\7\u0478\2\2\u187d\u187e\5\u0240\u0121\2\u187e\u187f\7\u0461\2\2"+
		"\u187f\u1880\5\u0240\u0121\2\u1880\u1882\3\2\2\2\u1881\u187c\3\2\2\2\u1882"+
		"\u1883\3\2\2\2\u1883\u1881\3\2\2\2\u1883\u1884\3\2\2\2\u1884\u0233\3\2"+
		"\2\2\u1885\u188c\5\u0236\u011c\2\u1886\u1887\7\u046f\2\2\u1887\u188a\5"+
		"\u0236\u011c\2\u1888\u1889\7\u046f\2\2\u1889\u188b\5\u0240\u0121\2\u188a"+
		"\u1888\3\2\2\2\u188a\u188b\3\2\2\2\u188b\u188d\3\2\2\2\u188c\u1886\3\2"+
		"\2\2\u188c\u188d\3\2\2\2\u188d\u0235\3\2\2\2\u188e\u1896\7\u047c\2\2\u188f"+
		"\u1896\7\u0481\2\2\u1890\u1892\7\u047e\2\2\u1891\u1890\3\2\2\2\u1892\u1893"+
		"\3\2\2\2\u1893\u1891\3\2\2\2\u1893\u1894\3\2\2\2\u1894\u1896\3\2\2\2\u1895"+
		"\u188e\3\2\2\2\u1895\u188f\3\2\2\2\u1895\u1891\3\2\2\2\u1896\u0237\3\2"+
		"\2\2\u1897\u189a\5\u023a\u011e\2\u1898\u189a\7\u047c\2\2\u1899\u1897\3"+
		"\2\2\2\u1899\u1898\3\2\2\2\u189a\u0239\3\2\2\2\u189b\u189f\5\u023c\u011f"+
		"\2\u189c\u189f\7\u0485\2\2\u189d\u189f\7\u0479\2\2\u189e\u189b\3\2\2\2"+
		"\u189e\u189c\3\2\2\2\u189e\u189d\3\2\2\2\u189f\u023b\3\2\2\2\u18a0\u18aa"+
		"\7\u0484\2\2\u18a1\u18aa\5\u02b4\u015b\2\u18a2\u18aa\5\u02b6\u015c\2\u18a3"+
		"\u18aa\5\u0230\u0119\2\u18a4\u18aa\5\u02b8\u015d\2\u18a5\u18aa\5\u02ba"+
		"\u015e\2\u18a6\u18aa\5\u02bc\u015f\2\u18a7\u18aa\5\u02be\u0160\2\u18a8"+
		"\u18aa\5\u029a\u014e\2\u18a9\u18a0\3\2\2\2\u18a9\u18a1\3\2\2\2\u18a9\u18a2"+
		"\3\2\2\2\u18a9\u18a3\3\2\2\2\u18a9\u18a4\3\2\2\2\u18a9\u18a5\3\2\2\2\u18a9"+
		"\u18a6\3\2\2\2\u18a9\u18a7\3\2\2\2\u18a9\u18a8\3\2\2\2\u18aa\u023d\3\2"+
		"\2\2\u18ab\u18af\7\u0483\2\2\u18ac\u18ad\7\u046c\2\2\u18ad\u18af\5\u023a"+
		"\u011e\2\u18ae\u18ab\3\2\2\2\u18ae\u18ac\3\2\2\2\u18af\u023f\3\2\2\2\u18b0"+
		"\u18b1\tb\2\2\u18b1\u0241\3\2\2\2\u18b2\u18b5\7\u047a\2\2\u18b3\u18b5"+
		"\5\u0240\u0121\2\u18b4\u18b2\3\2\2\2\u18b4\u18b3\3\2\2\2\u18b5\u0243\3"+
		"\2\2\2\u18b6\u18b8\7\u0482\2\2\u18b7\u18b6\3\2\2\2\u18b7\u18b8\3\2\2\2"+
		"\u18b8\u18b9\3\2\2\2\u18b9\u18bc\7\u047c\2\2\u18ba\u18bc\7\u047b\2\2\u18bb"+
		"\u18b7\3\2\2\2\u18bb\u18ba\3\2\2\2\u18bc\u18be\3\2\2\2\u18bd\u18bf\7\u047c"+
		"\2\2\u18be\u18bd\3\2\2\2\u18bf\u18c0\3\2\2\2\u18c0\u18be\3\2\2\2\u18c0"+
		"\u18c1\3\2\2\2\u18c1\u18ce\3\2\2\2\u18c2\u18c4\7\u0482\2\2\u18c3\u18c2"+
		"\3\2\2\2\u18c3\u18c4\3\2\2\2\u18c4\u18c5\3\2\2\2\u18c5\u18c8\7\u047c\2"+
		"\2\u18c6\u18c8\7\u047b\2\2\u18c7\u18c3\3\2\2\2\u18c7\u18c6\3\2\2\2\u18c8"+
		"\u18cb\3\2\2\2\u18c9\u18ca\7\35\2\2\u18ca\u18cc\5\u022e\u0118\2\u18cb"+
		"\u18c9\3\2\2\2\u18cb\u18cc\3\2\2\2\u18cc\u18ce\3\2\2\2\u18cd\u18bb\3\2"+
		"\2\2\u18cd\u18c7\3\2\2\2\u18ce\u0245\3\2\2\2\u18cf\u18d0\tc\2\2\u18d0"+
		"\u0247\3\2\2\2\u18d1\u18d3\7\u0482\2\2\u18d2\u18d1\3\2\2\2\u18d2\u18d3"+
		"\3\2\2\2\u18d3\u18d4\3\2\2\2\u18d4\u18d5\7\u047e\2\2\u18d5\u0249\3\2\2"+
		"\2\u18d6\u18d8\7t\2\2\u18d7\u18d6\3\2\2\2\u18d7\u18d8\3\2\2\2\u18d8\u18d9"+
		"\3\2\2\2\u18d9\u18da\td\2\2\u18da\u024b\3\2\2\2\u18db\u18e8\5\u0244\u0123"+
		"\2\u18dc\u18e8\5\u0240\u0121\2\u18dd\u18de\7\u0461\2\2\u18de\u18e8\5\u0240"+
		"\u0121\2\u18df\u18e8\5\u0248\u0125\2\u18e0\u18e8\5\u0246\u0124\2\u18e1"+
		"\u18e8\7\u047f\2\2\u18e2\u18e8\7\u0481\2\2\u18e3\u18e5\7t\2\2\u18e4\u18e3"+
		"\3\2\2\2\u18e4\u18e5\3\2\2\2\u18e5\u18e6\3\2\2\2\u18e6\u18e8\td\2\2\u18e7"+
		"\u18db\3\2\2\2\u18e7\u18dc\3\2\2\2\u18e7\u18dd\3\2\2\2\u18e7\u18df\3\2"+
		"\2\2\u18e7\u18e0\3\2\2\2\u18e7\u18e1\3\2\2\2\u18e7\u18e2\3\2\2\2\u18e7"+
		"\u18e4\3\2\2\2\u18e8\u024d\3\2\2\2\u18e9\u18eb\te\2\2\u18ea\u18ec\7\u00f0"+
		"\2\2\u18eb\u18ea\3\2\2\2\u18eb\u18ec\3\2\2\2\u18ec\u18ee\3\2\2\2\u18ed"+
		"\u18ef\5\u0254\u012b\2\u18ee\u18ed\3\2\2\2\u18ee\u18ef\3\2\2\2\u18ef\u18f1"+
		"\3\2\2\2\u18f0\u18f2\7\u00e4\2\2\u18f1\u18f0\3\2\2\2\u18f1\u18f2\3\2\2"+
		"\2\u18f2\u18f6\3\2\2\2\u18f3\u18f4\5> \2\u18f4\u18f5\5\u022c\u0117\2\u18f5"+
		"\u18f7\3\2\2\2\u18f6\u18f3\3\2\2\2\u18f6\u18f7\3\2\2\2\u18f7\u18fb\3\2"+
		"\2\2\u18f8\u18f9\7\35\2\2\u18f9\u18fc\5\u022e\u0118\2\u18fa\u18fc\7\u00e4"+
		"\2\2\u18fb\u18f8\3\2\2\2\u18fb\u18fa\3\2\2\2\u18fb\u18fc\3\2\2\2\u18fc"+
		"\u1968\3\2\2\2\u18fd\u18fe\7\u00e3\2\2\u18fe\u18ff\tf\2\2\u18ff\u1901"+
		"\7\u00f0\2\2\u1900\u1902\5\u0254\u012b\2\u1901\u1900\3\2\2\2\u1901\u1902"+
		"\3\2\2\2\u1902\u1904\3\2\2\2\u1903\u1905\7\u00e4\2\2\u1904\u1903\3\2\2"+
		"\2\u1904\u1905\3\2\2\2\u1905\u1968\3\2\2\2\u1906\u1907\7\u00e3\2\2\u1907"+
		"\u1909\tg\2\2\u1908\u190a\5\u0254\u012b\2\u1909\u1908\3\2\2\2\u1909\u190a"+
		"\3\2\2\2\u190a\u190c\3\2\2\2\u190b\u190d\7\u00e4\2\2\u190c\u190b\3\2\2"+
		"\2\u190c\u190d\3\2\2\2\u190d\u1968\3\2\2\2\u190e\u190f\7\u0208\2\2\u190f"+
		"\u1911\7\u00e1\2\2\u1910\u1912\5\u0254\u012b\2\u1911\u1910\3\2\2\2\u1911"+
		"\u1912\3\2\2\2\u1912\u1914\3\2\2\2\u1913\u1915\7\u00e4\2\2\u1914\u1913"+
		"\3\2\2\2\u1914\u1915\3\2\2\2\u1915\u1968\3\2\2\2\u1916\u1918\th\2\2\u1917"+
		"\u1919\5\u0254\u012b\2\u1918\u1917\3\2\2\2\u1918\u1919\3\2\2\2\u1919\u191d"+
		"\3\2\2\2\u191a\u191c\ti\2\2\u191b\u191a\3\2\2\2\u191c\u191f\3\2\2\2\u191d"+
		"\u191b\3\2\2\2\u191d\u191e\3\2\2\2\u191e\u1968\3\2\2\2\u191f\u191d\3\2"+
		"\2\2\u1920\u1922\7\u00d2\2\2\u1921\u1923\5\u0256\u012c\2\u1922\u1921\3"+
		"\2\2\2\u1922\u1923\3\2\2\2\u1923\u1927\3\2\2\2\u1924\u1926\ti\2\2\u1925"+
		"\u1924\3\2\2\2\u1926\u1929\3\2\2\2\u1927\u1925\3\2\2\2\u1927\u1928\3\2"+
		"\2\2\u1928\u1968\3\2\2\2\u1929\u1927\3\2\2\2\u192a\u192c\7\u00d3\2\2\u192b"+
		"\u192d\7\u00d4\2\2\u192c\u192b\3\2\2\2\u192c\u192d\3\2\2\2\u192d\u192f"+
		"\3\2\2\2\u192e\u1930\5\u0256\u012c\2\u192f\u192e\3\2\2\2\u192f\u1930\3"+
		"\2\2\2\u1930\u1934\3\2\2\2\u1931\u1933\ti\2\2\u1932\u1931\3\2\2\2\u1933"+
		"\u1936\3\2\2\2\u1934\u1932\3\2\2\2\u1934\u1935\3\2\2\2\u1935\u1968\3\2"+
		"\2\2\u1936\u1934\3\2\2\2\u1937\u1939\tj\2\2\u1938\u193a\5\u0258\u012d"+
		"\2\u1939\u1938\3\2\2\2\u1939\u193a\3\2\2\2\u193a\u193e\3\2\2\2\u193b\u193d"+
		"\ti\2\2\u193c\u193b\3\2\2\2\u193d\u1940\3\2\2\2\u193e\u193c\3\2\2\2\u193e"+
		"\u193f\3\2\2\2\u193f\u1968\3\2\2\2\u1940\u193e\3\2\2\2\u1941\u1968\tk"+
		"\2\2\u1942\u1944\tl\2\2\u1943\u1945\5\u0254\u012b\2\u1944\u1943\3\2\2"+
		"\2\u1944\u1945\3\2\2\2\u1945\u1968\3\2\2\2\u1946\u1947\tm\2\2\u1947\u1949"+
		"\5\u0250\u0129\2\u1948\u194a\7\u00e4\2\2\u1949\u1948\3\2\2\2\u1949\u194a"+
		"\3\2\2\2\u194a\u194e\3\2\2\2\u194b\u194c\5> \2\u194c\u194d\5\u022c\u0117"+
		"\2\u194d\u194f\3\2\2\2\u194e\u194b\3\2\2\2\u194e\u194f\3\2\2\2\u194f\u1968"+
		"\3\2\2\2\u1950\u1953\tn\2\2\u1951\u1952\7\u03f4\2\2\u1952\u1954\5\u0240"+
		"\u0121\2\u1953\u1951\3\2\2\2\u1953\u1954\3\2\2\2\u1954\u1968\3\2\2\2\u1955"+
		"\u1957\7\u00e9\2\2\u1956\u1958\7\u00e1\2\2\u1957\u1956\3\2\2\2\u1957\u1958"+
		"\3\2\2\2\u1958\u195a\3\2\2\2\u1959\u195b\7\u00e4\2\2\u195a\u1959\3\2\2"+
		"\2\u195a\u195b\3\2\2\2\u195b\u195f\3\2\2\2\u195c\u195d\5> \2\u195d\u195e"+
		"\5\u022c\u0117\2\u195e\u1960\3\2\2\2\u195f\u195c\3\2\2\2\u195f\u1960\3"+
		"\2\2\2\u1960\u1963\3\2\2\2\u1961\u1962\7\35\2\2\u1962\u1964\5\u022e\u0118"+
		"\2\u1963\u1961\3\2\2\2\u1963\u1964\3\2\2\2\u1964\u1968\3\2\2\2\u1965\u1966"+
		"\7\u00e9\2\2\u1966\u1968\7\u00e5\2\2\u1967\u18e9\3\2\2\2\u1967\u18fd\3"+
		"\2\2\2\u1967\u1906\3\2\2\2\u1967\u190e\3\2\2\2\u1967\u1916\3\2\2\2\u1967"+
		"\u1920\3\2\2\2\u1967\u192a\3\2\2\2\u1967\u1937\3\2\2\2\u1967\u1941\3\2"+
		"\2\2\u1967\u1942\3\2\2\2\u1967\u1946\3\2\2\2\u1967\u1950\3\2\2\2\u1967"+
		"\u1955\3\2\2\2\u1967\u1965\3\2\2\2\u1968\u024f\3\2\2\2\u1969\u196a\7\u046d"+
		"\2\2\u196a\u196f\7\u047c\2\2\u196b\u196c\7\u046f\2\2\u196c\u196e\7\u047c"+
		"\2\2\u196d\u196b\3\2\2\2\u196e\u1971\3\2\2\2\u196f\u196d\3\2\2\2\u196f"+
		"\u1970\3\2\2\2\u1970\u1972\3\2\2\2\u1971\u196f\3\2\2\2\u1972\u1973\7\u046e"+
		"\2\2\u1973\u0251\3\2\2\2\u1974\u1976\to\2\2\u1975\u1977\5\u0254\u012b"+
		"\2\u1976\u1975\3\2\2\2\u1976\u1977\3\2\2\2\u1977\u198b\3\2\2\2\u1978\u197a"+
		"\7\u00e0\2\2\u1979\u197b\5\u0254\u012b\2\u197a\u1979\3\2\2\2\u197a\u197b"+
		"\3\2\2\2\u197b\u197f\3\2\2\2\u197c\u197d\5> \2\u197d\u197e\5\u022c\u0117"+
		"\2\u197e\u1980\3\2\2\2\u197f\u197c\3\2\2\2\u197f\u1980\3\2\2\2\u1980\u198b"+
		"\3\2\2\2\u1981\u198b\tp\2\2\u1982\u1984\7\u00d8\2\2\u1983\u1985\5\u0258"+
		"\u012d\2\u1984\u1983\3\2\2\2\u1984\u1985\3\2\2\2\u1985\u198b\3\2\2\2\u1986"+
		"\u1988\tq\2\2\u1987\u1989\7\u00d0\2\2\u1988\u1987\3\2\2\2\u1988\u1989"+
		"\3\2\2\2\u1989\u198b\3\2\2\2\u198a\u1974\3\2\2\2\u198a\u1978\3\2\2\2\u198a"+
		"\u1981\3\2\2\2\u198a\u1982\3\2\2\2\u198a\u1986\3\2\2\2\u198b\u198d\3\2"+
		"\2\2\u198c\u198e\7\r\2\2\u198d\u198c\3\2\2\2\u198d\u198e\3\2\2\2\u198e"+
		"\u0253\3\2\2\2\u198f\u1990\7\u046d\2\2\u1990\u1991\5\u0240\u0121\2\u1991"+
		"\u1992\7\u046e\2\2\u1992\u0255\3\2\2\2\u1993\u1994\7\u046d\2\2\u1994\u1995"+
		"\5\u0240\u0121\2\u1995\u1996\7\u046f\2\2\u1996\u1997\5\u0240\u0121\2\u1997"+
		"\u1998\7\u046e\2\2\u1998\u0257\3\2\2\2\u1999\u199a\7\u046d\2\2\u199a\u199d"+
		"\5\u0240\u0121\2\u199b\u199c\7\u046f\2\2\u199c\u199e\5\u0240\u0121\2\u199d"+
		"\u199b\3\2\2\2\u199d\u199e\3\2\2\2\u199e\u199f\3\2\2\2\u199f\u19a0\7\u046e"+
		"\2\2\u19a0\u0259\3\2\2\2\u19a1\u19a6\5\u023a\u011e\2\u19a2\u19a3\7\u046f"+
		"\2\2\u19a3\u19a5\5\u023a\u011e\2\u19a4\u19a2\3\2\2\2\u19a5\u19a8\3\2\2"+
		"\2\u19a6\u19a4\3\2\2\2\u19a6\u19a7\3\2\2\2\u19a7\u025b\3\2\2\2\u19a8\u19a6"+
		"\3\2\2\2\u19a9\u19ae\5\u0224\u0113\2\u19aa\u19ab\7\u046f\2\2\u19ab\u19ad"+
		"\5\u0224\u0113\2\u19ac\u19aa\3\2\2\2\u19ad\u19b0\3\2\2\2\u19ae\u19ac\3"+
		"\2\2\2\u19ae\u19af\3\2\2\2\u19af\u025d\3\2\2\2\u19b0\u19ae\3\2\2\2\u19b1"+
		"\u19b6\5\u0220\u0111\2\u19b2\u19b3\7\u046f\2\2\u19b3\u19b5\5\u0220\u0111"+
		"\2\u19b4\u19b2\3\2\2\2\u19b5\u19b8\3\2\2\2\u19b6\u19b4\3\2\2\2\u19b6\u19b7"+
		"\3\2\2\2\u19b7\u025f\3\2\2\2\u19b8\u19b6\3\2\2\2\u19b9\u19ba\7\u046d\2"+
		"\2\u19ba\u19bf\5\u0226\u0114\2\u19bb\u19bc\7\u046f\2\2\u19bc\u19be\5\u0226"+
		"\u0114\2\u19bd\u19bb\3\2\2\2\u19be\u19c1\3\2\2\2\u19bf\u19bd\3\2\2\2\u19bf"+
		"\u19c0\3\2\2\2\u19c0\u19c2\3\2\2\2\u19c1\u19bf\3\2\2\2\u19c2\u19c3\7\u046e"+
		"\2\2\u19c3\u0261\3\2\2\2\u19c4\u19c9\5\u02a2\u0152\2\u19c5\u19c6\7\u046f"+
		"\2\2\u19c6\u19c8\5\u02a2\u0152\2\u19c7\u19c5\3\2\2\2\u19c8\u19cb\3\2\2"+
		"\2\u19c9\u19c7\3\2\2\2\u19c9\u19ca\3\2\2\2\u19ca\u0263\3\2\2\2\u19cb\u19c9"+
		"\3\2\2\2\u19cc\u19d1\5\u0270\u0139\2\u19cd\u19ce\7\u046f\2\2\u19ce\u19d0"+
		"\5\u0270\u0139\2\u19cf\u19cd\3\2\2\2\u19d0\u19d3\3\2\2\2\u19d1\u19cf\3"+
		"\2\2\2\u19d1\u19d2\3\2\2\2\u19d2\u0265\3\2\2\2\u19d3\u19d1\3\2\2\2\u19d4"+
		"\u19d9\5\u024c\u0127\2\u19d5\u19d6\7\u046f\2\2\u19d6\u19d8\5\u024c\u0127"+
		"\2\u19d7\u19d5\3\2\2\2\u19d8\u19db\3\2\2\2\u19d9\u19d7\3\2\2\2\u19d9\u19da"+
		"\3\2\2\2\u19da\u0267\3\2\2\2\u19db\u19d9\3\2\2\2\u19dc\u19e1\7\u047c\2"+
		"\2\u19dd\u19de\7\u046f\2\2\u19de\u19e0\7\u047c\2\2\u19df\u19dd\3\2\2\2"+
		"\u19e0\u19e3\3\2\2\2\u19e1\u19df\3\2\2\2\u19e1\u19e2\3\2\2\2\u19e2\u0269"+
		"\3\2\2\2\u19e3\u19e1\3\2\2\2\u19e4\u19e9\7\u0488\2\2\u19e5\u19e6\7\u046f"+
		"\2\2\u19e6\u19e8\7\u0488\2\2\u19e7\u19e5\3\2\2\2\u19e8\u19eb\3\2\2\2\u19e9"+
		"\u19e7\3\2\2\2\u19e9\u19ea\3\2\2\2\u19ea\u026b\3\2\2\2\u19eb\u19e9\3\2"+
		"\2\2\u19ec\u1a07\7v\2\2\u19ed\u19ee\7\31\2\2\u19ee\u19ef\7\u046d\2\2\u19ef"+
		"\u19f0\5\u02a2\u0152\2\u19f0\u19f1\7\16\2\2\u19f1\u19f2\5\u0252\u012a"+
		"\2\u19f2\u19f3\7\u046e\2\2\u19f3\u1a07\3\2\2\2\u19f4\u19f6\5\u02a8\u0155"+
		"\2\u19f5\u19f4\3\2\2\2\u19f5\u19f6\3\2\2\2\u19f6\u19f7\3\2\2\2\u19f7\u1a07"+
		"\5\u024c\u0127\2\u19f8\u19fc\5\u026e\u0138\2\u19f9\u19fa\7x\2\2\u19fa"+
		"\u19fb\7\u00ba\2\2\u19fb\u19fd\5\u026e\u0138\2\u19fc\u19f9\3\2\2\2\u19fc"+
		"\u19fd\3\2\2\2\u19fd\u1a07\3\2\2\2\u19fe\u19ff\7\u046d\2\2\u19ff\u1a00"+
		"\5\u02a2\u0152\2\u1a00\u1a01\7\u046e\2\2\u1a01\u1a07\3\2\2\2\u1a02\u1a03"+
		"\7\u046d\2\2\u1a03\u1a04\5\u021e\u0110\2\u1a04\u1a05\7\u046e\2\2\u1a05"+
		"\u1a07\3\2\2\2\u1a06\u19ec\3\2\2\2\u1a06\u19ed\3\2\2\2\u1a06\u19f5\3\2"+
		"\2\2\u1a06\u19f8\3\2\2\2\u1a06\u19fe\3\2\2\2\u1a06\u1a02\3\2\2\2\u1a07"+
		"\u026d\3\2\2\2\u1a08\u1a0e\tr\2\2\u1a09\u1a0b\7\u046d\2\2\u1a0a\u1a0c"+
		"\5\u0240\u0121\2\u1a0b\u1a0a\3\2\2\2\u1a0b\u1a0c\3\2\2\2\u1a0c\u1a0d\3"+
		"\2\2\2\u1a0d\u1a0f\7\u046e\2\2\u1a0e\u1a09\3\2\2\2\u1a0e\u1a0f\3\2\2\2"+
		"\u1a0f\u1a17\3\2\2\2\u1a10\u1a11\7\u0145\2\2\u1a11\u1a13\7\u046d\2\2\u1a12"+
		"\u1a14\5\u0240\u0121\2\u1a13\u1a12\3\2\2\2\u1a13\u1a14\3\2\2\2\u1a14\u1a15"+
		"\3\2\2\2\u1a15\u1a17\7\u046e\2\2\u1a16\u1a08\3\2\2\2\u1a16\u1a10\3\2\2"+
		"\2\u1a17\u026f\3\2\2\2\u1a18\u1a1b\5\u02a2\u0152\2\u1a19\u1a1b\7,\2\2"+
		"\u1a1a\u1a18\3\2\2\2\u1a1a\u1a19\3\2\2\2\u1a1b\u0271\3\2\2\2\u1a1c\u1a1d"+
		"\7O\2\2\u1a1d\u1a1e\7>\2\2\u1a1e\u0273\3\2\2\2\u1a1f\u1a20\7O\2\2\u1a20"+
		"\u1a21\7t\2\2\u1a21\u1a22\7>\2\2\u1a22\u0275\3\2\2\2\u1a23\u1a24\7}\2"+
		"\2\u1a24\u1a25\7\u008f\2\2\u1a25\u0277\3\2\2\2\u1a26\u1a27\7\u02a4\2\2"+
		"\u1a27\u1a2a\5\u0240\u0121\2\u1a28\u1a2a\7\u0211\2\2\u1a29\u1a26\3\2\2"+
		"\2\u1a29\u1a28\3\2\2\2\u1a2a\u0279\3\2\2\2\u1a2b\u1a3e\5\u027c\u013f\2"+
		"\u1a2c\u1a3e\5\u0284\u0143\2\u1a2d\u1a3e\5\u0286\u0144\2\u1a2e\u1a2f\5"+
		"\u029a\u014e\2\u1a2f\u1a31\7\u046d\2\2\u1a30\u1a32\5\u029e\u0150\2\u1a31"+
		"\u1a30\3\2\2\2\u1a31\u1a32\3\2\2\2\u1a32\u1a33\3\2\2\2\u1a33\u1a34\7\u046e"+
		"\2\2\u1a34\u1a3e\3\2\2\2\u1a35\u1a36\5\u021e\u0110\2\u1a36\u1a38\7\u046d"+
		"\2\2\u1a37\u1a39\5\u029e\u0150\2\u1a38\u1a37\3\2\2\2\u1a38\u1a39\3\2\2"+
		"\2\u1a39\u1a3a\3\2\2\2\u1a3a\u1a3b\7\u046e\2\2\u1a3b\u1a3e\3\2\2\2\u1a3c"+
		"\u1a3e\5\u029c\u014f\2\u1a3d\u1a2b\3\2\2\2\u1a3d\u1a2c\3\2\2\2\u1a3d\u1a2d"+
		"\3\2\2\2\u1a3d\u1a2e\3\2\2\2\u1a3d\u1a35\3\2\2\2\u1a3d\u1a3c\3\2\2\2\u1a3e"+
		"\u027b\3\2\2\2\u1a3f\u1a42\ts\2\2\u1a40\u1a41\7\u046d\2\2\u1a41\u1a43"+
		"\7\u046e\2\2\u1a42\u1a40\3\2\2\2\u1a42\u1a43\3\2\2\2\u1a43\u1af2\3\2\2"+
		"\2\u1a44\u1a45\7\"\2\2\u1a45\u1a46\7\u046d\2\2\u1a46\u1a47\5\u02a2\u0152"+
		"\2\u1a47\u1a48\7\u046f\2\2\u1a48\u1a49\5\u0252\u012a\2\u1a49\u1a4a\7\u046e"+
		"\2\2\u1a4a\u1af2\3\2\2\2\u1a4b\u1a4c\7\"\2\2\u1a4c\u1a4d\7\u046d\2\2\u1a4d"+
		"\u1a4e\5\u02a2\u0152\2\u1a4e\u1a4f\7\u00bd\2\2\u1a4f\u1a50\5\u022c\u0117"+
		"\2\u1a50\u1a51\7\u046e\2\2\u1a51\u1af2\3\2\2\2\u1a52\u1a53\7\31\2\2\u1a53"+
		"\u1a54\7\u046d\2\2\u1a54\u1a55\5\u02a2\u0152\2\u1a55\u1a56\7\16\2\2\u1a56"+
		"\u1a57\5\u0252\u012a\2\u1a57\u1a58\7\u046e\2\2\u1a58\u1af2\3\2\2\2\u1a59"+
		"\u1a5a\7\u00be\2\2\u1a5a\u1a5b\7\u046d\2\2\u1a5b\u1a5c\5\u0224\u0113\2"+
		"\u1a5c\u1a5d\7\u046e\2\2\u1a5d\u1af2\3\2\2\2\u1a5e\u1a5f\7\30\2\2\u1a5f"+
		"\u1a61\5\u02a2\u0152\2\u1a60\u1a62\5\u027e\u0140\2\u1a61\u1a60\3\2\2\2"+
		"\u1a62\u1a63\3\2\2\2\u1a63\u1a61\3\2\2\2\u1a63\u1a64\3\2\2\2\u1a64\u1a67"+
		"\3\2\2\2\u1a65\u1a66\7\67\2\2\u1a66\u1a68\5\u02a0\u0151\2\u1a67\u1a65"+
		"\3\2\2\2\u1a67\u1a68\3\2\2\2\u1a68\u1a69\3\2\2\2\u1a69\u1a6a\7\u0199\2"+
		"\2\u1a6a\u1af2\3\2\2\2\u1a6b\u1a6d\7\30\2\2\u1a6c\u1a6e\5\u027e\u0140"+
		"\2\u1a6d\u1a6c\3\2\2\2\u1a6e\u1a6f\3\2\2\2\u1a6f\u1a6d\3\2\2\2\u1a6f\u1a70"+
		"\3\2\2\2\u1a70\u1a73\3\2\2\2\u1a71\u1a72\7\67\2\2\u1a72\u1a74\5\u02a0"+
		"\u0151\2\u1a73\u1a71\3\2\2\2\u1a73\u1a74\3\2\2\2\u1a74\u1a75\3\2\2\2\u1a75"+
		"\u1a76\7\u0199\2\2\u1a76\u1af2\3\2\2\2\u1a77\u1a78\7\u00e0\2\2\u1a78\u1a79"+
		"\7\u046d\2\2\u1a79\u1a7c\5\u029e\u0150\2\u1a7a\u1a7b\7\u00bd\2\2\u1a7b"+
		"\u1a7d\5\u022c\u0117\2\u1a7c\u1a7a\3\2\2\2\u1a7c\u1a7d\3\2\2\2\u1a7d\u1a7e"+
		"\3\2\2\2\u1a7e\u1a7f\7\u046e\2\2\u1a7f\u1af2\3\2\2\2\u1a80\u1a81\7\u0146"+
		"\2\2\u1a81\u1a84\7\u046d\2\2\u1a82\u1a85\5\u0244\u0123\2\u1a83\u1a85\5"+
		"\u02a2\u0152\2\u1a84\u1a82\3\2\2\2\u1a84\u1a83\3\2\2\2\u1a85\u1a86\3\2"+
		"\2\2\u1a86\u1a89\7R\2\2\u1a87\u1a8a\5\u0244\u0123\2\u1a88\u1a8a\5\u02a2"+
		"\u0152\2\u1a89\u1a87\3\2\2\2\u1a89\u1a88\3\2\2\2\u1a8a\u1a8b\3\2\2\2\u1a8b"+
		"\u1a8c\7\u046e\2\2\u1a8c\u1af2\3\2\2\2\u1a8d\u1a8e\tt\2\2\u1a8e\u1a91"+
		"\7\u046d\2\2\u1a8f\u1a92\5\u0244\u0123\2\u1a90\u1a92\5\u02a2\u0152\2\u1a91"+
		"\u1a8f\3\2\2\2\u1a91\u1a90\3\2\2\2\u1a92\u1a93\3\2\2\2\u1a93\u1a96\7F"+
		"\2\2\u1a94\u1a97\5\u0240\u0121\2\u1a95\u1a97\5\u02a2\u0152\2\u1a96\u1a94"+
		"\3\2\2\2\u1a96\u1a95\3\2\2\2\u1a97\u1a9d\3\2\2\2\u1a98\u1a9b\7C\2\2\u1a99"+
		"\u1a9c\5\u0240\u0121\2\u1a9a\u1a9c\5\u02a2\u0152\2\u1a9b\u1a99\3\2\2\2"+
		"\u1a9b\u1a9a\3\2\2\2\u1a9c\u1a9e\3\2\2\2\u1a9d\u1a98\3\2\2\2\u1a9d\u1a9e"+
		"\3\2\2\2\u1a9e\u1a9f\3\2\2\2\u1a9f\u1aa0\7\u046e\2\2\u1aa0\u1af2\3\2\2"+
		"\2\u1aa1\u1aa2\7\u014a\2\2\u1aa2\u1aa3\7\u046d\2\2\u1aa3\u1aa6\tu\2\2"+
		"\u1aa4\u1aa7\5\u0244\u0123\2\u1aa5\u1aa7\5\u02a2\u0152\2\u1aa6\u1aa4\3"+
		"\2\2\2\u1aa6\u1aa5\3\2\2\2\u1aa6\u1aa7\3\2\2\2\u1aa7\u1aa8\3\2\2\2\u1aa8"+
		"\u1aab\7F\2\2\u1aa9\u1aac\5\u0244\u0123\2\u1aaa\u1aac\5\u02a2\u0152\2"+
		"\u1aab\u1aa9\3\2\2\2\u1aab\u1aaa\3\2\2\2\u1aac\u1aad\3\2\2\2\u1aad\u1aae"+
		"\7\u046e\2\2\u1aae\u1af2\3\2\2\2\u1aaf\u1ab0\7\u014a\2\2\u1ab0\u1ab3\7"+
		"\u046d\2\2\u1ab1\u1ab4\5\u0244\u0123\2\u1ab2\u1ab4\5\u02a2\u0152\2\u1ab3"+
		"\u1ab1\3\2\2\2\u1ab3\u1ab2\3\2\2\2\u1ab4\u1ab5\3\2\2\2\u1ab5\u1ab8\7F"+
		"\2\2\u1ab6\u1ab9";
	private static final String _serializedATNSegment3 =
		"\5\u0244\u0123\2\u1ab7\u1ab9\5\u02a2\u0152\2\u1ab8\u1ab6\3\2\2\2\u1ab8"+
		"\u1ab7\3\2\2\2\u1ab9\u1aba\3\2\2\2\u1aba\u1abb\7\u046e\2\2\u1abb\u1af2"+
		"\3\2\2\2\u1abc\u1abd\7\u044f\2\2\u1abd\u1ac0\7\u046d\2\2\u1abe\u1ac1\5"+
		"\u0244\u0123\2\u1abf\u1ac1\5\u02a2\u0152\2\u1ac0\u1abe\3\2\2\2\u1ac0\u1abf"+
		"\3\2\2\2\u1ac1\u1ac8\3\2\2\2\u1ac2\u1ac3\7\16\2\2\u1ac3\u1ac4\tv\2\2\u1ac4"+
		"\u1ac5\7\u046d\2\2\u1ac5\u1ac6\5\u0240\u0121\2\u1ac6\u1ac7\7\u046e\2\2"+
		"\u1ac7\u1ac9\3\2\2\2\u1ac8\u1ac2\3\2\2\2\u1ac8\u1ac9\3\2\2\2\u1ac9\u1acb"+
		"\3\2\2\2\u1aca\u1acc\5\u0280\u0141\2\u1acb\u1aca\3\2\2\2\u1acb\u1acc\3"+
		"\2\2\2\u1acc\u1acd\3\2\2\2\u1acd\u1ace\7\u046e\2\2\u1ace\u1af2\3\2\2\2"+
		"\u1acf\u1ad0\7\u0143\2\2\u1ad0\u1ad1\7\u046d\2\2\u1ad1\u1ad2\5H%\2\u1ad2"+
		"\u1ad5\7F\2\2\u1ad3\u1ad6\5\u0244\u0123\2\u1ad4\u1ad6\5\u02a2\u0152\2"+
		"\u1ad5\u1ad3\3\2\2\2\u1ad5\u1ad4\3\2\2\2\u1ad6\u1ad7\3\2\2\2\u1ad7\u1ad8"+
		"\7\u046e\2\2\u1ad8\u1af2\3\2\2\2\u1ad9\u1ada\7\u0385\2\2\u1ada\u1adb\7"+
		"\u046d\2\2\u1adb\u1adc\tw\2\2\u1adc\u1add\7\u046f\2\2\u1add\u1ade\5\u0244"+
		"\u0123\2\u1ade\u1adf\7\u046e\2\2\u1adf\u1af2\3\2\2\2\u1ae0\u1ae1\7\u011c"+
		"\2\2\u1ae1\u1ae2\7\u046d\2\2\u1ae2\u1ae3\5\u02a2\u0152\2\u1ae3\u1ae4\7"+
		"\u046f\2\2\u1ae4\u1ae7\5\u02a2\u0152\2\u1ae5\u1ae6\7\u0253\2\2\u1ae6\u1ae8"+
		"\5\u0252\u012a\2\u1ae7\u1ae5\3\2\2\2\u1ae7\u1ae8\3\2\2\2\u1ae8\u1aea\3"+
		"\2\2\2\u1ae9\u1aeb\5\u0108\u0085\2\u1aea\u1ae9\3\2\2\2\u1aea\u1aeb\3\2"+
		"\2\2\u1aeb\u1aed\3\2\2\2\u1aec\u1aee\5\u010a\u0086\2\u1aed\u1aec\3\2\2"+
		"\2\u1aed\u1aee\3\2\2\2\u1aee\u1aef\3\2\2\2\u1aef\u1af0\7\u046e\2\2\u1af0"+
		"\u1af2\3\2\2\2\u1af1\u1a3f\3\2\2\2\u1af1\u1a44\3\2\2\2\u1af1\u1a4b\3\2"+
		"\2\2\u1af1\u1a52\3\2\2\2\u1af1\u1a59\3\2\2\2\u1af1\u1a5e\3\2\2\2\u1af1"+
		"\u1a6b\3\2\2\2\u1af1\u1a77\3\2\2\2\u1af1\u1a80\3\2\2\2\u1af1\u1a8d\3\2"+
		"\2\2\u1af1\u1aa1\3\2\2\2\u1af1\u1aaf\3\2\2\2\u1af1\u1abc\3\2\2\2\u1af1"+
		"\u1acf\3\2\2\2\u1af1\u1ad9\3\2\2\2\u1af1\u1ae0\3\2\2\2\u1af2\u027d\3\2"+
		"\2\2\u1af3\u1af4\7\u00bf\2\2\u1af4\u1af5\5\u02a0\u0151\2\u1af5\u1af6\7"+
		"\u00b0\2\2\u1af6\u1af7\5\u02a0\u0151\2\u1af7\u027f\3\2\2\2\u1af8\u1af9"+
		"\7\u01da\2\2\u1af9\u1afe\5\u0282\u0142\2\u1afa\u1afb\7\u046f\2\2\u1afb"+
		"\u1afd\5\u0282\u0142\2\u1afc\u1afa\3\2\2\2\u1afd\u1b00\3\2\2\2\u1afe\u1afc"+
		"\3\2\2\2\u1afe\u1aff\3\2\2\2\u1aff\u1b07\3\2\2\2\u1b00\u1afe\3\2\2\2\u1b01"+
		"\u1b02\7\u01da\2\2\u1b02\u1b03\5\u0240\u0121\2\u1b03\u1b04\7\u0461\2\2"+
		"\u1b04\u1b05\5\u0240\u0121\2\u1b05\u1b07\3\2\2\2\u1b06\u1af8\3\2\2\2\u1b06"+
		"\u1b01\3\2\2\2\u1b07\u0281\3\2\2\2\u1b08\u1b0a\5\u0240\u0121\2\u1b09\u1b0b"+
		"\tx\2\2\u1b0a\u1b09\3\2\2\2\u1b0a\u1b0b\3\2\2\2\u1b0b\u0283\3\2\2\2\u1b0c"+
		"\u1b0d\ty\2\2\u1b0d\u1b0f\7\u046d\2\2\u1b0e\u1b10\t.\2\2\u1b0f\u1b0e\3"+
		"\2\2\2\u1b0f\u1b10\3\2\2\2\u1b10\u1b11\3\2\2\2\u1b11\u1b12\5\u02a0\u0151"+
		"\2\u1b12\u1b14\7\u046e\2\2\u1b13\u1b15\5\u0288\u0145\2\u1b14\u1b13\3\2"+
		"\2\2\u1b14\u1b15\3\2\2\2\u1b15\u1b48\3\2\2\2\u1b16\u1b17\7\u0124\2\2\u1b17"+
		"\u1b1f\7\u046d\2\2\u1b18\u1b20\7\u045d\2\2\u1b19\u1b1b\7\b\2\2\u1b1a\u1b19"+
		"\3\2\2\2\u1b1a\u1b1b\3\2\2\2\u1b1b\u1b1c\3\2\2\2\u1b1c\u1b20\5\u02a0\u0151"+
		"\2\u1b1d\u1b1e\7\63\2\2\u1b1e\u1b20\5\u029e\u0150\2\u1b1f\u1b18\3\2\2"+
		"\2\u1b1f\u1b1a\3\2\2\2\u1b1f\u1b1d\3\2\2\2\u1b20\u1b21\3\2\2\2\u1b21\u1b23"+
		"\7\u046e\2\2\u1b22\u1b24\5\u0288\u0145\2\u1b23\u1b22\3\2\2\2\u1b23\u1b24"+
		"\3\2\2\2\u1b24\u1b48\3\2\2\2\u1b25\u1b26\tz\2\2\u1b26\u1b28\7\u046d\2"+
		"\2\u1b27\u1b29\7\b\2\2\u1b28\u1b27\3\2\2\2\u1b28\u1b29\3\2\2\2\u1b29\u1b2a"+
		"\3\2\2\2\u1b2a\u1b2b\5\u02a0\u0151\2\u1b2b\u1b2d\7\u046e\2\2\u1b2c\u1b2e"+
		"\5\u0288\u0145\2\u1b2d\u1b2c\3\2\2\2\u1b2d\u1b2e\3\2\2\2\u1b2e\u1b48\3"+
		"\2\2\2\u1b2f\u1b30\7\u0128\2\2\u1b30\u1b32\7\u046d\2\2\u1b31\u1b33\7\63"+
		"\2\2\u1b32\u1b31\3\2\2\2\u1b32\u1b33\3\2\2\2\u1b33\u1b34\3\2\2\2\u1b34"+
		"\u1b3f\5\u029e\u0150\2\u1b35\u1b36\7~\2\2\u1b36\u1b37\7\25\2\2\u1b37\u1b3c"+
		"\5\u00e6t\2\u1b38\u1b39\7\u046f\2\2\u1b39\u1b3b\5\u00e6t\2\u1b3a\u1b38"+
		"\3\2\2\2\u1b3b\u1b3e\3\2\2\2\u1b3c\u1b3a\3\2\2\2\u1b3c\u1b3d\3\2\2\2\u1b3d"+
		"\u1b40\3\2\2\2\u1b3e\u1b3c\3\2\2\2\u1b3f\u1b35\3\2\2\2\u1b3f\u1b40\3\2"+
		"\2\2\u1b40\u1b43\3\2\2\2\u1b41\u1b42\7\u009c\2\2\u1b42\u1b44\7\u047c\2"+
		"\2\u1b43\u1b41\3\2\2\2\u1b43\u1b44\3\2\2\2\u1b44\u1b45\3\2\2\2\u1b45\u1b46"+
		"\7\u046e\2\2\u1b46\u1b48\3\2\2\2\u1b47\u1b0c\3\2\2\2\u1b47\u1b16\3\2\2"+
		"\2\u1b47\u1b25\3\2\2\2\u1b47\u1b2f\3\2\2\2\u1b48\u0285\3\2\2\2\u1b49\u1b4a"+
		"\t{\2\2\u1b4a\u1b4b\7\u046d\2\2\u1b4b\u1b4e\5\u02a2\u0152\2\u1b4c\u1b4d"+
		"\7\u046f\2\2\u1b4d\u1b4f\5\u0240\u0121\2\u1b4e\u1b4c\3\2\2\2\u1b4e\u1b4f"+
		"\3\2\2\2\u1b4f\u1b52\3\2\2\2\u1b50\u1b51\7\u046f\2\2\u1b51\u1b53\5\u0240"+
		"\u0121\2\u1b52\u1b50\3\2\2\2\u1b52\u1b53\3\2\2\2\u1b53\u1b54\3\2\2\2\u1b54"+
		"\u1b55\7\u046e\2\2\u1b55\u1b56\5\u0288\u0145\2\u1b56\u1b70\3\2\2\2\u1b57"+
		"\u1b58\t|\2\2\u1b58\u1b59\7\u046d\2\2\u1b59\u1b5a\5\u02a2\u0152\2\u1b5a"+
		"\u1b5b\7\u046e\2\2\u1b5b\u1b5c\5\u0288\u0145\2\u1b5c\u1b70\3\2\2\2\u1b5d"+
		"\u1b5e\t}\2\2\u1b5e\u1b5f\7\u046d\2\2\u1b5f\u1b60\7\u046e\2\2\u1b60\u1b70"+
		"\5\u0288\u0145\2\u1b61\u1b62\7\u012f\2\2\u1b62\u1b63\7\u046d\2\2\u1b63"+
		"\u1b64\5\u02a2\u0152\2\u1b64\u1b65\7\u046f\2\2\u1b65\u1b66\5\u0240\u0121"+
		"\2\u1b66\u1b67\7\u046e\2\2\u1b67\u1b68\5\u0288\u0145\2\u1b68\u1b70\3\2"+
		"\2\2\u1b69\u1b6a\7\u012e\2\2\u1b6a\u1b6b\7\u046d\2\2\u1b6b\u1b6c\5\u0240"+
		"\u0121\2\u1b6c\u1b6d\7\u046e\2\2\u1b6d\u1b6e\5\u0288\u0145\2\u1b6e\u1b70"+
		"\3\2\2\2\u1b6f\u1b49\3\2\2\2\u1b6f\u1b57\3\2\2\2\u1b6f\u1b5d\3\2\2\2\u1b6f"+
		"\u1b61\3\2\2\2\u1b6f\u1b69\3\2\2\2\u1b70\u0287\3\2\2\2\u1b71\u1b77\7\u0082"+
		"\2\2\u1b72\u1b73\7\u046d\2\2\u1b73\u1b74\5\u028a\u0146\2\u1b74\u1b75\7"+
		"\u046e\2\2\u1b75\u1b78\3\2\2\2\u1b76\u1b78\5\u028c\u0147\2\u1b77\u1b72"+
		"\3\2\2\2\u1b77\u1b76\3\2\2\2\u1b78\u0289\3\2\2\2\u1b79\u1b7b\5\u028c\u0147"+
		"\2\u1b7a\u1b79\3\2\2\2\u1b7a\u1b7b\3\2\2\2\u1b7b\u1b7d\3\2\2\2\u1b7c\u1b7e"+
		"\5\u0298\u014d\2\u1b7d\u1b7c\3\2\2\2\u1b7d\u1b7e\3\2\2\2\u1b7e\u1b80\3"+
		"\2\2\2\u1b7f\u1b81\5\u00e4s\2\u1b80\u1b7f\3\2\2\2\u1b80\u1b81\3\2\2\2"+
		"\u1b81\u1b83\3\2\2\2\u1b82\u1b84\5\u028e\u0148\2\u1b83\u1b82\3\2\2\2\u1b83"+
		"\u1b84\3\2\2\2\u1b84\u028b\3\2\2\2\u1b85\u1b86\5\u023a\u011e\2\u1b86\u028d"+
		"\3\2\2\2\u1b87\u1b88\5\u0290\u0149\2\u1b88\u1b89\5\u0292\u014a\2\u1b89"+
		"\u028f\3\2\2\2\u1b8a\u1b8b\t~\2\2\u1b8b\u0291\3\2\2\2\u1b8c\u1b8f\5\u0296"+
		"\u014c\2\u1b8d\u1b8f\5\u0294\u014b\2\u1b8e\u1b8c\3\2\2\2\u1b8e\u1b8d\3"+
		"\2\2\2\u1b8f\u0293\3\2\2\2\u1b90\u1b91\7\22\2\2\u1b91\u1b92\5\u0296\u014c"+
		"\2\u1b92\u1b93\7\f\2\2\u1b93\u1b94\5\u0296\u014c\2\u1b94\u0295\3\2\2\2"+
		"\u1b95\u1b96\7%\2\2\u1b96\u1b9d\7\u025a\2\2\u1b97\u1b98\7\u0293\2\2\u1b98"+
		"\u1b9d\t\177\2\2\u1b99\u1b9a\5\u02a2\u0152\2\u1b9a\u1b9b\t\177\2\2\u1b9b"+
		"\u1b9d\3\2\2\2\u1b9c\u1b95\3\2\2\2\u1b9c\u1b97\3\2\2\2\u1b9c\u1b99\3\2"+
		"\2\2\u1b9d\u0297\3\2\2\2\u1b9e\u1b9f\7\u0083\2\2\u1b9f\u1ba0\7\25\2\2"+
		"\u1ba0\u1ba5\5\u02a2\u0152\2\u1ba1\u1ba2\7\u046f\2\2\u1ba2\u1ba4\5\u02a2"+
		"\u0152\2\u1ba3\u1ba1\3\2\2\2\u1ba4\u1ba7\3\2\2\2\u1ba5\u1ba3\3\2\2\2\u1ba5"+
		"\u1ba6\3\2\2\2\u1ba6\u0299\3\2\2\2\u1ba7\u1ba5\3\2\2\2\u1ba8\u1bc0\5\u02c0"+
		"\u0161\2\u1ba9\u1bc0\7\u02ec\2\2\u1baa\u1bc0\7\u013f\2\2\u1bab\u1bc0\7"+
		"\u013b\2\2\u1bac\u1bc0\7\u013c\2\2\u1bad\u1bc0\7\u013d\2\2\u1bae\u1bc0"+
		"\7\u0140\2\2\u1baf\u1bc0\7\u0141\2\2\u1bb0\u1bc0\7\u0142\2\2\u1bb1\u1bc0"+
		"\7O\2\2\u1bb2\u1bc0\7W\2\2\u1bb3\u1bc0\7\u013e\2\2\u1bb4\u1bc0\7\u0144"+
		"\2\2\u1bb5\u1bc0\7\u01fe\2\2\u1bb6\u1bc0\7\u0145\2\2\u1bb7\u1bc0\7\u008f"+
		"\2\2\u1bb8\u1bc0\7\u0147\2\2\u1bb9\u1bc0\7\u0148\2\2\u1bba\u1bc0\7\u0149"+
		"\2\2\u1bbb\u1bc0\7\u014a\2\2\u1bbc\u1bc0\7\u014b\2\2\u1bbd\u1bc0\7\u014c"+
		"\2\2\u1bbe\u1bc0\7\u014d\2\2\u1bbf\u1ba8\3\2\2\2\u1bbf\u1ba9\3\2\2\2\u1bbf"+
		"\u1baa\3\2\2\2\u1bbf\u1bab\3\2\2\2\u1bbf\u1bac\3\2\2\2\u1bbf\u1bad\3\2"+
		"\2\2\u1bbf\u1bae\3\2\2\2\u1bbf\u1baf\3\2\2\2\u1bbf\u1bb0\3\2\2\2\u1bbf"+
		"\u1bb1\3\2\2\2\u1bbf\u1bb2\3\2\2\2\u1bbf\u1bb3\3\2\2\2\u1bbf\u1bb4\3\2"+
		"\2\2\u1bbf\u1bb5\3\2\2\2\u1bbf\u1bb6\3\2\2\2\u1bbf\u1bb7\3\2\2\2\u1bbf"+
		"\u1bb8\3\2\2\2\u1bbf\u1bb9\3\2\2\2\u1bbf\u1bba\3\2\2\2\u1bbf\u1bbb\3\2"+
		"\2\2\u1bbf\u1bbc\3\2\2\2\u1bbf\u1bbd\3\2\2\2\u1bbf\u1bbe\3\2\2\2\u1bc0"+
		"\u029b\3\2\2\2\u1bc1\u1bc2\t\u0080\2\2\u1bc2\u1bc3\7\u046d\2\2\u1bc3\u1bc4"+
		"\5\u02a0\u0151\2\u1bc4\u1bc5\7\u046e\2\2\u1bc5\u029d\3\2\2\2\u1bc6\u1bcb"+
		"\5\u024c\u0127\2\u1bc7\u1bcb\5\u0224\u0113\2\u1bc8\u1bcb\5\u027a\u013e"+
		"\2\u1bc9\u1bcb\5\u02a2\u0152\2\u1bca\u1bc6\3\2\2\2\u1bca\u1bc7\3\2\2\2"+
		"\u1bca\u1bc8\3\2\2\2\u1bca\u1bc9\3\2\2\2\u1bcb\u1bd5\3\2\2\2\u1bcc\u1bd1"+
		"\7\u046f\2\2\u1bcd\u1bd2\5\u024c\u0127\2\u1bce\u1bd2\5\u0224\u0113\2\u1bcf"+
		"\u1bd2\5\u027a\u013e\2\u1bd0\u1bd2\5\u02a2\u0152\2\u1bd1\u1bcd\3\2\2\2"+
		"\u1bd1\u1bce\3\2\2\2\u1bd1\u1bcf\3\2\2\2\u1bd1\u1bd0\3\2\2\2\u1bd2\u1bd4"+
		"\3\2\2\2\u1bd3\u1bcc\3\2\2\2\u1bd4\u1bd7\3\2\2\2\u1bd5\u1bd3\3\2\2\2\u1bd5"+
		"\u1bd6\3\2\2\2\u1bd6\u029f\3\2\2\2\u1bd7\u1bd5\3\2\2\2\u1bd8\u1bdd\5\u024c"+
		"\u0127\2\u1bd9\u1bdd\5\u0224\u0113\2\u1bda\u1bdd\5\u027a\u013e\2\u1bdb"+
		"\u1bdd\5\u02a2\u0152\2\u1bdc\u1bd8\3\2\2\2\u1bdc\u1bd9\3\2\2\2\u1bdc\u1bda"+
		"\3\2\2\2\u1bdc\u1bdb\3\2\2\2\u1bdd\u02a1\3\2\2\2\u1bde\u1bdf\b\u0152\1"+
		"\2\u1bdf\u1be0\t\u0081\2\2\u1be0\u1bea\5\u02a2\u0152\6\u1be1\u1be2\5\u02a4"+
		"\u0153\2\u1be2\u1be4\7Z\2\2\u1be3\u1be5\7t\2\2\u1be4\u1be3\3\2\2\2\u1be4"+
		"\u1be5\3\2\2\2\u1be5\u1be6\3\2\2\2\u1be6\u1be7\t\u0082\2\2\u1be7\u1bea"+
		"\3\2\2\2\u1be8\u1bea\5\u02a4\u0153\2\u1be9\u1bde\3\2\2\2\u1be9\u1be1\3"+
		"\2\2\2\u1be9\u1be8\3\2\2\2\u1bea\u1bf1\3\2\2\2\u1beb\u1bec\f\5\2\2\u1bec"+
		"\u1bed\5\u02ac\u0157\2\u1bed\u1bee\5\u02a2\u0152\6\u1bee\u1bf0\3\2\2\2"+
		"\u1bef\u1beb\3\2\2\2\u1bf0\u1bf3\3\2\2\2\u1bf1\u1bef\3\2\2\2\u1bf1\u1bf2"+
		"\3\2\2\2\u1bf2\u02a3\3\2\2\2\u1bf3\u1bf1\3\2\2\2\u1bf4\u1bf7\b\u0153\1"+
		"\2\u1bf5\u1bf6\7\u0488\2\2\u1bf6\u1bf8\7\u0454\2\2\u1bf7\u1bf5\3\2\2\2"+
		"\u1bf7\u1bf8\3\2\2\2\u1bf8\u1bf9\3\2\2\2\u1bf9\u1bfa\5\u02a6\u0154\2\u1bfa"+
		"\u1c3b\3\2\2\2\u1bfb\u1bfc\f\n\2\2\u1bfc\u1bfd\5\u02aa\u0156\2\u1bfd\u1bfe"+
		"\5\u02a4\u0153\13\u1bfe\u1c3a\3\2\2\2\u1bff\u1c01\f\b\2\2\u1c00\u1c02"+
		"\7t\2\2\u1c01\u1c00\3\2\2\2\u1c01\u1c02\3\2\2\2\u1c02\u1c03\3\2\2\2\u1c03"+
		"\u1c04\7\22\2\2\u1c04\u1c05\5\u02a4\u0153\2\u1c05\u1c06\7\f\2\2\u1c06"+
		"\u1c07\5\u02a4\u0153\t\u1c07\u1c3a\3\2\2\2\u1c08\u1c09\f\7\2\2\u1c09\u1c0a"+
		"\7\u026e\2\2\u1c0a\u1c0b\7d\2\2\u1c0b\u1c3a\5\u02a4\u0153\b\u1c0c\u1c0e"+
		"\f\5\2\2\u1c0d\u1c0f\7t\2\2\u1c0e\u1c0d\3\2\2\2\u1c0e\u1c0f\3\2\2\2\u1c0f"+
		"\u1c10\3\2\2\2\u1c10\u1c11\t\u0083\2\2\u1c11\u1c3a\5\u02a4\u0153\6\u1c12"+
		"\u1c14\f\f\2\2\u1c13\u1c15\7t\2\2\u1c14\u1c13\3\2\2\2\u1c14\u1c15\3\2"+
		"\2\2\u1c15\u1c16\3\2\2\2\u1c16\u1c17\7R\2\2\u1c17\u1c1a\7\u046d\2\2\u1c18"+
		"\u1c1b\5\u00c6d\2\u1c19\u1c1b\5\u0262\u0132\2\u1c1a\u1c18\3\2\2\2\u1c1a"+
		"\u1c19\3\2\2\2\u1c1b\u1c1c\3\2\2\2\u1c1c\u1c1d\7\u046e\2\2\u1c1d\u1c3a"+
		"\3\2\2\2\u1c1e\u1c1f\f\13\2\2\u1c1f\u1c20\7Z\2\2\u1c20\u1c3a\5\u024a\u0126"+
		"\2\u1c21\u1c22\f\t\2\2\u1c22\u1c23\5\u02aa\u0156\2\u1c23\u1c24\t\u0084"+
		"\2\2\u1c24\u1c25\7\u046d\2\2\u1c25\u1c26\5\u00c6d\2\u1c26\u1c27\7\u046e"+
		"\2\2\u1c27\u1c3a\3\2\2\2\u1c28\u1c2a\f\6\2\2\u1c29\u1c2b\7t\2\2\u1c2a"+
		"\u1c29\3\2\2\2\u1c2a\u1c2b\3\2\2\2\u1c2b\u1c2c\3\2\2\2\u1c2c\u1c2d\7d"+
		"\2\2\u1c2d\u1c30\5\u02a4\u0153\2\u1c2e\u1c2f\7\u019f\2\2\u1c2f\u1c31\7"+
		"\u047c\2\2\u1c30\u1c2e\3\2\2\2\u1c30\u1c31\3\2\2\2\u1c31\u1c3a\3\2\2\2"+
		"\u1c32\u1c33\f\3\2\2\u1c33\u1c34\7\u01fb\2\2\u1c34\u1c35\7\u0217\2\2\u1c35"+
		"\u1c36\7\u046d\2\2\u1c36\u1c37\5\u02a4\u0153\2\u1c37\u1c38\7\u046e\2\2"+
		"\u1c38\u1c3a\3\2\2\2\u1c39\u1bfb\3\2\2\2\u1c39\u1bff\3\2\2\2\u1c39\u1c08"+
		"\3\2\2\2\u1c39\u1c0c\3\2\2\2\u1c39\u1c12\3\2\2\2\u1c39\u1c1e\3\2\2\2\u1c39"+
		"\u1c21\3\2\2\2\u1c39\u1c28\3\2\2\2\u1c39\u1c32\3\2\2\2\u1c3a\u1c3d\3\2"+
		"\2\2\u1c3b\u1c39\3\2\2\2\u1c3b\u1c3c\3\2\2\2\u1c3c\u02a5\3\2\2\2\u1c3d"+
		"\u1c3b\3\2\2\2\u1c3e\u1c3f\b\u0154\1\2\u1c3f\u1c6c\5\u024c\u0127\2\u1c40"+
		"\u1c6c\5\u0224\u0113\2\u1c41\u1c6c\5\u027a\u013e\2\u1c42\u1c6c\5\u022a"+
		"\u0116\2\u1c43\u1c44\5\u02a8\u0155\2\u1c44\u1c45\5\u02a6\u0154\f\u1c45"+
		"\u1c6c\3\2\2\2\u1c46\u1c47\7\u00e4\2\2\u1c47\u1c6c\5\u02a6\u0154\13\u1c48"+
		"\u1c49\7\u046d\2\2\u1c49\u1c4e\5\u02a2\u0152\2\u1c4a\u1c4b\7\u046f\2\2"+
		"\u1c4b\u1c4d\5\u02a2\u0152\2\u1c4c\u1c4a\3\2\2\2\u1c4d\u1c50\3\2\2\2\u1c4e"+
		"\u1c4c\3\2\2\2\u1c4e\u1c4f\3\2\2\2\u1c4f\u1c51\3\2\2\2\u1c50\u1c4e\3\2"+
		"\2\2\u1c51\u1c52\7\u046e\2\2\u1c52\u1c6c\3\2\2\2\u1c53\u1c54\7\u025a\2"+
		"\2\u1c54\u1c55\7\u046d\2\2\u1c55\u1c58\5\u02a2\u0152\2\u1c56\u1c57\7\u046f"+
		"\2\2\u1c57\u1c59\5\u02a2\u0152\2\u1c58\u1c56\3\2\2\2\u1c59\u1c5a\3\2\2"+
		"\2\u1c5a\u1c58\3\2\2\2\u1c5a\u1c5b\3\2\2\2\u1c5b\u1c5c\3\2\2\2\u1c5c\u1c5d"+
		"\7\u046e\2\2\u1c5d\u1c6c\3\2\2\2\u1c5e\u1c5f\7>\2\2\u1c5f\u1c60\7\u046d"+
		"\2\2\u1c60\u1c61\5\u00c6d\2\u1c61\u1c62\7\u046e\2\2\u1c62\u1c6c\3\2\2"+
		"\2\u1c63\u1c64\7\u046d\2\2\u1c64\u1c65\5\u00c6d\2\u1c65\u1c66\7\u046e"+
		"\2\2\u1c66\u1c6c\3\2\2\2\u1c67\u1c68\7X\2\2\u1c68\u1c69\5\u02a2\u0152"+
		"\2\u1c69\u1c6a\5H%\2\u1c6a\u1c6c\3\2\2\2\u1c6b\u1c3e\3\2\2\2\u1c6b\u1c40"+
		"\3\2\2\2\u1c6b\u1c41\3\2\2\2\u1c6b\u1c42\3\2\2\2\u1c6b\u1c43\3\2\2\2\u1c6b"+
		"\u1c46\3\2\2\2\u1c6b\u1c48\3\2\2\2\u1c6b\u1c53\3\2\2\2\u1c6b\u1c5e\3\2"+
		"\2\2\u1c6b\u1c63\3\2\2\2\u1c6b\u1c67\3\2\2\2\u1c6c\u1c7e\3\2\2\2\u1c6d"+
		"\u1c6e\f\5\2\2\u1c6e\u1c6f\5\u02ae\u0158\2\u1c6f\u1c70\5\u02a6\u0154\6"+
		"\u1c70\u1c7d\3\2\2\2\u1c71\u1c72\f\4\2\2\u1c72\u1c73\5\u02b0\u0159\2\u1c73"+
		"\u1c74\5\u02a6\u0154\5\u1c74\u1c7d\3\2\2\2\u1c75\u1c76\f\3\2\2\u1c76\u1c77"+
		"\5\u02b2\u015a\2\u1c77\u1c78\5\u02a6\u0154\4\u1c78\u1c7d\3\2\2\2\u1c79"+
		"\u1c7a\f\16\2\2\u1c7a\u1c7b\7\35\2\2\u1c7b\u1c7d\5\u022e\u0118\2\u1c7c"+
		"\u1c6d\3\2\2\2\u1c7c\u1c71\3\2\2\2\u1c7c\u1c75\3\2\2\2\u1c7c\u1c79\3\2"+
		"\2\2\u1c7d\u1c80\3\2\2\2\u1c7e\u1c7c\3\2\2\2\u1c7e\u1c7f\3\2\2\2\u1c7f"+
		"\u02a7\3\2\2\2\u1c80\u1c7e\3\2\2\2\u1c81\u1c82\t\u0085\2\2\u1c82\u02a9"+
		"\3\2\2\2\u1c83\u1c92\7\u0464\2\2\u1c84\u1c92\7\u0465\2\2\u1c85\u1c92\7"+
		"\u0466\2\2\u1c86\u1c87\7\u0466\2\2\u1c87\u1c92\7\u0464\2\2\u1c88\u1c89"+
		"\7\u0465\2\2\u1c89\u1c92\7\u0464\2\2\u1c8a\u1c8b\7\u0466\2\2\u1c8b\u1c92"+
		"\7\u0465\2\2\u1c8c\u1c8d\7\u0467\2\2\u1c8d\u1c92\7\u0464\2\2\u1c8e\u1c8f"+
		"\7\u0466\2\2\u1c8f\u1c90\7\u0464\2\2\u1c90\u1c92\7\u0465\2\2\u1c91\u1c83"+
		"\3\2\2\2\u1c91\u1c84\3\2\2\2\u1c91\u1c85\3\2\2\2\u1c91\u1c86\3\2\2\2\u1c91"+
		"\u1c88\3\2\2\2\u1c91\u1c8a\3\2\2\2\u1c91\u1c8c\3\2\2\2\u1c91\u1c8e\3\2"+
		"\2\2\u1c92\u02ab\3\2\2\2\u1c93\u1c9b\7\f\2\2\u1c94\u1c95\7\u046a\2\2\u1c95"+
		"\u1c9b\7\u046a\2\2\u1c96\u1c9b\7\u00c4\2\2\u1c97\u1c9b\7}\2\2\u1c98\u1c99"+
		"\7\u0469\2\2\u1c99\u1c9b\7\u0469\2\2\u1c9a\u1c93\3\2\2\2\u1c9a\u1c94\3"+
		"\2\2\2\u1c9a\u1c96\3\2\2\2\u1c9a\u1c97\3\2\2\2\u1c9a\u1c98\3\2\2\2\u1c9b"+
		"\u02ad\3\2\2\2\u1c9c\u1c9d\7\u0466\2\2\u1c9d\u1ca4\7\u0466\2\2\u1c9e\u1c9f"+
		"\7\u0465\2\2\u1c9f\u1ca4\7\u0465\2\2\u1ca0\u1ca4\7\u046a\2\2\u1ca1\u1ca4"+
		"\7\u046b\2\2\u1ca2\u1ca4\7\u0469\2\2\u1ca3\u1c9c\3\2\2\2\u1ca3\u1c9e\3"+
		"\2\2\2\u1ca3\u1ca0\3\2\2\2\u1ca3\u1ca1\3\2\2\2\u1ca3\u1ca2\3\2\2\2\u1ca4"+
		"\u02af\3\2\2\2\u1ca5\u1ca6\t\u0086\2\2\u1ca6\u02b1\3\2\2\2\u1ca7\u1ca8"+
		"\7\u0461\2\2\u1ca8\u1cad\7\u0465\2\2\u1ca9\u1caa\7\u0461\2\2\u1caa\u1cab"+
		"\7\u0465\2\2\u1cab\u1cad\7\u0465\2\2\u1cac\u1ca7\3\2\2\2\u1cac\u1ca9\3"+
		"\2\2\2\u1cad\u02b3\3\2\2\2\u1cae\u1caf\t\u0087\2\2\u1caf\u02b5\3\2\2\2"+
		"\u1cb0\u1cb1\t\u0088\2\2\u1cb1\u02b7\3\2\2\2\u1cb2\u1cb3\t\u0089\2\2\u1cb3"+
		"\u02b9\3\2\2\2\u1cb4\u1cb5\t\u008a\2\2\u1cb5\u02bb\3\2\2\2\u1cb6\u1cb7"+
		"\t\u008b\2\2\u1cb7\u02bd\3\2\2\2\u1cb8\u1cb9\t\u008c\2\2\u1cb9\u02bf\3"+
		"\2\2\2\u1cba\u1cbb\t\u008d\2\2\u1cbb\u02c1\3\2\2\2\u0434\u02c3\u02c7\u02ce"+
		"\u02d1\u02d4\u02d6\u02dc\u02df\u02e2\u02eb\u0315\u0323\u032e\u033f\u0344"+
		"\u0350\u036b\u0374\u0379\u037f\u0384\u0388\u0391\u0394\u0397\u039b\u03a2"+
		"\u03a5\u03aa\u03b2\u03b7\u03bc\u03bf\u03c1\u03cd\u03d0\u03d4\u03d7\u03db"+
		"\u03de\u03e2\u03e5\u03e8\u03ec\u03ef\u03f3\u03f9\u03ff\u0405\u040c\u0413"+
		"\u0416\u041a\u041f\u0425\u042e\u0433\u0438\u043f\u0450\u0457\u045b\u0465"+
		"\u0469\u046d\u0471\u0475\u047a\u047d\u0480\u0483\u0486\u048c\u0490\u0496"+
		"\u049b\u049e\u04a1\u04a3\u04ae\u04b2\u04b5\u04c3\u04c6\u04ca\u04cd\u04d1"+
		"\u04d4\u04d8\u04db\u04df\u04e2\u04e5\u04e9\u04ec\u04f0\u04f6\u0503\u0509"+
		"\u0514\u0519\u0521\u0529\u052e\u0531\u0536\u053e\u0543\u0549\u054e\u0552"+
		"\u0554\u0557\u055b\u055f\u0562\u0566\u056a\u056e\u0574\u0577\u057e\u0586"+
		"\u0588\u058f\u0595\u059d\u05a0\u05a7\u05aa\u05ac\u05b2\u05b8\u05c9\u05d0"+
		"\u05d7\u05e3\u05e8\u05eb\u05ee\u05fb\u0608\u060d\u061d\u0625\u062f\u0632"+
		"\u0635\u063b\u063f\u0642\u064d\u0650\u0655\u0662\u0669\u0670\u0672\u0679"+
		"\u067d\u067f\u0684\u0687\u068d\u0692\u0694\u0698\u069b\u069e\u06a4\u06a9"+
		"\u06ab\u06b0\u06b7\u06b9\u06c0\u06c5\u06c9\u06cc\u06d4\u06dc\u06de\u06e8"+
		"\u06ec\u06ef\u06f5\u06fa\u06fd\u0703\u0706\u070a\u070d\u0711\u0716\u071b"+
		"\u0720\u0724\u0728\u072c\u0730\u0734\u0738\u073d\u0742\u0747\u074d\u0752"+
		"\u0757\u075c\u0761\u0766\u076c\u0771\u0776\u077b\u0780\u0785\u078a\u078f"+
		"\u0796\u079b\u07a0\u07a5\u07a9\u07ae\u07b6\u07bb\u07c1\u07cd\u07d4\u07d6"+
		"\u07de\u07e3\u07e6\u07ee\u07f4\u07f8\u0805\u0811\u0813\u0816\u081e\u0824"+
		"\u082a\u0837\u083e\u0847\u084c\u0857\u0860\u0865\u0871\u0878\u0881\u0886"+
		"\u0892\u0899\u08a2\u08a7\u08ae\u08b7\u08bc\u08be\u08c3\u08cb\u08d4\u08d8"+
		"\u08db\u08df\u08e4\u08ea\u08f0\u08f5\u08fa\u08ff\u0904\u0907\u090c\u0911"+
		"\u091b\u091f\u0926\u092b\u092e\u0933\u0936\u093a\u093e\u0946\u0959\u095c"+
		"\u095f\u0963\u096d\u097a\u0981\u0984\u0989\u0990\u0993\u0996\u09a1\u09a4"+
		"\u09a8\u09b0\u09b3\u09b8\u09c0\u09c6\u09ca\u09ce\u09d3\u09d8\u09df\u09e3"+
		"\u09ee\u09f6\u09f9\u09ff\u0a05\u0a07\u0a0c\u0a0f\u0a15\u0a1b\u0a1d\u0a21"+
		"\u0a24\u0a27\u0a2d\u0a33\u0a36\u0a3c\u0a42\u0a44\u0a49\u0a51\u0a53\u0a5c"+
		"\u0a5f\u0a62\u0a67\u0a69\u0a72\u0a75\u0a78\u0a7d\u0a7f\u0a88\u0a8d\u0a95"+
		"\u0a99\u0aa1\u0aab\u0ab0\u0ab7\u0abb\u0abf\u0ad2\u0adc\u0ae2\u0af3\u0af7"+
		"\u0b01\u0b06\u0b09\u0b12\u0b23\u0b2f\u0b36\u0b3d\u0b4c\u0b59\u0b5f\u0b65"+
		"\u0b6b\u0b71\u0b77\u0b7f\u0b87\u0b8c\u0b91\u0b98\u0b9f\u0ba6\u0bab\u0bae"+
		"\u0bb0\u0bbe\u0bc5\u0bcc\u0bd2\u0bd6\u0bda\u0be1\u0be4\u0be9\u0bf0\u0bf7"+
		"\u0bfb\u0c00\u0c07\u0c14\u0c17\u0c1c\u0c21\u0c25\u0c2b\u0c34\u0c3d\u0c46"+
		"\u0c49\u0c4d\u0c56\u0c5a\u0c5d\u0c60\u0c66\u0c69\u0c6f\u0c78\u0c7b\u0c86"+
		"\u0c89\u0c8e\u0c91\u0c96\u0ca0\u0ca5\u0cab\u0cad\u0cb3\u0cb5\u0cbb\u0cc3"+
		"\u0cc8\u0cd0\u0cd3\u0cd8\u0cdb\u0ce0\u0ce8\u0cf0\u0cf6\u0cfe\u0d03\u0d0b"+
		"\u0d0e\u0d12\u0d15\u0d1d\u0d23\u0d2c\u0d2f\u0d33\u0d37\u0d3d\u0d41\u0d45"+
		"\u0d47\u0d4a\u0d4d\u0d50\u0d56\u0d5a\u0d5d\u0d60\u0d63\u0d66\u0d6d\u0d6f"+
		"\u0d73\u0d78\u0d7e\u0d83\u0d8a\u0d90\u0d95\u0d98\u0d9e\u0da2\u0daa\u0dae"+
		"\u0db1\u0db4\u0db9\u0dbc\u0dc3\u0dc7\u0dca\u0dce\u0dd2\u0dd5\u0dd8\u0ddd"+
		"\u0de3\u0de7\u0df1\u0df7\u0dfb\u0e01\u0e05\u0e0b\u0e0e\u0e1a\u0e1e\u0e22"+
		"\u0e2a\u0e2e\u0e36\u0e39\u0e3d\u0e40\u0e48\u0e4d\u0e50\u0e53\u0e57\u0e5a"+
		"\u0e63\u0e68\u0e71\u0e76\u0e7d\u0e84\u0e8c\u0e92\u0e9a\u0e9d\u0ea0\u0ea7"+
		"\u0eaa\u0eb1\u0eb4\u0ebc\u0ec2\u0ecd\u0ed0\u0ed4\u0ede\u0ee4\u0ee8\u0eec"+
		"\u0ef6\u0efb\u0efd\u0f01\u0f0b\u0f15\u0f1b\u0f20\u0f24\u0f27\u0f2a\u0f2d"+
		"\u0f30\u0f36\u0f3c\u0f3f\u0f42\u0f45\u0f48\u0f4b\u0f4d\u0f53\u0f59\u0f5c"+
		"\u0f5f\u0f62\u0f65\u0f69\u0f6f\u0f73\u0f7b\u0f7f\u0f82\u0f84\u0f91\u0f94"+
		"\u0f9b\u0fa5\u0fa8\u0fad\u0faf\u0fb3\u0fbb\u0fc1\u0fca\u0fd7\u0fdb\u0fe1"+
		"\u0fea\u0fed\u0ff1\u0ff4\u0ff8\u0ffc\u0fff\u1001\u1009\u1015\u101b\u101d"+
		"\u1023\u1025\u1027\u102d\u1035\u103d\u1041\u1045\u104e\u1053\u1067\u106c"+
		"\u1072\u1079\u107e\u1087\u108a\u108e\u1092\u1096\u1099\u109c\u109f\u10a3"+
		"\u10a7\u10aa\u10ad\u10b0\u10b7\u10bb\u10ca\u10ce\u10da\u10e2\u10ec\u10f0"+
		"\u10f3\u10f9\u10fc\u10ff\u1108\u1111\u111b\u111f\u1129\u1133\u113b\u113e"+
		"\u1147\u114a\u114e\u1153\u1157\u1160\u1163\u1182\u1185\u1188\u11c0\u11c5"+
		"\u11e1\u11ef\u11f6\u11fa\u1200\u1208\u120a\u1215\u121f\u1226\u122c\u1234"+
		"\u1239\u1241\u1249\u1251\u1259\u125f\u1264\u1269\u126e\u1274\u1276\u1281"+
		"\u1286\u128d\u128f\u129d\u12a3\u12a8\u12ad\u12b3\u12ba\u12c2\u12ca\u12cf"+
		"\u12d5\u12d8\u12e0\u12e7\u12f0\u12f3\u1304\u130c\u1314\u1318\u131f\u1325"+
		"\u132d\u1336\u133c\u1343\u134a\u134f\u1352\u1354\u135a\u135c\u1360\u1362"+
		"\u1369\u136e\u1372\u1378\u1381\u1387\u138e\u1394\u139a\u139f\u13a2\u13a4"+
		"\u13aa\u13ac\u13b0\u13b2\u13b9\u13bb\u13c0\u13c7\u13d0\u13d5\u13de\u13e5"+
		"\u13ea\u13ed\u13ef\u13f5\u13f7\u13fa\u1402\u1407\u140c\u1410\u1416\u141b"+
		"\u141f\u1425\u1427\u1432\u1435\u143c\u143f\u144b\u1451\u145a\u1463\u1468"+
		"\u1471\u1477\u1482\u1488\u148d\u1491\u1497\u149c\u14a0\u14a3\u14af\u14b6"+
		"\u14bb\u14cd\u14d5\u14da\u14e0\u14ea\u14f4\u14fe\u1504\u150d\u1513\u151a"+
		"\u151c\u1526\u152a\u152e\u1538\u153d\u1584\u1596\u159e\u15aa\u15b1\u15b3"+
		"\u15bd\u15c0\u15c8\u15cf\u15d3\u15da\u15df\u15e2\u15e5\u15ee\u15f2\u15f6"+
		"\u160d\u1614\u1618\u161f\u1626\u1629\u1639\u163c\u1646\u164a\u1650\u1653"+
		"\u1658\u165c\u1663\u1666\u166c\u1684\u1687\u1693\u1696\u16a0\u16a8\u16ac"+
		"\u16b3\u16b6\u16bf\u16c5\u16cb\u16d5\u16d7\u16dd\u16e0\u16e3\u16ef\u16f2"+
		"\u16f8\u16fb\u1703\u170b\u1711\u1715\u1723\u172f\u1736\u1739\u1740\u1747"+
		"\u174c\u1759\u1764\u176a\u176f\u177c\u177e\u1783\u1787\u178a\u178c\u1793"+
		"\u179a\u179d\u17a0\u17a6\u17aa\u17b0\u17b6\u17c3\u17c8\u17d0\u17d3\u17d8"+
		"\u17dd\u17e5\u17e8\u17f0\u17f4\u17fb\u1800\u180d\u1813\u181f\u1822\u182b"+
		"\u1830\u1836\u183c\u1841\u1843\u1846\u184a\u184c\u1850\u1856\u1859\u185c"+
		"\u1863\u186b\u186f\u1883\u188a\u188c\u1893\u1895\u1899\u189e\u18a9\u18ae"+
		"\u18b4\u18b7\u18bb\u18c0\u18c3\u18c7\u18cb\u18cd\u18d2\u18d7\u18e4\u18e7"+
		"\u18eb\u18ee\u18f1\u18f6\u18fb\u1901\u1904\u1909\u190c\u1911\u1914\u1918"+
		"\u191d\u1922\u1927\u192c\u192f\u1934\u1939\u193e\u1944\u1949\u194e\u1953"+
		"\u1957\u195a\u195f\u1963\u1967\u196f\u1976\u197a\u197f\u1984\u1988\u198a"+
		"\u198d\u199d\u19a6\u19ae\u19b6\u19bf\u19c9\u19d1\u19d9\u19e1\u19e9\u19f5"+
		"\u19fc\u1a06\u1a0b\u1a0e\u1a13\u1a16\u1a1a\u1a29\u1a31\u1a38\u1a3d\u1a42"+
		"\u1a63\u1a67\u1a6f\u1a73\u1a7c\u1a84\u1a89\u1a91\u1a96\u1a9b\u1a9d\u1aa6"+
		"\u1aab\u1ab3\u1ab8\u1ac0\u1ac8\u1acb\u1ad5\u1ae7\u1aea\u1aed\u1af1\u1afe"+
		"\u1b06\u1b0a\u1b0f\u1b14\u1b1a\u1b1f\u1b23\u1b28\u1b2d\u1b32\u1b3c\u1b3f"+
		"\u1b43\u1b47\u1b4e\u1b52\u1b6f\u1b77\u1b7a\u1b7d\u1b80\u1b83\u1b8e\u1b9c"+
		"\u1ba5\u1bbf\u1bca\u1bd1\u1bd5\u1bdc\u1be4\u1be9\u1bf1\u1bf7\u1c01\u1c0e"+
		"\u1c14\u1c1a\u1c2a\u1c30\u1c39\u1c3b\u1c4e\u1c5a\u1c6b\u1c7c\u1c7e\u1c91"+
		"\u1c9a\u1ca3\u1cac";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}